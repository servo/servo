/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#[link(name = "servo",
       vers = "0.1",
       uuid = "637ffc98-9058-471d-9de7-abfc49ef0549",
       url = "http://servo.org/")];

#[comment = "The Servo Parallel Browser Project"];
#[license = "MPL"];
#[crate_type = "lib"];

#[legacy_records];

extern mod azure;
extern mod geom;
extern mod gfx (name = "servo_gfx");
extern mod glut;
extern mod http_client;
extern mod hubbub;
extern mod js;
extern mod layers;
extern mod opengles;
extern mod newcss (name = "css");
extern mod sharegl;
extern mod stb_image;
extern mod std;

#[cfg(target_os="macos")]
extern mod core_graphics;
#[cfg(target_os="macos")]
extern mod core_text;

use engine::{Engine, LoadURLMsg};
use platform::osmain::{AddKeyHandler, OSMain};

pub use gfx::opts::{Opts, Png, Screen};  // FIXME: Do we really want "Screen" and "Png" visible?
pub use gfx::resource;
pub use gfx::resource::image_cache_task::ImageCacheTask;
pub use gfx::resource::resource_task::ResourceTask;
pub use gfx::text;
pub use gfx::util::url::make_url;

pub mod content {
    pub mod content_task;
}

pub mod css {
    priv mod select_handler;
    priv mod node_util;
    priv mod node_void_ptr;

    pub mod select;
    pub mod matching;
    pub mod node_style;
}

pub mod dom {
    pub mod bindings {
        pub mod document;
        pub mod element;
        pub mod node;
        pub mod utils;
        pub mod conversions;
        pub mod window;
        pub mod proxyhandler;
        pub mod clientrect;
        pub mod clientrectlist;
        pub mod htmlcollection;
        pub mod codegen {
            pub mod ClientRectBinding;
            pub mod ClientRectListBinding;
            pub mod HTMLCollectionBinding;
        }
    }
    pub mod document;
    pub mod element;
    pub mod event;
    pub mod node;
    pub mod window;
}

pub mod engine;

pub mod layout {
    pub mod block;
    pub mod box;
    pub mod box_builder;
    pub mod context;
    pub mod debug;
    pub mod display_list_builder;
    pub mod flow;
    pub mod layout_task;
    pub mod inline;
    pub mod root;
    pub mod text;
    pub mod traverse;
    mod aux;
}

pub mod html {
    pub mod cssparse;
    pub mod hubbub_html_parser;
}

pub mod platform {
    pub mod base;
    pub mod osmain;
    priv mod resize_rate_limiter;
}

#[path = "util/mod.rs"]
pub mod util;

fn main() {
    let args = os::args();
    run(&gfx::opts::from_cmdline_args(args))
}

#[allow(non_implicitly_copyable_typarams)]
fn run(opts: &Opts) {
    match &opts.render_mode {
      &Screen => run_pipeline_screen(opts),
      &Png(ref outfile) => {
        assert!(!opts.urls.is_empty());
        if opts.urls.len() > 1u {
            fail!(~"servo asks that you stick to a single URL in PNG output mode")
        }
        run_pipeline_png(opts, *outfile)
      }
    }
}

fn run_pipeline_screen(opts: &Opts) {
    let (dom_event_port, dom_event_chan) = comm::stream();
    let dom_event_chan = comm::SharedChan(dom_event_chan);

    // The platform event handler thread
    let osmain = OSMain(dom_event_chan.clone(), copy *opts);

    // Send each file to render then wait for keypress
    let (keypress_from_osmain, keypress_to_engine) = comm::stream();
    osmain.chan.send(AddKeyHandler(keypress_to_engine));

    // Create a servo instance
    let resource_task = ResourceTask();
    let image_cache_task = ImageCacheTask(resource_task.clone());
    let engine_task = Engine(osmain.clone(),
                             opts,
                             dom_event_port,
                             dom_event_chan,
                             resource_task,
                             image_cache_task);

    for opts.urls.each |filename| {
        let url = make_url(copy *filename, None);
        debug!("master: Sending url `%s`", url.to_str());
        engine_task.send(LoadURLMsg(url));
        debug!("master: Waiting for keypress");

        match keypress_from_osmain.try_recv() {
          Some(*) => { }
          None => { error!("keypress stream closed unexpectedly") }
        };
    }

    // Shut everything down
    debug!("master: Shut down");
    let (exit_response_from_engine, exit_chan) = comm::stream();
    engine_task.send(engine::ExitMsg(exit_chan));
    exit_response_from_engine.recv();

    osmain.chan.send(platform::osmain::Exit);
}

fn run_pipeline_png(_opts: &Opts, _outfile: &str) {
    fail!(~"PNG compositor is broken");
}

#[cfg(broken)]
fn run_pipeline_png(url: ~str, outfile: &str) {
    // Use a PNG encoder as the graphics compositor
    use gfx::png_compositor;
    use png_compositor::PngCompositor;
    use io::{Writer, buffered_file_writer};
    use resource::resource_task::ResourceTask;
    use resource::image_cache_task::SyncImageCacheTask;

    listen(|pngdata_from_compositor| {
        let (dom_event_port, dom_event_chan) = comm::stream();
        let dom_event_chan = comm::SharedChan(dom_event_chan);

        let compositor = PngCompositor(pngdata_from_compositor);
        let resource_task = ResourceTask();
        // For the PNG pipeline we are using a synchronous image task so that all images will be
        // fulfilled before the first paint.
        let image_cache_task = SyncImageCacheTask(resource_task);
        let engine_task = Engine(copy compositor,
                                 dom_event_port,
                                 dom_event_chan,
                                 resource_task,
                                 image_cache_task);
        engine_task.send(LoadURLMsg(make_url(copy url, None)));

        match buffered_file_writer(&Path(outfile)) {
          Ok(writer) => writer.write(pngdata_from_compositor.recv()),
          Err(e) => fail!(e)
        }

        let (exit_chan, exit_response_from_engine) = comm::stream();
        engine_task.send(engine::ExitMsg(exit_chan));
        exit_response_from_engine.recv();
        compositor.send(png_compositor::Exit);
    })
}

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#[link(name = "servo",
       vers = "0.1",
       uuid = "637ffc98-9058-471d-9de7-abfc49ef0549",
       url = "http://servo.org/")];

#[comment = "The Servo Parallel Browser Project"];
#[license = "MPL"];
#[crate_type = "lib"];

#[feature(globs, macro_rules, managed_boxes)];

extern mod alert;
extern mod azure;
extern mod geom;
extern mod gfx (name = "gfx");
#[cfg(not(target_os="android"))]
extern mod glfw;
#[cfg(target_os="android")]
extern mod glut;
extern mod js;
extern mod layers;
extern mod opengles;
extern mod png;
extern mod script;
extern mod servo_net (name = "net");
extern mod servo_msg (name = "msg");
extern mod servo_util (name = "util");
extern mod style;
extern mod sharegl;
extern mod stb_image;
extern mod extra;

#[cfg(target_os="macos")]
extern mod core_graphics;
#[cfg(target_os="macos")]
extern mod core_text;

use compositing::{CompositorChan, CompositorTask};
use constellation::Constellation;
use servo_msg::constellation_msg::{ConstellationChan, InitLoadUrlMsg};

#[cfg(not(test))]
use gfx::opts;

use servo_net::image_cache_task::ImageCacheTask;
use servo_net::resource_task::ResourceTask;
use servo_util::time::{Profiler, ProfilerChan};

pub use gfx::opts::Opts;
pub use gfx::text;
pub use servo_util::url::make_url;
use std::comm;
#[cfg(not(test))]
use std::os;
#[cfg(not(test))]
use std::str;
use std::task::spawn_with;

#[path="compositing/compositor_task.rs"]
pub mod compositing;

pub mod macros;

pub mod css {
    mod node_util;

    pub mod select;
    pub mod matching;
    pub mod node_style;
}

pub mod constellation;
pub mod pipeline;

pub mod layout {
    pub mod block;
    pub mod box;
    pub mod construct;
    pub mod context;
    pub mod display_list_builder;
    pub mod float_context;
    pub mod flow;
    pub mod layout_task;
    pub mod inline;
    pub mod model;
    pub mod text;
    pub mod util;
    pub mod incremental;
    pub mod wrapper;
    mod extra;
}

pub mod windowing;

#[path="platform/mod.rs"]
pub mod platform;

#[path = "util/mod.rs"]
pub mod util;

#[cfg(not(test), target_os="linux")]
#[cfg(not(test), target_os="macos")]
#[start]
fn start(argc: int, argv: **u8) -> int {
    do std::rt::start_on_main_thread(argc, argv) {
        run(opts::from_cmdline_args(os::args()))
    }
}

#[cfg(not(test), target_os="android")]
#[no_mangle]
pub extern "C" fn android_start(argc: int, argv: **u8) -> int {
    do std::rt::start_on_main_thread(argc, argv) {
        let mut args:~[~str] = ~[];
        for i in range(0u, argc as uint) {
            unsafe {
                args.push(str::raw::from_c_str(*argv.offset(i as int) as *i8));
            }
        }
        run(opts::from_cmdline_args(args))
    }
}

fn run(opts: Opts) {
    let (exit_response_from_constellation, exit_chan) = comm::stream();
    let (profiler_port, profiler_chan) = special_stream!(ProfilerChan);
    let (compositor_port, compositor_chan) = special_stream!(CompositorChan);
    let (constellation_port, constellation_chan) = special_stream!(ConstellationChan);

    Profiler::create(profiler_port, profiler_chan.clone(), opts.profiler_period);

    do spawn_with((constellation_port,
                   constellation_chan.clone(),
                   profiler_chan.clone(),
                   compositor_chan,
                   opts.clone()))
            |(constellation_port,
              constellation_chan,
              profiler_chan,
              compositor_chan,
              opts)| {
        let opts = &opts;

        // Create a Servo instance.
        let resource_task = ResourceTask();
        let image_cache_task = ImageCacheTask(resource_task.clone());
        Constellation::start(constellation_port,
                             constellation_chan.clone(),
                             compositor_chan,
                             opts,
                             resource_task,
                             image_cache_task,
                             profiler_chan.clone());

        // Send the URL command to the constellation.
        for filename in opts.urls.iter() {
            constellation_chan.send(InitLoadUrlMsg(make_url(filename.clone(), None)))
        }
    }


    debug!("preparing to enter main loop");
    CompositorTask::create(opts,
                           compositor_port,
                           constellation_chan.clone(),
                           profiler_chan,
                           exit_chan,
                           exit_response_from_constellation);
}


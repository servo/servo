/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#[link(name = "servo",
       vers = "0.1",
       uuid = "637ffc98-9058-471d-9de7-abfc49ef0549",
       url = "http://servo.org/")];

#[comment = "The Servo Parallel Browser Project"];
#[license = "MPL"];
#[crate_type = "lib"];

#[feature(globs, macro_rules, managed_boxes)];

extern mod alert;
extern mod azure;
extern mod geom = "rust-geom";
extern mod gfx (name = "gfx");
#[cfg(not(target_os="android"))]
extern mod glfw;
#[cfg(target_os="android")]
extern mod glut;
extern mod js;
extern mod layers = "rust-layers";
extern mod opengles = "rust-opengles";
extern mod png;
extern mod script;
extern mod servo_net (name = "net");
extern mod servo_msg (name = "msg");
extern mod servo_util (name = "util");
extern mod style;
extern mod sharegl;
extern mod stb_image;
extern mod extra;

#[cfg(target_os="macos")]
extern mod core_graphics = "rust-core-graphics";
#[cfg(target_os="macos")]
extern mod core_text = "rust-core-text";

use compositing::{CompositorChan, CompositorTask};
use constellation::Constellation;
use servo_msg::constellation_msg::{ExitMsg, InitLoadUrlMsg};

#[cfg(not(test))]
use gfx::opts;

use servo_net::image_cache_task::ImageCacheTask;
use servo_net::resource_task::ResourceTask;
use servo_util::time::{Profiler, ProfilerChan};

pub use gfx::opts::Opts;
pub use gfx::text;
pub use servo_util::url::make_url;
use std::comm;
#[cfg(not(test))]
use std::os;
use std::task::spawn_with;

#[path="compositing/mod.rs"]
pub mod compositing;

pub mod macros;

pub mod css {
    mod node_util;

    pub mod select;
    pub mod matching;
    pub mod node_style;
}

pub mod constellation;
pub mod pipeline;

pub mod layout {
    pub mod block;
    pub mod box;
    pub mod construct;
    pub mod context;
    pub mod display_list_builder;
    pub mod float_context;
    pub mod float;
    pub mod flow;
    pub mod layout_task;
    pub mod inline;
    pub mod model;
    pub mod parallel;
    pub mod text;
    pub mod util;
    pub mod incremental;
    mod extra;
}

pub mod windowing;

#[path="platform/mod.rs"]
pub mod platform;

#[path = "util/mod.rs"]
pub mod util;

#[cfg(not(test))]
#[start]
fn start(argc: int, argv: **u8) -> int {
    #[cfg(target_os="linux")]
    #[cfg(target_os="macos")]
    fn getopts() -> Opts {
        opts::from_cmdline_args(os::args())
    }
    #[cfg(target_os="android")]
    fn getopts() -> Opts {
        let mut args:~[~str] = ~[];
        args.push(~"servo");
        let servo_url = os::getenv(~"SERVO_URL");
        match servo_url {
            Some(s) => { args.push(s); },
            None => { fail!("No url input"); }
        }
        opts::from_cmdline_args(args)
    }
    do std::rt::start_on_main_thread(argc, argv) {
        run(getopts())
    }
}

fn run(opts: Opts) {
    let (shutdown_port, shutdown_chan) = comm::stream();
    let (profiler_port, profiler_chan) = special_stream!(ProfilerChan);
    let (compositor_port, compositor_chan) = special_stream!(CompositorChan);

    Profiler::create(profiler_port, profiler_chan.clone(), opts.profiler_period);

    do spawn_with((profiler_chan.clone(), compositor_chan, opts.clone()))
        |(profiler_chan, compositor_chan, opts)| {

        let opts = &opts;
        // Create a Servo instance.
        let resource_task = ResourceTask();
        let image_cache_task = ImageCacheTask(resource_task.clone());
        let constellation_chan = Constellation::start(compositor_chan,
                                                      opts,
                                                      resource_task,
                                                      image_cache_task,
                                                      profiler_chan.clone());

        // Send the URL command to the constellation.
        for filename in opts.urls.iter() {
            constellation_chan.send(InitLoadUrlMsg(make_url(filename.clone(), None)))
        }

        // Wait for the compositor to shut down.
        shutdown_port.recv();

        // Shut the constellation down.
        debug!("master: Shut down");
        let (exit_response_from_constellation, exit_chan) = comm::stream();
        constellation_chan.send(ExitMsg(exit_chan));
        exit_response_from_constellation.recv();
    }


    let compositor_task = CompositorTask::new(opts,
                                              compositor_port,
                                              profiler_chan,
                                              shutdown_chan);
    debug!("preparing to enter main loop");
    compositor_task.run();
}


/* automatically generated by rust-bindgen */

use structs::nsStyleFont;
use structs::nsStyleColor;
use structs::nsStyleList;
use structs::nsStyleText;
use structs::nsStyleVisibility;
use structs::nsStyleUserInterface;
use structs::nsStyleTableBorder;
use structs::nsStyleSVG;
use structs::nsStyleVariables;
use structs::nsStyleBackground;
use structs::nsStylePosition;
use structs::nsStyleTextReset;
use structs::nsStyleDisplay;
use structs::nsStyleContent;
use structs::nsStyleUIReset;
use structs::nsStyleTable;
use structs::nsStyleMargin;
use structs::nsStylePadding;
use structs::nsStyleBorder;
use structs::nsStyleOutline;
use structs::nsStyleXUL;
use structs::nsStyleSVGReset;
use structs::nsStyleColumn;
use structs::nsStyleEffects;
use structs::nsStyleImage;
use structs::nsStyleGradient;
use structs::nsStyleCoord;
use structs::nsStyleGradientStop;
use structs::SheetParsingMode;
use structs::nsMainThreadPtrHandle;
use structs::nsMainThreadPtrHolder;
use structs::nscolor;
use heapsize::HeapSizeOf;
unsafe impl Send for nsStyleFont {}
unsafe impl Sync for nsStyleFont {}
impl HeapSizeOf for nsStyleFont { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleColor {}
unsafe impl Sync for nsStyleColor {}
impl HeapSizeOf for nsStyleColor { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleList {}
unsafe impl Sync for nsStyleList {}
impl HeapSizeOf for nsStyleList { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleText {}
unsafe impl Sync for nsStyleText {}
impl HeapSizeOf for nsStyleText { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleVisibility {}
unsafe impl Sync for nsStyleVisibility {}
impl HeapSizeOf for nsStyleVisibility { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleUserInterface {}
unsafe impl Sync for nsStyleUserInterface {}
impl HeapSizeOf for nsStyleUserInterface { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleTableBorder {}
unsafe impl Sync for nsStyleTableBorder {}
impl HeapSizeOf for nsStyleTableBorder { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleSVG {}
unsafe impl Sync for nsStyleSVG {}
impl HeapSizeOf for nsStyleSVG { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleVariables {}
unsafe impl Sync for nsStyleVariables {}
impl HeapSizeOf for nsStyleVariables { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleBackground {}
unsafe impl Sync for nsStyleBackground {}
impl HeapSizeOf for nsStyleBackground { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStylePosition {}
unsafe impl Sync for nsStylePosition {}
impl HeapSizeOf for nsStylePosition { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleTextReset {}
unsafe impl Sync for nsStyleTextReset {}
impl HeapSizeOf for nsStyleTextReset { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleDisplay {}
unsafe impl Sync for nsStyleDisplay {}
impl HeapSizeOf for nsStyleDisplay { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleContent {}
unsafe impl Sync for nsStyleContent {}
impl HeapSizeOf for nsStyleContent { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleUIReset {}
unsafe impl Sync for nsStyleUIReset {}
impl HeapSizeOf for nsStyleUIReset { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleTable {}
unsafe impl Sync for nsStyleTable {}
impl HeapSizeOf for nsStyleTable { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleMargin {}
unsafe impl Sync for nsStyleMargin {}
impl HeapSizeOf for nsStyleMargin { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStylePadding {}
unsafe impl Sync for nsStylePadding {}
impl HeapSizeOf for nsStylePadding { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleBorder {}
unsafe impl Sync for nsStyleBorder {}
impl HeapSizeOf for nsStyleBorder { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleOutline {}
unsafe impl Sync for nsStyleOutline {}
impl HeapSizeOf for nsStyleOutline { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleXUL {}
unsafe impl Sync for nsStyleXUL {}
impl HeapSizeOf for nsStyleXUL { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleSVGReset {}
unsafe impl Sync for nsStyleSVGReset {}
impl HeapSizeOf for nsStyleSVGReset { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleColumn {}
unsafe impl Sync for nsStyleColumn {}
impl HeapSizeOf for nsStyleColumn { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleEffects {}
unsafe impl Sync for nsStyleEffects {}
impl HeapSizeOf for nsStyleEffects { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleImage {}
unsafe impl Sync for nsStyleImage {}
impl HeapSizeOf for nsStyleImage { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleGradient {}
unsafe impl Sync for nsStyleGradient {}
impl HeapSizeOf for nsStyleGradient { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleCoord {}
unsafe impl Sync for nsStyleCoord {}
impl HeapSizeOf for nsStyleCoord { fn heap_size_of_children(&self) -> usize { 0 } }
unsafe impl Send for nsStyleGradientStop {}
unsafe impl Sync for nsStyleGradientStop {}
impl HeapSizeOf for nsStyleGradientStop { fn heap_size_of_children(&self) -> usize { 0 } }

pub enum nsIAtom { }
pub enum nsINode { }
pub type RawGeckoNode = nsINode;
pub enum nsIPrincipal { }
pub enum nsIURI { }
pub enum Element { }
pub type RawGeckoElement = Element;
pub enum nsIDocument { }
pub type RawGeckoDocument = nsIDocument;
pub enum ServoNodeData { }
pub enum ServoComputedValues { }
pub enum RawServoStyleSheet { }
pub enum RawServoStyleSet { }
pub type ThreadSafePrincipalHolder = nsMainThreadPtrHolder<nsIPrincipal>;
pub type ThreadSafeURIHolder = nsMainThreadPtrHolder<nsIURI>;
extern "C" {
    pub fn Gecko_ChildrenCount(node: *mut RawGeckoNode) -> u32;
    pub fn Gecko_NodeIsElement(node: *mut RawGeckoNode) -> bool;
    pub fn Gecko_GetParentNode(node: *mut RawGeckoNode) -> *mut RawGeckoNode;
    pub fn Gecko_GetFirstChild(node: *mut RawGeckoNode) -> *mut RawGeckoNode;
    pub fn Gecko_GetLastChild(node: *mut RawGeckoNode) -> *mut RawGeckoNode;
    pub fn Gecko_GetPrevSibling(node: *mut RawGeckoNode) -> *mut RawGeckoNode;
    pub fn Gecko_GetNextSibling(node: *mut RawGeckoNode) -> *mut RawGeckoNode;
    pub fn Gecko_GetParentElement(element: *mut RawGeckoElement)
     -> *mut RawGeckoElement;
    pub fn Gecko_GetFirstChildElement(element: *mut RawGeckoElement)
     -> *mut RawGeckoElement;
    pub fn Gecko_GetLastChildElement(element: *mut RawGeckoElement)
     -> *mut RawGeckoElement;
    pub fn Gecko_GetPrevSiblingElement(element: *mut RawGeckoElement)
     -> *mut RawGeckoElement;
    pub fn Gecko_GetNextSiblingElement(element: *mut RawGeckoElement)
     -> *mut RawGeckoElement;
    pub fn Gecko_GetDocumentElement(document: *mut RawGeckoDocument)
     -> *mut RawGeckoElement;
    pub fn Gecko_ElementState(element: *mut RawGeckoElement) -> u8;
    pub fn Gecko_IsHTMLElementInHTMLDocument(element: *mut RawGeckoElement)
     -> bool;
    pub fn Gecko_IsLink(element: *mut RawGeckoElement) -> bool;
    pub fn Gecko_IsTextNode(node: *mut RawGeckoNode) -> bool;
    pub fn Gecko_IsVisitedLink(element: *mut RawGeckoElement) -> bool;
    pub fn Gecko_IsUnvisitedLink(element: *mut RawGeckoElement) -> bool;
    pub fn Gecko_IsRootElement(element: *mut RawGeckoElement) -> bool;
    pub fn Gecko_LocalName(element: *mut RawGeckoElement) -> *mut nsIAtom;
    pub fn Gecko_Namespace(element: *mut RawGeckoElement) -> *mut nsIAtom;
    pub fn Gecko_GetElementId(element: *mut RawGeckoElement) -> *mut nsIAtom;
    pub fn Gecko_ClassOrClassList(element: *mut RawGeckoElement,
                                  class_: *mut *mut nsIAtom,
                                  classList: *mut *mut *mut nsIAtom) -> u32;
    pub fn Gecko_GetNodeData(node: *mut RawGeckoNode) -> *mut ServoNodeData;
    pub fn Gecko_SetNodeData(node: *mut RawGeckoNode,
                             data: *mut ServoNodeData);
    pub fn Servo_DropNodeData(data: *mut ServoNodeData);
    pub fn Gecko_Atomize(aString: *const ::std::os::raw::c_char, aLength: u32)
     -> *mut nsIAtom;
    pub fn Gecko_AddRefAtom(aAtom: *mut nsIAtom);
    pub fn Gecko_ReleaseAtom(aAtom: *mut nsIAtom);
    pub fn Gecko_HashAtom(aAtom: *mut nsIAtom) -> u32;
    pub fn Gecko_GetAtomAsUTF16(aAtom: *mut nsIAtom, aLength: *mut u32)
     -> *const u16;
    pub fn Gecko_AtomEqualsUTF8(aAtom: *mut nsIAtom,
                                aString: *const ::std::os::raw::c_char,
                                aLength: u32) -> bool;
    pub fn Gecko_AtomEqualsUTF8IgnoreCase(aAtom: *mut nsIAtom,
                                          aString:
                                              *const ::std::os::raw::c_char,
                                          aLength: u32) -> bool;
    pub fn Gecko_SetListStyleType(style_struct: *mut nsStyleList, type_: u32);
    pub fn Gecko_CopyListStyleTypeFrom(dst: *mut nsStyleList,
                                       src: *const nsStyleList);
    pub fn Gecko_SetNullImageValue(image: *mut nsStyleImage);
    pub fn Gecko_SetGradientImageValue(image: *mut nsStyleImage,
                                       gradient: *mut nsStyleGradient);
    pub fn Gecko_CopyImageValueFrom(image: *mut nsStyleImage,
                                    other: *const nsStyleImage);
    pub fn Gecko_CreateGradient(shape: u8, size: u8, repeating: bool,
                                legacy_syntax: bool, stops: u32)
     -> *mut nsStyleGradient;
    pub fn Gecko_SetGradientStop(gradient: *mut nsStyleGradient, index: u32,
                                 location: *const nsStyleCoord,
                                 color: nscolor, is_interpolation_hint: bool);
    pub fn Gecko_AddRefPrincipalArbitraryThread(aPtr:
                                                    *mut ThreadSafePrincipalHolder);
    pub fn Gecko_ReleasePrincipalArbitraryThread(aPtr:
                                                     *mut ThreadSafePrincipalHolder);
    pub fn Gecko_AddRefURIArbitraryThread(aPtr: *mut ThreadSafeURIHolder);
    pub fn Gecko_ReleaseURIArbitraryThread(aPtr: *mut ThreadSafeURIHolder);
    pub fn Gecko_SetMozBinding(style_struct: *mut nsStyleDisplay,
                               string_bytes: *const u8, string_length: u32,
                               base_uri: *mut ThreadSafeURIHolder,
                               referrer: *mut ThreadSafeURIHolder,
                               principal: *mut ThreadSafePrincipalHolder);
    pub fn Gecko_CopyMozBindingFrom(des: *mut nsStyleDisplay,
                                    src: *const nsStyleDisplay);
    pub fn Servo_StylesheetFromUTF8Bytes(bytes: *const u8, length: u32,
                                         parsing_mode: SheetParsingMode,
                                         base: *mut ThreadSafeURIHolder,
                                         referrer: *mut ThreadSafeURIHolder,
                                         principal:
                                             *mut ThreadSafePrincipalHolder)
     -> *mut RawServoStyleSheet;
    pub fn Servo_AddRefStyleSheet(sheet: *mut RawServoStyleSheet);
    pub fn Servo_ReleaseStyleSheet(sheet: *mut RawServoStyleSheet);
    pub fn Servo_AppendStyleSheet(sheet: *mut RawServoStyleSheet,
                                  set: *mut RawServoStyleSet);
    pub fn Servo_PrependStyleSheet(sheet: *mut RawServoStyleSheet,
                                   set: *mut RawServoStyleSet);
    pub fn Servo_RemoveStyleSheet(sheet: *mut RawServoStyleSheet,
                                  set: *mut RawServoStyleSet);
    pub fn Servo_InsertStyleSheetBefore(sheet: *mut RawServoStyleSheet,
                                        reference: *mut RawServoStyleSheet,
                                        set: *mut RawServoStyleSet);
    pub fn Servo_StyleSheetHasRules(sheet: *mut RawServoStyleSheet) -> bool;
    pub fn Servo_InitStyleSet() -> *mut RawServoStyleSet;
    pub fn Servo_DropStyleSet(set: *mut RawServoStyleSet);
    pub fn Servo_GetComputedValues(node: *mut RawGeckoNode)
     -> *mut ServoComputedValues;
    pub fn Servo_GetComputedValuesForAnonymousBox(parentStyleOrNull:
                                                      *mut ServoComputedValues,
                                                  pseudoTag: *mut nsIAtom,
                                                  set: *mut RawServoStyleSet)
     -> *mut ServoComputedValues;
    pub fn Servo_GetComputedValuesForPseudoElement(parent_style:
                                                       *mut ServoComputedValues,
                                                   match_element:
                                                       *mut RawGeckoElement,
                                                   pseudo_tag: *mut nsIAtom,
                                                   set: *mut RawServoStyleSet,
                                                   is_probe: bool)
     -> *mut ServoComputedValues;
    pub fn Servo_InheritComputedValues(parent_style: *mut ServoComputedValues)
     -> *mut ServoComputedValues;
    pub fn Servo_AddRefComputedValues(arg1: *mut ServoComputedValues);
    pub fn Servo_ReleaseComputedValues(arg1: *mut ServoComputedValues);
    pub fn Servo_Initialize();
    pub fn Servo_RestyleDocument(doc: *mut RawGeckoDocument,
                                 set: *mut RawServoStyleSet);
    pub fn Servo_RestyleSubtree(node: *mut RawGeckoNode,
                                set: *mut RawServoStyleSet);
    pub fn Gecko_GetAttrAsUTF8(element: *mut RawGeckoElement,
                               ns: *mut nsIAtom, name: *mut nsIAtom,
                               length: *mut u32)
     -> *const ::std::os::raw::c_char;
    pub fn Gecko_Construct_nsStyleFont(ptr: *mut nsStyleFont);
    pub fn Gecko_CopyConstruct_nsStyleFont(ptr: *mut nsStyleFont,
                                           other: *const nsStyleFont);
    pub fn Gecko_Destroy_nsStyleFont(ptr: *mut nsStyleFont);
    pub fn Servo_GetStyleFont(computedValues: *mut ServoComputedValues)
     -> *const nsStyleFont;
    pub fn Gecko_Construct_nsStyleColor(ptr: *mut nsStyleColor);
    pub fn Gecko_CopyConstruct_nsStyleColor(ptr: *mut nsStyleColor,
                                            other: *const nsStyleColor);
    pub fn Gecko_Destroy_nsStyleColor(ptr: *mut nsStyleColor);
    pub fn Servo_GetStyleColor(computedValues: *mut ServoComputedValues)
     -> *const nsStyleColor;
    pub fn Gecko_Construct_nsStyleList(ptr: *mut nsStyleList);
    pub fn Gecko_CopyConstruct_nsStyleList(ptr: *mut nsStyleList,
                                           other: *const nsStyleList);
    pub fn Gecko_Destroy_nsStyleList(ptr: *mut nsStyleList);
    pub fn Servo_GetStyleList(computedValues: *mut ServoComputedValues)
     -> *const nsStyleList;
    pub fn Gecko_Construct_nsStyleText(ptr: *mut nsStyleText);
    pub fn Gecko_CopyConstruct_nsStyleText(ptr: *mut nsStyleText,
                                           other: *const nsStyleText);
    pub fn Gecko_Destroy_nsStyleText(ptr: *mut nsStyleText);
    pub fn Servo_GetStyleText(computedValues: *mut ServoComputedValues)
     -> *const nsStyleText;
    pub fn Gecko_Construct_nsStyleVisibility(ptr: *mut nsStyleVisibility);
    pub fn Gecko_CopyConstruct_nsStyleVisibility(ptr: *mut nsStyleVisibility,
                                                 other:
                                                     *const nsStyleVisibility);
    pub fn Gecko_Destroy_nsStyleVisibility(ptr: *mut nsStyleVisibility);
    pub fn Servo_GetStyleVisibility(computedValues: *mut ServoComputedValues)
     -> *const nsStyleVisibility;
    pub fn Gecko_Construct_nsStyleUserInterface(ptr:
                                                    *mut nsStyleUserInterface);
    pub fn Gecko_CopyConstruct_nsStyleUserInterface(ptr:
                                                        *mut nsStyleUserInterface,
                                                    other:
                                                        *const nsStyleUserInterface);
    pub fn Gecko_Destroy_nsStyleUserInterface(ptr: *mut nsStyleUserInterface);
    pub fn Servo_GetStyleUserInterface(computedValues:
                                           *mut ServoComputedValues)
     -> *const nsStyleUserInterface;
    pub fn Gecko_Construct_nsStyleTableBorder(ptr: *mut nsStyleTableBorder);
    pub fn Gecko_CopyConstruct_nsStyleTableBorder(ptr:
                                                      *mut nsStyleTableBorder,
                                                  other:
                                                      *const nsStyleTableBorder);
    pub fn Gecko_Destroy_nsStyleTableBorder(ptr: *mut nsStyleTableBorder);
    pub fn Servo_GetStyleTableBorder(computedValues: *mut ServoComputedValues)
     -> *const nsStyleTableBorder;
    pub fn Gecko_Construct_nsStyleSVG(ptr: *mut nsStyleSVG);
    pub fn Gecko_CopyConstruct_nsStyleSVG(ptr: *mut nsStyleSVG,
                                          other: *const nsStyleSVG);
    pub fn Gecko_Destroy_nsStyleSVG(ptr: *mut nsStyleSVG);
    pub fn Servo_GetStyleSVG(computedValues: *mut ServoComputedValues)
     -> *const nsStyleSVG;
    pub fn Gecko_Construct_nsStyleVariables(ptr: *mut nsStyleVariables);
    pub fn Gecko_CopyConstruct_nsStyleVariables(ptr: *mut nsStyleVariables,
                                                other:
                                                    *const nsStyleVariables);
    pub fn Gecko_Destroy_nsStyleVariables(ptr: *mut nsStyleVariables);
    pub fn Servo_GetStyleVariables(computedValues: *mut ServoComputedValues)
     -> *const nsStyleVariables;
    pub fn Gecko_Construct_nsStyleBackground(ptr: *mut nsStyleBackground);
    pub fn Gecko_CopyConstruct_nsStyleBackground(ptr: *mut nsStyleBackground,
                                                 other:
                                                     *const nsStyleBackground);
    pub fn Gecko_Destroy_nsStyleBackground(ptr: *mut nsStyleBackground);
    pub fn Servo_GetStyleBackground(computedValues: *mut ServoComputedValues)
     -> *const nsStyleBackground;
    pub fn Gecko_Construct_nsStylePosition(ptr: *mut nsStylePosition);
    pub fn Gecko_CopyConstruct_nsStylePosition(ptr: *mut nsStylePosition,
                                               other: *const nsStylePosition);
    pub fn Gecko_Destroy_nsStylePosition(ptr: *mut nsStylePosition);
    pub fn Servo_GetStylePosition(computedValues: *mut ServoComputedValues)
     -> *const nsStylePosition;
    pub fn Gecko_Construct_nsStyleTextReset(ptr: *mut nsStyleTextReset);
    pub fn Gecko_CopyConstruct_nsStyleTextReset(ptr: *mut nsStyleTextReset,
                                                other:
                                                    *const nsStyleTextReset);
    pub fn Gecko_Destroy_nsStyleTextReset(ptr: *mut nsStyleTextReset);
    pub fn Servo_GetStyleTextReset(computedValues: *mut ServoComputedValues)
     -> *const nsStyleTextReset;
    pub fn Gecko_Construct_nsStyleDisplay(ptr: *mut nsStyleDisplay);
    pub fn Gecko_CopyConstruct_nsStyleDisplay(ptr: *mut nsStyleDisplay,
                                              other: *const nsStyleDisplay);
    pub fn Gecko_Destroy_nsStyleDisplay(ptr: *mut nsStyleDisplay);
    pub fn Servo_GetStyleDisplay(computedValues: *mut ServoComputedValues)
     -> *const nsStyleDisplay;
    pub fn Gecko_Construct_nsStyleContent(ptr: *mut nsStyleContent);
    pub fn Gecko_CopyConstruct_nsStyleContent(ptr: *mut nsStyleContent,
                                              other: *const nsStyleContent);
    pub fn Gecko_Destroy_nsStyleContent(ptr: *mut nsStyleContent);
    pub fn Servo_GetStyleContent(computedValues: *mut ServoComputedValues)
     -> *const nsStyleContent;
    pub fn Gecko_Construct_nsStyleUIReset(ptr: *mut nsStyleUIReset);
    pub fn Gecko_CopyConstruct_nsStyleUIReset(ptr: *mut nsStyleUIReset,
                                              other: *const nsStyleUIReset);
    pub fn Gecko_Destroy_nsStyleUIReset(ptr: *mut nsStyleUIReset);
    pub fn Servo_GetStyleUIReset(computedValues: *mut ServoComputedValues)
     -> *const nsStyleUIReset;
    pub fn Gecko_Construct_nsStyleTable(ptr: *mut nsStyleTable);
    pub fn Gecko_CopyConstruct_nsStyleTable(ptr: *mut nsStyleTable,
                                            other: *const nsStyleTable);
    pub fn Gecko_Destroy_nsStyleTable(ptr: *mut nsStyleTable);
    pub fn Servo_GetStyleTable(computedValues: *mut ServoComputedValues)
     -> *const nsStyleTable;
    pub fn Gecko_Construct_nsStyleMargin(ptr: *mut nsStyleMargin);
    pub fn Gecko_CopyConstruct_nsStyleMargin(ptr: *mut nsStyleMargin,
                                             other: *const nsStyleMargin);
    pub fn Gecko_Destroy_nsStyleMargin(ptr: *mut nsStyleMargin);
    pub fn Servo_GetStyleMargin(computedValues: *mut ServoComputedValues)
     -> *const nsStyleMargin;
    pub fn Gecko_Construct_nsStylePadding(ptr: *mut nsStylePadding);
    pub fn Gecko_CopyConstruct_nsStylePadding(ptr: *mut nsStylePadding,
                                              other: *const nsStylePadding);
    pub fn Gecko_Destroy_nsStylePadding(ptr: *mut nsStylePadding);
    pub fn Servo_GetStylePadding(computedValues: *mut ServoComputedValues)
     -> *const nsStylePadding;
    pub fn Gecko_Construct_nsStyleBorder(ptr: *mut nsStyleBorder);
    pub fn Gecko_CopyConstruct_nsStyleBorder(ptr: *mut nsStyleBorder,
                                             other: *const nsStyleBorder);
    pub fn Gecko_Destroy_nsStyleBorder(ptr: *mut nsStyleBorder);
    pub fn Servo_GetStyleBorder(computedValues: *mut ServoComputedValues)
     -> *const nsStyleBorder;
    pub fn Gecko_Construct_nsStyleOutline(ptr: *mut nsStyleOutline);
    pub fn Gecko_CopyConstruct_nsStyleOutline(ptr: *mut nsStyleOutline,
                                              other: *const nsStyleOutline);
    pub fn Gecko_Destroy_nsStyleOutline(ptr: *mut nsStyleOutline);
    pub fn Servo_GetStyleOutline(computedValues: *mut ServoComputedValues)
     -> *const nsStyleOutline;
    pub fn Gecko_Construct_nsStyleXUL(ptr: *mut nsStyleXUL);
    pub fn Gecko_CopyConstruct_nsStyleXUL(ptr: *mut nsStyleXUL,
                                          other: *const nsStyleXUL);
    pub fn Gecko_Destroy_nsStyleXUL(ptr: *mut nsStyleXUL);
    pub fn Servo_GetStyleXUL(computedValues: *mut ServoComputedValues)
     -> *const nsStyleXUL;
    pub fn Gecko_Construct_nsStyleSVGReset(ptr: *mut nsStyleSVGReset);
    pub fn Gecko_CopyConstruct_nsStyleSVGReset(ptr: *mut nsStyleSVGReset,
                                               other: *const nsStyleSVGReset);
    pub fn Gecko_Destroy_nsStyleSVGReset(ptr: *mut nsStyleSVGReset);
    pub fn Servo_GetStyleSVGReset(computedValues: *mut ServoComputedValues)
     -> *const nsStyleSVGReset;
    pub fn Gecko_Construct_nsStyleColumn(ptr: *mut nsStyleColumn);
    pub fn Gecko_CopyConstruct_nsStyleColumn(ptr: *mut nsStyleColumn,
                                             other: *const nsStyleColumn);
    pub fn Gecko_Destroy_nsStyleColumn(ptr: *mut nsStyleColumn);
    pub fn Servo_GetStyleColumn(computedValues: *mut ServoComputedValues)
     -> *const nsStyleColumn;
    pub fn Gecko_Construct_nsStyleEffects(ptr: *mut nsStyleEffects);
    pub fn Gecko_CopyConstruct_nsStyleEffects(ptr: *mut nsStyleEffects,
                                              other: *const nsStyleEffects);
    pub fn Gecko_Destroy_nsStyleEffects(ptr: *mut nsStyleEffects);
    pub fn Servo_GetStyleEffects(computedValues: *mut ServoComputedValues)
     -> *const nsStyleEffects;
}

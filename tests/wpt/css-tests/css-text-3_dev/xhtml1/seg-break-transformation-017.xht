<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xmlns="http://www.w3.org/1999/xhtml"><head>
<meta charset="utf-8" />
<title>Thai with ZWSP after line break</title>
<link href="mailto:ishida@w3.org" rel="author" title="Richard Ishida" />
<link href="https://drafts.csswg.org/css-text-3/#line-break-transform" rel="help" />
<meta content="If the character immediately before or immediately after the segment break is the zero-width space character (U+200B), then the break is removed, leaving behind the zero-width space." name="assert" />
<style type="text/css">
.test span { font-size: 24px; font-family: sans-serif; background-color: #2AA5F7; color: white; }
.ref span { font-size: 24px; font-family: sans-serif; background-color: #270CEF; color: white; }
</style>
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
</head>
<body>
<div id="log"></div>
<div class="test" id="test1"><span>ภาษา
&#x200B;ไทย</span></div>
<div class="test" id="test2"><span>ภาษา
   &#x200B;ไทย</span></div>
<div class="test" id="test3"><span>ภาษา        
&#x200B;ไทย</span></div>
<div class="test" id="test4"><span>ภาษา   
     &#x200B;ไทย</span></div>
<div class="test" id="test5"><span>ภาษา


&#x200B;ไทย</span></div>
<div class="test" id="test6"><span>ภาษา  
   
   
   &#x200B;ไทย</span></div>
<div class="ref" id="ref"><span>ภาษาไทย</span></div>
<script>
test(function() {
assert_equals(document.getElementById('test1').firstChild.offsetWidth, document.getElementById('ref').firstChild.offsetWidth);
}, "linebreak only");
var matches = document.getElementById('test1').firstChild.textContent.match(/\u200B/g)
test(function() {
assert_equals(matches.length, 1);
}, "zwsp retained 1");
test(function() {
assert_equals(document.getElementById('test2').firstChild.offsetWidth, document.getElementById('ref').firstChild.offsetWidth);
}, "spaces linebreak");
var matches = document.getElementById('test2').firstChild.textContent.match(/\u200B/g)
test(function() {
assert_equals(matches.length, 1);
}, "zwsp retained 2");
test(function() {
assert_equals(document.getElementById('test3').firstChild.offsetWidth, document.getElementById('ref').firstChild.offsetWidth);
}, "linebreak spaces");
var matches = document.getElementById('test3').firstChild.textContent.match(/\u200B/g)
test(function() {
assert_equals(matches.length, 1);
}, "zwsp retained 3");
test(function() {
assert_equals(document.getElementById('test4').firstChild.offsetWidth, document.getElementById('ref').firstChild.offsetWidth);
}, "spaces linebreak spaces");
var matches = document.getElementById('test4').firstChild.textContent.match(/\u200B/g)
test(function() {
assert_equals(matches.length, 1);
}, "zwsp retained 4");
test(function() {
assert_equals(document.getElementById('test5').firstChild.offsetWidth, document.getElementById('ref').firstChild.offsetWidth);
}, "multiple linebreaks");
var matches = document.getElementById('test5').firstChild.textContent.match(/\u200B/g)
test(function() {
assert_equals(matches.length, 1);
}, "zwsp retained 5");
test(function() {
assert_equals(document.getElementById('test6').firstChild.offsetWidth, document.getElementById('ref').firstChild.offsetWidth);
}, "multiple linebreaks + spaces");
var matches = document.getElementById('test6').firstChild.textContent.match(/\u200B/g)
test(function() {
assert_equals(matches.length, 1);
}, "zwsp retained 6");
</script>
<!-- Notes:
The assertion will fail if space is produced for any line in the test paragraph.
-->

</body></html>
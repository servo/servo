<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
        <title>Shape Outside Inset round args - calc() values</title>
        <link href="http://html.adobe.com/" rel="author" title="Adobe" />
        <link href="mailto:rhauck@adobe.com" rel="author" title="Rebecca Hauck" />
        <link href="mailto:stearns@adobe.com" rel="reviewer" title="Alan Stearns" /> <!-- 2014-03-04 -->
        <link href="http://www.w3.org/TR/css-shapes-1/#funcdef-inset" rel="help" />
        <link href="http://www.w3.org/TR/css-shapes-1/#shape-outside-property" rel="help" />
        <link href="http://www.w3.org/TR/css3-values/#calc-notation" rel="help" />
        <meta content="An inset's radial component arguments may be in calc() values." name="assert" />
        <meta content="dom" name="flags" />
        <script src="/resources/testharness.js"></script>
        <script src="/resources/testharnessreport.js"></script>
        <script src="support/parsing-utils.js"></script>
    </head>
    <body>
        <div id="log"></div>
        <script type="text/javascript">
            var fullInset = '10px 10px 10px 10px';
            var serializedInset = "10px";

            var inset_round_calc_tests = [];
            ParsingUtils.calcTestValues.forEach(function(value) {
                testCase = ['inset('+ fullInset +' round '+ value[0] +')',
                            'inset('+ serializedInset +' round '+ value[1] +')'];
                // array check
                if(Object.prototype.toString.call( value[2] ) === '[object Array]' &amp;&amp; value[2].length == 2) {
                    testCase.push([
                                    'inset('+ serializedInset +' round '+ value[2][0] +')',
                                    'inset('+ serializedInset +' round '+ value[2][1] +')'
                                 ]);
                } else {
                    testCase.push('inset('+ serializedInset +' round '+ value[2] +')');
                }
                inset_round_calc_tests.push(testCase);
            });
            ParsingUtils.calcTestValues.forEach(function(value) {
                testCase = ['inset('+ fullInset +' round '+ value[0] +' '+  value[0] +')',
                            'inset('+ serializedInset +' round '+ value[1] +')'];
                if(Object.prototype.toString.call( value[2] ) === '[object Array]' &amp;&amp; value[2].length == 2) {
                    testCase.push([
                                    'inset('+ serializedInset +' round '+ value[2][0] +')',
                                    'inset('+ serializedInset +' round '+ value[2][1] +')'
                                 ]);
                } else {
                    testCase.push('inset('+ serializedInset +' round '+ value[2] +')');
                }
                inset_round_calc_tests.push(testCase);
            });
            generate_tests(ParsingUtils.testInlineStyle, ParsingUtils.buildCalcTests(inset_round_calc_tests, 'inline'));
            generate_tests(ParsingUtils.testComputedStyle, ParsingUtils.buildCalcTests(inset_round_calc_tests, 'computed'));
        </script>
    

</body></html>
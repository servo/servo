<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
        <meta charset="utf-8" />
        <title>CSS Transitions Test: Transitioning before load event</title>
        <meta content="Test checks that transitions are run even before all assets are loaded" name="assert" />
        <link href="http://www.w3.org/TR/css3-transitions/#transition-events" rel="help" title="5. Transition Events" />
        <link href="http://rodneyrehm.de/en/" rel="author" title="Rodney Rehm" />
        <meta content="dom" name="flags" />

        <script src="/resources/testharness.js" type="text/javascript"></script>
        <script src="/resources/testharnessreport.js" type="text/javascript"></script>

        <script src="./support/vendorPrefix.js" type="text/javascript"></script>
        <script src="./support/helper.js" type="text/javascript"></script>
        <script src="./support/runParallelAsyncHarness.js" type="text/javascript"></script>
        <script src="./support/generalParallelTest.js" type="text/javascript"></script>
        <script src="./support/properties.js" type="text/javascript"></script>

        <style type="text/css">
            #offscreen {
                position: absolute;
                top: -100000px;
                left: -100000px;
                width: 100000px;
                height: 100000px;
            }
        </style>

        <script id="metadata_cache">/*
        {
          "transition height from 10px to 100px / values": {},
          "transition height from 10px to 100px / events": {}
        }
        */</script>
    </head>
    <body>
        <!-- required by testharnessreport.js -->
        <div id="log"></div>
        <!-- elements used for testing -->
        <div class="fixture" id="fixture">
            <div class="container">
                <div class="transition">Text sample</div>
            </div>
        </div>
        <div id="offs-creen"></div>

        <!--
            SEE ./support/README.md for an abstract explanation of the test procedure
            http://test.csswg.org/source/contributors/rodneyrehm/submitted/css3-transitions/README.md
        -->

        <script>
            // make sure a transition is run between DOMContentLoaded and load

            // this test takes its time, give it a minute to run
            var timeout = 60000;
            setup({timeout: timeout});

            var isLoad = false;
            window.addEventListener('load', function() {
                isLoad = true;
            }, false);

            window.addEventListener('DOMContentLoaded', function() {
                var tests = [
                    {
                        name: "transition height from 10px to 100px",
                        property: 'height',
                        flags: {},
                        from: {'height': '10px'},
                        to: {'height': '100px'}
                    }
                ];

                // general transition-duration
                var duration = '0.5s';

                runParallelAsyncHarness({
                    // array of test data
                    tests: tests,
                    // the number of tests to run in parallel
                    testsPerSlice: 1,
                    // milliseconds to wait before calling teardown and ending test
                    duration: parseFloat(duration) * 1000,
                    // the global suite timeout
                    timeout: timeout,
                    // prepare individual test
                    setup: function(data, options) {
                        var styles = {
                            '.fixture': {},

                            '.container': data.parentStyle,
                            '.container.to': {},
                            '.container.how': {},

                            '.transition': data.from,
                            '.transition.to' : data.to,
                            '.transition.how' : {transition: 'all ' + duration + ' linear 0s'}
                        };

                        generalParallelTest.setup(data, options);
                        generalParallelTest.addStyles(data, options, styles);
                    },
                    // cleanup after individual test
                    teardown: generalParallelTest.teardown,
                    // invoked prior to running a slice of tests
                    sliceStart: function(options, tests) {
                        // inject styles into document
                        setStyle(options.styles);
                    },
                    // invoked after running a slice of tests
                    sliceDone: generalParallelTest.sliceDone,
                    // test cases, make them as granular as possible
                    cases: {
                        // test property values while transitioning
                        // values.start kicks off a transition
                        'values': {
                            // run actual test, assertions can be used here!
                            start: function(test, data, options) {
                                // identify initial and target values
                                generalParallelTest.getStyle(data);
                                // make sure values differ, if they don't, the property could most likely not be parsed
                                assert_not_equals(data.transition.from, data.transition.to, "initial and target values may not match");
                                // kick off the transition
                                generalParallelTest.startTransition(data);

                                // make sure we didn't get the target value immediately.
                                // If we did, there wouldn't be a transition!
                                var current = data.transition.computedStyle(data.property);
                                assert_not_equals(current, data.transition.to, "must not be target value after start");
                            },
                            done: function(test, data, options) {
                                // make sure the property's value were neither initial nor target while transitioning
                                test.step(generalParallelTest.assertIntermediateValuesFunc(data, 'transition'));
                            }
                        },
                        // test TransitionEnd events
                        'events': {
                            done: function(test, data, options) {
                                // make sure there were no events on parent
                                test.step(generalParallelTest.assertExpectedEventsFunc(data, 'container', ""));
                                // make sure we got the event for the tested property only
                                test.step(generalParallelTest.assertExpectedEventsFunc(data, 'transition', addVendorPrefix(data.property) + ":" + duration));

                                test.step(function() {
                                    assert_false(isLoad, "load may not have happened yet")
                                });
                            }
                        }
                    },
                    // called once all tests are done
                    done: generalParallelTest.done
                });
            }, false);
        </script>
        <img src="/delay/?type=gif&amp;delay=3000" alt="dummy image" />
    

</body></html>
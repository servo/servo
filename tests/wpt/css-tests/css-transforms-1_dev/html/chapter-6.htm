

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
 <head>
  <title>The Transform Rendering Model - CSS Transforms Module Level 1 CR Test Suite</title>
  <style type="text/css">
    @import "http://www.w3.org/StyleSheets/TR/base.css";
    @import "../indices.css";
  </style>
 </head>

 <body>

  <h1>CSS Transforms Module Level 1 CR Test Suite</h1>
  <h2>The Transform Rendering Model (48 tests)</h2>
  <table width="100%">
    <col id="test-column">
    <col id="refs-column">
    <col id="flags-column">
    <col id="info-column">
    <thead>
      <tr>
        <th>Test</th>
        <th><abbr title="Rendering References">Refs</abbr></th>
        <th>Flags</th>
        <th>Info</th>
      </tr>
    </thead>
    <tbody id="s6">
      <tr><th colspan="4" scope="rowgroup">
        <a href="#s6">+</a>
        <a href="http://www.w3.org/TR/css-transforms-1/#transform-rendering">6 The Transform Rendering Model</a></th></tr>
      <!-- 32 tests -->
      <tr id="css-transforms-3d-on-anonymous-block-001-6" class="primary">
        <td><strong>
            <a href="css-transforms-3d-on-anonymous-block-001.htm">css-transforms-3d-on-anonymous-block-001</a></strong></td>
        <td><a href="reference/css-transforms-3d-anonymous-block-ref.htm">=</a> </td>
        <td></td>
        <td>No 3D transforms on anonymous block boxes
          <ul class="assert">
            <li>3D transforms can not be applied to anonymous block boxes.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-abspos-001-6" class="primary">
        <td><strong>
            <a href="transform-abspos-001.htm">transform-abspos-001</a></strong></td>
        <td><a href="reference/transform-abspos-ref.htm">=</a> </td>
        <td></td>
        <td>Containing Block for Absolute Positioning (left/top)
          <ul class="assert">
            <li>&quot;In the HTML namespace, any value other than 'none' for the transform results in the creation of . . . a containing block.&quot; This means absolutely positioned elements need to be rooted at a transformed ancestor, just as though it had non-static position.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-abspos-002-6" class="primary">
        <td><strong>
            <a href="transform-abspos-002.htm">transform-abspos-002</a></strong></td>
        <td><a href="reference/transform-abspos-ref.htm">=</a> </td>
        <td></td>
        <td>Containing Block for Fixed Positioning (left/top offsets)
          <ul class="assert">
            <li>&quot;In the HTML namespace, any value other than 'none' for the transform results in the creation of . . . a containing block. The object acts as a containing block for fixed positioned descendants.&quot; This means fixed-position elements need to be rooted at a transformed ancestor, rather than the viewport.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-abspos-003-6" class="primary">
        <td><strong>
            <a href="transform-abspos-003.htm">transform-abspos-003</a></strong></td>
        <td><a href="reference/transform-abspos-ref.htm">=</a> </td>
        <td></td>
        <td>Containing Block for Fixed Positioning (right/bottom offsets)
          <ul class="assert">
            <li>&quot;In the HTML namespace, any value other than 'none' for the transform results in the creation of . . . a containing block. The object acts as a containing block for fixed positioned descendants.&quot; This means fixed-position elements need to be rooted at a transformed ancestor, rather than the viewport. (This test differs from the previous in that it uses right/bottom properties for positioning instead of left/top.)</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-abspos-004-6" class="primary">
        <td><strong>
            <a href="transform-abspos-004.htm">transform-abspos-004</a></strong></td>
        <td><a href="reference/transform-abspos-ref.htm">=</a> </td>
        <td></td>
        <td>Containing Block for Absolute Positioning (bottom/right)
          <ul class="assert">
            <li>&quot;In the HTML namespace, any value other than 'none' for the transform results in the creation of . . . a containing block.&quot; This means absolutely positioned elements need to be rooted at a transformed ancestor, just as though it had non-static position. This test differs from transform-abspos-001.html in that it uses the right/bottom properties for positioning instead of top/left.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-abspos-005-6" class="primary">
        <td><strong>
            <a href="transform-abspos-005.htm">transform-abspos-005</a></strong></td>
        <td><a href="reference/transform-abspos-ref.htm">&#x2260;</a> </td>
        <td></td>
        <td>Containing Block for Absolute Positioning (bottom/right)
          <ul class="assert">
            <li>&quot;In the HTML namespace, any value other than 'none' for the transform results in the creation of . . . a containing block.&quot; This means absolutely positioned elements need to be rooted at a transformed ancestor, just as though it had non-static position. Therefore, this test should be offset by one pixel from the reference.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-abspos-006-6" class="primary">
        <td><strong>
            <a href="transform-abspos-006.htm">transform-abspos-006</a></strong></td>
        <td><a href="reference/transform-abspos-ref.htm">=</a> </td>
        <td></td>
        <td>Containing Block for Absolute Positioning (table)
          <ul class="assert">
            <li>&quot;In the HTML namespace, any value other than 'none' for the transform results in the creation of . . . a containing block.&quot; This means absolutely positioned elements need to be rooted at a transformed ancestor, just as though it had non-static position. This test differs from transform-abspos-001.html in that the outer div is a table, which might cause buggy rendering engines to treat it differently.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-abspos-007-6" class="primary">
        <td><strong>
            <a href="transform-abspos-007.htm">transform-abspos-007</a></strong></td>
        <td><a href="reference/transform-abspos-ref.htm">=</a> </td>
        <td></td>
        <td>Containing Block for Fixed Positioning (inline-table)
          <ul class="assert">
            <li>&quot;In the HTML namespace, any value other than 'none' for the transform results in the creation of . . . a containing block. The object acts as a containing block for fixed positioned descendants.&quot; This means fixed-position elements need to be rooted at a transformed ancestor, rather than the viewport. This test differs from transform-abspos-002.html in that the outer div has display: inline-table, which might cause it to render differently in buggy UAs.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-background-007-6" class="primary svg">
        <td><strong>
            <a href="transform-background-007.htm">transform-background-007</a></strong></td>
        <td><a href="reference/transform-background-ref-2.htm">=</a> </td>
        <td><abbr class="svg" title="Requires SVG support">SVG</abbr></td>
        <td>Transform of Background Image (propagated body with root element transform)
          <ul class="assert">
            <li>&quot;If the root element is transformed, the transformation applies to the entire canvas, including any background specified for the root element. Since the background painting area for the root element is the entire canvas, which is infinite, the transformation might cause parts of the background that were originally off-screen to appear. For example, if the root element's background were repeating dots, and a transformation of 'scale(0.5)' were specified on the root element, the dots would shrink to half their size, but there will be twice as many, so they still cover the whole viewport.&quot; In this case, the background is specified on the body but propagates to the root element. The transform is on the root element, so it needs to affect the background. The rotation 90 degrees clockwise means that most of the screen will be filled with triangles that were originally above the top of the viewport; the original top row of triangles will now be on the left.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-background-008-6" class="primary svg">
        <td><strong>
            <a href="transform-background-008.htm">transform-background-008</a></strong></td>
        <td><a href="reference/transform-background-ref-2.htm">=</a> </td>
        <td><abbr class="svg" title="Requires SVG support">SVG</abbr></td>
        <td>Transform of Background Image (root element background and transform)
          <ul class="assert">
            <li>This is exactly the same as transform-background-007.html, except that the background is specified directly on the root element instead of being specified on the body and propagating to the root.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-compound-001-6" class="primary">
        <td><strong>
            <a href="transform-compound-001.htm">transform-compound-001</a></strong></td>
        <td><a href="reference/transform-compound-ref.htm">=</a> <a href="reference/transform-compound-notref-1.htm">&#x2260;</a> <a href="reference/transform-compound-notref-2.htm">&#x2260;</a> </td>
        <td></td>
        <td>Compound Transforms
          <ul class="assert">
            <li>Tests that applying multiple transforms to an element is the same as applying the transforms in the same order to nested elements.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-descendant-001-6" class="primary">
        <td><strong>
            <a href="transform-descendant-001.htm">transform-descendant-001</a></strong></td>
        <td><a href="reference/transform-descendant-ref.htm">=</a> </td>
        <td></td>
        <td>Transform Affects Descendant
          <ul class="assert">
            <li>This just tests that a transform on a container div moves its contents, not just the div itself.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-fixed-bg-001-6" class="primary svg">
        <td><strong>
            <a href="transform-fixed-bg-001.htm">transform-fixed-bg-001</a></strong></td>
        <td><a href="reference/transform-fixed-bg-ref.htm">=</a> </td>
        <td><abbr class="svg" title="Requires SVG support">SVG</abbr></td>
        <td>Fixed Background
          <ul class="assert">
            <li>&quot;Fixed backgrounds are affected by any transform specified for the root element, and not by any other transforms.&quot; Thus if we have a div that's 100px square aligned at the top left of the page, giving it a fixed background and translating it 50px down and right should be the same as giving it a non-fixed background that's translated 50px down and right.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-fixed-bg-002-6" class="primary dom svg">
        <td><strong>
            <a href="transform-fixed-bg-002.htm">transform-fixed-bg-002</a></strong></td>
        <td><a href="reference/transform-fixed-bg-ref.htm">=</a> </td>
        <td><abbr class="dom" title="Requires Document Object Model support">DOM/JS</abbr><abbr class="svg" title="Requires SVG support">SVG</abbr></td>
        <td>Fixed Background (with scrolling)
          <ul class="assert">
            <li>&quot;Fixed backgrounds are affected by any transform specified for the root element, and not by any other transforms.&quot; Here we translate the div 150px down instead of 50px, and also scroll down 100px. This should be the same as the previous test because the background image is 100px square.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-fixed-bg-003-6" class="primary svg">
        <td><strong>
            <a href="transform-fixed-bg-003.htm">transform-fixed-bg-003</a></strong></td>
        <td><a href="reference/transform-fixed-bg-ref.htm">=</a> </td>
        <td><abbr class="svg" title="Requires SVG support">SVG</abbr></td>
        <td>Fixed Background (with rotation)
          <ul class="assert">
            <li>This is the same as transform-fixed-bg-001, except that we also test that a rotation on a non-root element doesn't affect fixed backgrounds.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-fixed-bg-004-6" class="primary dom svg">
        <td><strong>
            <a href="transform-fixed-bg-004.htm">transform-fixed-bg-004</a></strong></td>
        <td><a href="reference/transform-fixed-bg-ref.htm">=</a> </td>
        <td><abbr class="dom" title="Requires Document Object Model support">DOM/JS</abbr><abbr class="svg" title="Requires SVG support">SVG</abbr></td>
        <td>Fixed Background (with rotation and scrolling)
          <ul class="assert">
            <li>This is the same as transform-fixed-bg-002, except that we also test that a rotation on a non-root element doesn't affect fixed backgrounds.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-fixed-bg-005-6" class="primary svg">
        <td><strong>
            <a href="transform-fixed-bg-005.htm">transform-fixed-bg-005</a></strong></td>
        <td><a href="reference/transform-fixed-bg-ref.htm">=</a> </td>
        <td><abbr class="svg" title="Requires SVG support">SVG</abbr></td>
        <td>Fixed Background (no-op transform)
          <ul class="assert">
            <li>This affects that adding a no-op transform to an element with a fixed background doesn't affect rendering.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-fixed-bg-006-6" class="primary svg">
        <td><strong>
            <a href="transform-fixed-bg-006.htm">transform-fixed-bg-006</a></strong></td>
        <td><a href="reference/transform-fixed-bg-ref.htm">=</a> </td>
        <td><abbr class="svg" title="Requires SVG support">SVG</abbr></td>
        <td>Fixed Background (transform of intermediate)
          <ul class="assert">
            <li>This tests that adding a rotation to a non-root element doesn't affect rendering of fixed backgrounds on its descendants.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-fixed-bg-007-6" class="primary svg">
        <td><strong>
            <a href="transform-fixed-bg-007.htm">transform-fixed-bg-007</a></strong></td>
        <td><a href="reference/transform-fixed-bg-ref.htm">=</a> </td>
        <td><abbr class="svg" title="Requires SVG support">SVG</abbr></td>
        <td>Fixed Background (transform on root)
          <ul class="assert">
            <li>This tests that a transform on the root element *does* affect the rendering of fixed backgrounds on its descendants.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-generated-001-6" class="primary">
        <td><strong>
            <a href="transform-generated-001.htm">transform-generated-001</a></strong></td>
        <td><a href="reference/transform-generated-001-ref.htm">=</a> <a href="reference/transform-generated-001-notref.htm">&#x2260;</a> </td>
        <td></td>
        <td>Generated Content (block)
          <ul class="assert">
            <li>Transforms need to work on boxes of generated content just as on any other boxes. This file tests a generated block box.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-generated-002-6" class="primary">
        <td><strong>
            <a href="transform-generated-002.htm">transform-generated-002</a></strong></td>
        <td><a href="reference/transform-generated-002-ref.htm">=</a> <a href="reference/transform-generated-002-notref.htm">&#x2260;</a> </td>
        <td></td>
        <td>Generated Content (inline)
          <ul class="assert">
            <li>Transforms need to work on boxes of generated content just as on any other boxes. This file tests a generated inline box.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-iframe-001-6" class="primary">
        <td><strong>
            <a href="transform-iframe-001.htm">transform-iframe-001</a></strong></td>
        <td><a href="reference/transform-iframe-ref.htm">=</a> </td>
        <td></td>
        <td>Iframe
          <ul class="assert">
            <li>This test ensures that transforms cannot move the contents of an iframe onto the parent page. The iframe here contains a red box shifted 500px down and to the right, outside the iframe's visible area. overflow: hidden ensures that scrollbars are not tested.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-overflow-001-6" class="primary">
        <td><strong>
            <a href="transform-overflow-001.htm">transform-overflow-001</a></strong></td>
        <td><a href="reference/transform-overflow-001-ref.htm">=</a> </td>
        <td></td>
        <td>overflow: auto
          <ul class="assert">
            <li>&quot;. . . if the value of the 'overflow' property is 'scroll' or 'auto', scrollbars will appear as needed to see content that is transformed outside the visible area.&quot; This tests that the effect of overflow: auto for a translation is the same as for an equivalent relative positioning.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-overflow-002-6" class="primary">
        <td><strong>
            <a href="transform-overflow-002.htm">transform-overflow-002</a></strong></td>
        <td><a href="reference/transform-overflow-002-ref.htm">=</a> </td>
        <td></td>
        <td>overflow: scroll
          <ul class="assert">
            <li>&quot;. . . if the value of the 'overflow' property is 'scroll' or 'auto', scrollbars will appear as needed to see content that is transformed outside the visible area.&quot; This tests that the effect of overflow: scroll for a translation is the same as for an equivalent relative positioning.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-root-bg-001-6" class="primary">
        <td><strong>
            <a href="transform-root-bg-001.htm">transform-root-bg-001</a></strong></td>
        <td><a href="reference/transform-root-bg-001-ref.htm">=</a> </td>
        <td></td>
        <td>scale(-1) on Root Element With Background
          <ul class="assert">
            <li>The background here extends to the whole canvas, and a transform on the root element must transform the whole canvas, background included. Thus the entire tiled background of left-pointing triangles needs to be rotated 180 degrees (same as scale(-1)) around the top center of the viewport, which is the default transform-origin of 50% 50% in this case. An implementation that doesn't draw the background on parts of the canvas outside the viewport might incorrectly display nothing, because the part of the background that's supposed to be rotated into view was initially above the visible part of the canvas.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-root-bg-002-6" class="primary">
        <td><strong>
            <a href="transform-root-bg-002.htm">transform-root-bg-002</a></strong></td>
        <td><a href="reference/transform-root-bg-001-ref.htm">=</a> </td>
        <td></td>
        <td>scale(-1) on Root Element With Background On Body
          <ul class="assert">
            <li>Identical to transform-root-bg-001.html, except that the background property is put on the body rather than the root element. This should make no difference, because the body's background propagates up to the canvas if there's no root element background.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-root-bg-003-6" class="primary">
        <td><strong>
            <a href="transform-root-bg-003.htm">transform-root-bg-003</a></strong></td>
        <td><a href="reference/transform-root-bg-003-ref.htm">=</a> </td>
        <td></td>
        <td>scale(0.5) on Root Element With Background
          <ul class="assert">
            <li>This is the same as transform-root-bg-001.html, except that it uses scale(0.5) instead of scale(-1). It also specifies a transform-origin, because the default of 50% 50% wouldn't work well with the way the reference image is constructed.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-root-bg-004-6" class="primary">
        <td><strong>
            <a href="transform-root-bg-004.htm">transform-root-bg-004</a></strong></td>
        <td><a href="reference/transform-root-bg-004-ref.htm">=</a> </td>
        <td></td>
        <td>scale(-1) On Body With Background
          <ul class="assert">
            <li>This is like transform-root-bg-002.html, except that the transform is specified on the body element, not just the background. The background gets lifted to the root element, but the transform does not, so the transform has no effect.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-stacking-001-6" class="primary">
        <td><strong>
            <a href="transform-stacking-001.htm">transform-stacking-001</a></strong></td>
        <td><a href="reference/transform-lime-square-ref.htm">=</a> </td>
        <td></td>
        <td>Stacking, transform: scale(1)
          <ul class="assert">
            <li>This tests that specifying the identity transform on an element still causes it to create a new stacking context (unlike transform: none).</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-stacking-002-6" class="primary">
        <td><strong>
            <a href="transform-stacking-002.htm">transform-stacking-002</a></strong></td>
        <td><a href="reference/transform-lime-square-ref.htm">=</a> </td>
        <td></td>
        <td>Stacking, transform: none
          <ul class="assert">
            <li>This tests that &quot;transform: none&quot; does not create a new stacking context -- it should have no effect at all.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-stacking-003-6" class="primary">
        <td><strong>
            <a href="transform-stacking-003.htm">transform-stacking-003</a></strong></td>
        <td><a href="reference/transform-lime-square-ref.htm">=</a> </td>
        <td></td>
        <td>Stacking, invalid transform value
          <ul class="assert">
            <li>This tests that specifying the transform property with an invalid value does not create a new stacking context -- it should have no effect at all, same as &quot;transform: none&quot;.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-stacking-004-6" class="primary">
        <td><strong>
            <a href="transform-stacking-004.htm">transform-stacking-004</a></strong></td>
        <td><a href="reference/transform-lime-square-ref.htm">=</a> </td>
        <td></td>
        <td>Stacking, inherited transform: none
          <ul class="assert">
            <li>This tests that specifying &quot;transform: inherit&quot; (when the parent has no transform) does not create a new stacking context -- it should have no effect at all, same as &quot;transform: none&quot;.</li>
          </ul>
        </td>
      </tr>
    </tbody>
    <tbody id="s6.#issue-ca2c412c">
      <!-- 0 tests -->
    </tbody>
    <tbody id="s6.#transformation-matrix-computation">
      <!-- 0 tests -->
    </tbody>
    <tbody id="s6.1">
      <tr><th colspan="4" scope="rowgroup">
        <a href="#s6.1">+</a>
        <a href="http://www.w3.org/TR/css-transforms-1/#3d-transform-rendering">6.1 3D Transform Rendering</a></th></tr>
      <!-- 17 tests -->
      <tr id="css-transforms-3d-on-anonymous-block-001-6.1" class="">
        <td>
            <a href="css-transforms-3d-on-anonymous-block-001.htm">css-transforms-3d-on-anonymous-block-001</a></td>
        <td><a href="reference/css-transforms-3d-anonymous-block-ref.htm">=</a> </td>
        <td></td>
        <td>No 3D transforms on anonymous block boxes
          <ul class="assert">
            <li>3D transforms can not be applied to anonymous block boxes.</li>
          </ul>
        </td>
      </tr>
      <tr id="rotate_45deg-6.1" class="primary">
        <td><strong>
            <a href="rotate_45deg.htm">rotate_45deg</a></strong></td>
        <td><a href="reference/rotate_45deg-ref.htm">=</a> </td>
        <td></td>
        <td>rotateY with perspective produces a trapezoid
          <ul class="assert">
            <li>Rotate 45 degree in y axis</li>
          </ul>
        </td>
      </tr>
      <tr id="rotate_x_45deg-6.1" class="primary">
        <td><strong>
            <a href="rotate_x_45deg.htm">rotate_x_45deg</a></strong></td>
        <td><a href="reference/rotate_x_45deg-ref.htm">=</a> </td>
        <td></td>
        <td>rotateX with perspective produces a trapezoid
          <ul class="assert">
            <li>Rotate 45 degree in y axis</li>
          </ul>
        </td>
      </tr>
      <tr id="rotate_y_45deg-6.1" class="primary">
        <td><strong>
            <a href="rotate_y_45deg.htm">rotate_y_45deg</a></strong></td>
        <td><a href="reference/rotate_y_45deg-ref.htm">=</a> </td>
        <td></td>
        <td>rotateY with perspective produces a trapezoid
          <ul class="assert">
            <li>Rotate 45 degree in y axis</li>
          </ul>
        </td>
      </tr>
      <tr id="scalex-6.1" class="primary">
        <td><strong>
            <a href="scalex.htm">scalex</a></strong></td>
        <td><a href="reference/scalex-ref.htm">=</a> </td>
        <td></td>
        <td>test scale x
          <ul class="assert">
            <li>scale x 2</li>
          </ul>
        </td>
      </tr>
      <tr id="scaley-6.1" class="primary">
        <td><strong>
            <a href="scaley.htm">scaley</a></strong></td>
        <td><a href="reference/scaley-ref.htm">=</a> </td>
        <td></td>
        <td>test scale y
          <ul class="assert">
            <li>scale y 2</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-3d-rotatey-stair-above-001-6.1" class="primary">
        <td><strong>
            <a href="transform-3d-rotateY-stair-above-001.htm">transform-3d-rotatey-stair-above-001</a></strong></td>
        <td><a href="reference/transform-3d-rotateY-stair-above-ref-001.htm">=</a> </td>
        <td></td>
        <td>rotateY with perspective produces a trapezoid
          <ul class="assert">
            <li>A rotateY transform with perspective should result in a trapezoid.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-3d-rotatey-stair-below-001-6.1" class="primary">
        <td><strong>
            <a href="transform-3d-rotateY-stair-below-001.htm">transform-3d-rotatey-stair-below-001</a></strong></td>
        <td><a href="reference/transform-3d-rotateY-stair-above-ref-001.htm">=</a> </td>
        <td></td>
        <td>rotateY with perspective produces a trapezoid
          <ul class="assert">
            <li>A rotateY transform with perspective should result in a trapezoid.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-sorting-001-6.1" class="">
        <td>
            <a href="transform3d-sorting-001.htm">transform3d-sorting-001</a></td>
        <td><a href="reference/transform-lime-square-ref.htm">=</a> </td>
        <td></td>
        <td>Simple Sorting
          <ul class="assert">
            <li>The red box here is translated in the negative Z-direction, so it should render beneath the lime box even though it comes later in DOM order.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-sorting-002-6.1" class="">
        <td>
            <a href="transform3d-sorting-002.htm">transform3d-sorting-002</a></td>
        <td><a href="reference/transform-lime-square-ref.htm">=</a> </td>
        <td></td>
        <td>Simple Sorting With Rotation
          <ul class="assert">
            <li>The red box here is translated to the same extent as the lime box, so they should render in stacking context order: the lime box is on top, because it's later in the DOM. But then we apply rotatex(180deg) to the whole thing, so the lime box should wind up on top in the end.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-sorting-003-6.1" class="">
        <td>
            <a href="transform3d-sorting-003.htm">transform3d-sorting-003</a></td>
        <td><a href="reference/transform-lime-square-ref.htm">=</a> </td>
        <td></td>
        <td>Simple Sorting With No Preserve-3D
          <ul class="assert">
            <li>The red box here is translated to above the lime box, but they aren't in the same 3D rendering context, so they should be drawn in DOM order regardless: lime box on top.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-sorting-004-6.1" class="">
        <td>
            <a href="transform3d-sorting-004.htm">transform3d-sorting-004</a></td>
        <td><a href="reference/transform-lime-square-ref.htm">=</a> </td>
        <td></td>
        <td>Simple Sorting With Preserve-3D on Grandparent
          <ul class="assert">
            <li>This is the same as transform3d-sorting-003.html, except with two wrapper divs. 'transform-style: preserve-3d' only affects children, not grandchildren, so the two divs with backgrounds are still in different rendering contexts and the Z-position should still not affect stacking.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-sorting-005-6.1" class="">
        <td>
            <a href="transform3d-sorting-005.htm">transform3d-sorting-005</a></td>
        <td><a href="reference/transform-lime-square-ref.htm">=</a> </td>
        <td></td>
        <td>Sorting With Background on Parent
          <ul class="assert">
            <li>This tests that if a parent has 'transform-style: preserve-3d', it's in the same rendering context as its children. Thus the translateZ(10px) puts the child above it, and the rotateX(180deg) puts it below, so the lime parent is rendered on top.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-sorting-006-6.1" class="">
        <td>
            <a href="transform3d-sorting-006.htm">transform3d-sorting-006</a></td>
        <td><a href="reference/transform3d-sorting-006-ref.htm">=</a> </td>
        <td></td>
        <td>Sorting With Intersection
          <ul class="assert">
            <li>This tests that when two boxes intersect in a simple fashion, they're rendered according to Newell's algorithm.</li>
          </ul>
        </td>
      </tr>
      <tr id="translate-6.1" class="primary">
        <td><strong>
            <a href="translate.htm">translate</a></strong></td>
        <td><a href="reference/translate-ref.htm">=</a> </td>
        <td></td>
        <td>test translate
          <ul class="assert">
            <li>translate x, y</li>
          </ul>
        </td>
      </tr>
      <tr id="ttwf-css-3d-polygon-cycle-6.1" class="primary svg">
        <td><strong>
            <a href="ttwf-css-3d-polygon-cycle.htm">ttwf-css-3d-polygon-cycle</a></strong></td>
        <td><a href="reference/ttwf-css-3d-polygon-cycle-ref.htm">=</a> </td>
        <td><abbr class="svg" title="Requires SVG support">SVG</abbr></td>
        <td>3d transform polygon cycle
          <ul class="assert">
            <li>The red, green and blue rectangles are forming a cycle, which should be detected and rendered using Newell Algorithm's.</li>
          </ul>
        </td>
      </tr>
      <tr id="ttwf-css-3d-polygon-cycle-mismatch-6.1" class="primary svg">
        <td><strong>
            <a href="ttwf-css-3d-polygon-cycle-mismatch.htm">ttwf-css-3d-polygon-cycle-mismatch</a></strong></td>
        <td><a href="reference/ttwf-css-3d-polygon-cycle-ref.htm">=</a> </td>
        <td><abbr class="svg" title="Requires SVG support">SVG</abbr></td>
        <td>3d transform polygon cycle
          <ul class="assert">
            <li>The red, green and blue rectangles are forming a cycle, which should be detected and rendered using Newell Algorithm's.</li>
          </ul>
        </td>
      </tr>
    </tbody>
    <tbody id="s6.1.#accumulated-3d-transformation-matrix-computation">
      <!-- 0 tests -->
    </tbody>
    <tbody id="s6.1.#issue-34d952cb">
      <!-- 0 tests -->
    </tbody>
    <tbody id="s6.1.#issue-878a3175">
      <!-- 0 tests -->
    </tbody>
    <tbody id="s6.1.#perspective-matrix-computation">
      <!-- 0 tests -->
    </tbody>
    <tbody id="s6.2">
      <tr><th colspan="4" scope="rowgroup">
        <a href="#s6.2">+</a>
        <a href="http://www.w3.org/TR/css-transforms-1/#processing-of-perspective-transformed-boxes">6.2 Processing of Perspective-Transformed Boxes</a></th></tr>
      <!-- 0 tests -->
    </tbody>
    <tbody id="s6.2.#issue-44e00fb5">
      <!-- 0 tests -->
    </tbody>
    <tbody id="s6.2.#issue-6b4d59fb">
      <!-- 0 tests -->
    </tbody>
  </table>

 </body>
</html>
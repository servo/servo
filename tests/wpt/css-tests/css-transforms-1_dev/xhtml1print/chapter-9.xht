

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <title>The transform-style Property - CSS Transforms Module Level 1 CR Test Suite</title>
  <style type="text/css">
    @import "http://www.w3.org/StyleSheets/TR/base.css";
    @import "../indices.css";
  </style>
 </head>

 <body>

  <h1>CSS Transforms Module Level 1 CR Test Suite</h1>
  <h2>The transform-style Property (26 tests)</h2>
  <table width="100%">
    <col id="test-column"></col>
    <col id="refs-column"></col>
    <col id="flags-column"></col>
    <col id="info-column"></col>
    <thead>
      <tr>
        <th>Test</th>
        <th><abbr title="Rendering References">Refs</abbr></th>
        <th>Flags</th>
        <th>Info</th>
      </tr>
    </thead>
    <tbody id="s9">
      <tr><th colspan="4" scope="rowgroup">
        <a href="#s9">+</a>
        <a href="https://www.w3.org/TR/css-transforms-1/#transform-style-property">9 The transform-style Property</a></th></tr>
      <!-- 26 tests -->
      <tr id="css-transform-3d-transform-style-9" class="">
        <td>
            <a href="css-transform-3d-transform-style.xht">css-transform-3d-transform-style</a></td>
        <td><a href="reference/css-transform-3d-transform-style-ref.xht">=</a> </td>
        <td></td>
        <td>rotateY with transform-style on nested elements
          <ul class="assert">
            <li>Test checks that rotate the nested div with transform-style preserve-3d, rotated parent div for -60 degree on Y-axis then and rotated child div for 120 degree, at this time the parent and child should have equal width, then child div could cover the red box.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-table-006-9" class="">
        <td>
            <a href="transform-table-006.xht">transform-table-006</a></td>
        <td><a href="reference/transform-blank-ref.xht">=</a> </td>
        <td></td>
        <td>Table Without Preserve-3D 1
          <ul class="assert">
            <li>This has preserve-3d applied to the outer wrapper of a table, but not the inner wrapper containing its contents. Therefore, the contents should be rotated 90 degrees and vanish, and the 90-degree rotation on the outer wrapper shouldn't restore them. An implementation that incorrectly propagated preserve-3d to table descendants might cause the text to appear, but mirrored.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-table-007-9" class="">
        <td>
            <a href="transform-table-007.xht">transform-table-007</a></td>
        <td><a href="reference/transform-blank-ref.xht">=</a> </td>
        <td></td>
        <td>Table Without Preserve-3D 2
          <ul class="assert">
            <li>In this case, preserve-3d is applied to every element that's explicitly specified in the source code. However, the HTML parser will insert an extra &lt;tbody&gt; element around the &lt;tr&gt;, which will not have preserve-3d specified, so the contents should again vainsh. An implementation that incorrectly propagated preserve-3d to table descendants might cause the text to appear, but mirrored.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-table-008-9" class="">
        <td>
            <a href="transform-table-008.xht">transform-table-008</a></td>
        <td><a href="reference/transform-blank-ref.xht">=</a> </td>
        <td></td>
        <td>Table Without Preserve-3D 3
          <ul class="assert">
            <li>This is essentially the same as transform-table-006.html, except using divs with 'display' specified instead of actual table elements.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-table-009-9" class="">
        <td>
            <a href="transform-table-009.xht">transform-table-009</a></td>
        <td><a href="reference/transform-table-009-ref.xht">=</a> <a href="reference/transform-table-009-notref.xht">&#x2260;</a> </td>
        <td></td>
        <td>Table With Preserve-3D 1
          <ul class="assert">
            <li>This is the same as transform-table-007.html, except that transform-style is also explicitly applied to the intervening &lt;tbody&gt;, so nothing should vanish.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-table-010-9" class="">
        <td>
            <a href="transform-table-010.xht">transform-table-010</a></td>
        <td><a href="reference/transform-table-009-ref.xht">=</a> <a href="reference/transform-table-010-notref.xht">&#x2260;</a> </td>
        <td></td>
        <td>Table With Preserve-3D 2
          <ul class="assert">
            <li>This is the same as transform-table-007.html, except that now divs are used instead of actual table elements. This means that the parser doesn't create an implicit intervening &lt;tbody&gt;, so preserve-3d is applied to all intervening elements, and the text should display (mirrored).</li>
          </ul>
        </td>
      </tr>
      <tr id="transform-table-011-9" class="">
        <td>
            <a href="transform-table-011.xht">transform-table-011</a></td>
        <td><a href="reference/transform-table-009-ref.xht">=</a> <a href="reference/transform-table-011-notref.xht">&#x2260;</a> </td>
        <td></td>
        <td>Table With Preserve-3D 3
          <ul class="assert">
            <li>This is an even more extreme example of transform-table-010.html. CSS will create several anonymous table boxes wrapping the div with display: table-cell, but none of these have corresponding elements. Every actual element in the DOM still has preserve-3d specified, so the text should not vanish.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-preserve3d-001-9" class="">
        <td>
            <a href="transform3d-preserve3d-001.xht">transform3d-preserve3d-001</a></td>
        <td><a href="reference/transform3d-preserve3d-001-ref.xht">=</a> </td>
        <td></td>
        <td>Simple Preserve-3D
          <ul class="assert">
            <li>This tests that if preserve-3d is specified, four 45deg rotations equal one 180deg rotation.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-preserve3d-002-9" class="">
        <td>
            <a href="transform3d-preserve3d-002.xht">transform3d-preserve3d-002</a></td>
        <td><a href="reference/transform-lime-square-ref.xht">=</a> </td>
        <td></td>
        <td>Preserve-3D With Margins 1
          <ul class="assert">
            <li>This is the first in a series of four tests that test that translations work correctly when combined with margins or translations on various elements, when preserve-3d is enabled. They test for a real-world implementation bug: &lt;https://bugzilla.mozilla.org/show_bug.cgi?id=691864&gt;.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-preserve3d-003-9" class="">
        <td>
            <a href="transform3d-preserve3d-003.xht">transform3d-preserve3d-003</a></td>
        <td><a href="reference/transform-lime-square-ref.xht">=</a> </td>
        <td></td>
        <td>Preserve-3D With Margins 2
          <ul class="assert">
            <li>This is the second in a series of four tests that test that translations work correctly when combined with margins or translations on various elements, when preserve-3d is enabled. They test for a real-world implementation bug: &lt;https://bugzilla.mozilla.org/show_bug.cgi?id=691864&gt;.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-preserve3d-004-9" class="">
        <td>
            <a href="transform3d-preserve3d-004.xht">transform3d-preserve3d-004</a></td>
        <td><a href="reference/transform-lime-square-ref.xht">=</a> </td>
        <td></td>
        <td>Preserve-3D With Margins 3
          <ul class="assert">
            <li>This is the third in a series of four tests that test that translations work correctly when combined with margins or translations on various elements, when preserve-3d is enabled. They test for a real-world implementation bug: &lt;https://bugzilla.mozilla.org/show_bug.cgi?id=691864&gt;.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-preserve3d-005-9" class="">
        <td>
            <a href="transform3d-preserve3d-005.xht">transform3d-preserve3d-005</a></td>
        <td><a href="reference/transform-lime-square-ref.xht">=</a> </td>
        <td></td>
        <td>Preserve-3D With Transformed Grandparent and Grandchild
          <ul class="assert">
            <li>This is the fourth in a series of four tests that test that translations work correctly when combined with margins or translations on various elements, when preserve-3d is enabled. They test for a real-world implementation bug: &lt;https://bugzilla.mozilla.org/show_bug.cgi?id=691864&gt;.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-preserve3d-006-9" class="">
        <td>
            <a href="transform3d-preserve3d-006.xht">transform3d-preserve3d-006</a></td>
        <td><a href="reference/transform-lime-square-ref.xht">=</a> </td>
        <td></td>
        <td>Two rotatex(), No Preserve-3D
          <ul class="assert">
            <li>rotatex(45deg) or rotatex(-45deg), by itself, should both just scale down the element by a factor of sqrt(2) (and perhaps shift it, depending on 'transform-origin'). Without 'transform-style: preserve-3d', the rotations on parent and child shouldn't cancel, so its height should be halved with no other effect.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-preserve3d-007-9" class="">
        <td>
            <a href="transform3d-preserve3d-007.xht">transform3d-preserve3d-007</a></td>
        <td><a href="reference/transform-lime-square-ref.xht">=</a> </td>
        <td></td>
        <td>Two rotatey(), No Preserve-3D
          <ul class="assert">
            <li>This is identical to transform3d-preserve3d-006.html, except with rotatey() instead of rotatex().</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-preserve3d-008-9" class="">
        <td>
            <a href="transform3d-preserve3d-008.xht">transform3d-preserve3d-008</a></td>
        <td><a href="reference/transform-lime-square-ref.xht">=</a> </td>
        <td></td>
        <td>Preserve-3D with 'overflow: hidden'
          <ul class="assert">
            <li>This is identical to transform3d-preserve3d-006.html, except that it has 'transform-style: preserve-3d; overflow: hidden' specified on the parent element. 'transform-style: preserve-3d' would normally make the result different, but 'overflow: hidden' overrides its effect and causes it to work the same as 'transform-style: flat'.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-preserve3d-009-9" class="">
        <td>
            <a href="transform3d-preserve3d-009.xht">transform3d-preserve3d-009</a></td>
        <td><a href="reference/transform-lime-square-ref.xht">=</a> </td>
        <td></td>
        <td>Preserve-3D with 'overflow: auto'
          <ul class="assert">
            <li>This is identical to transform3d-preserve3d-008.html, except with 'overflow: auto' instead of 'hidden'.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-preserve3d-010-9" class="">
        <td>
            <a href="transform3d-preserve3d-010.xht">transform3d-preserve3d-010</a></td>
        <td><a href="reference/transform-lime-square-ref.xht">=</a> </td>
        <td></td>
        <td>rotatex() With Preserve-3D
          <ul class="assert">
            <li>This tests that two rotations of 22.5deg properly add when preserve-3d is used. The result, a 45deg rotation around the X-axis, should be equivalent to shrinking the height by a factor of sqrt(2), i.e., 1.41421356....</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-preserve3d-011-9" class="">
        <td>
            <a href="transform3d-preserve3d-011.xht">transform3d-preserve3d-011</a></td>
        <td><a href="reference/transform-lime-square-ref.xht">=</a> </td>
        <td></td>
        <td>Preserve-3D With 90-Degree Rotation
          <ul class="assert">
            <li>This tests that when preserve-3d is specified, a 90-degree rotation on the parent plus a 90-degree rotation on the child cancel out, adding to a 180-degree rotation (which has no visible effect on a lime square). scale(2) is added to ensure that the test doesn't pass if the transforms are just ignored.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-preserve3d-012-9" class="">
        <td>
            <a href="transform3d-preserve3d-012.xht">transform3d-preserve3d-012</a></td>
        <td><a href="reference/transform-blank-ref.xht">=</a> </td>
        <td></td>
        <td>90-Degree Rotations Without Preserve-3D
          <ul class="assert">
            <li>This tests that two 90-degree rotations with the default 'transform-style: flat' do not add together to form a 180-degree rotation. Instead, the first causes the contents to vanish and the second does not restore them.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-preserve3d-013-9" class="">
        <td>
            <a href="transform3d-preserve3d-013.xht">transform3d-preserve3d-013</a></td>
        <td><a href="reference/transform3d-preserve3d-013-ref.xht">=</a> </td>
        <td></td>
        <td>Preserve-3D with 'overflow: scroll'
          <ul class="assert">
            <li>This is identical to transform3d-preserve3d-008.html, except with 'overflow: scroll' instead of 'hidden'. (Note that the ref is nontrivial, because the scrollbar has to be scaled appropriately.)</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-sorting-001-9" class="">
        <td>
            <a href="transform3d-sorting-001.xht">transform3d-sorting-001</a></td>
        <td><a href="reference/transform-lime-square-ref.xht">=</a> </td>
        <td></td>
        <td>Simple Sorting
          <ul class="assert">
            <li>The red box here is translated in the negative Z-direction, so it should render beneath the lime box even though it comes later in DOM order.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-sorting-002-9" class="">
        <td>
            <a href="transform3d-sorting-002.xht">transform3d-sorting-002</a></td>
        <td><a href="reference/transform-lime-square-ref.xht">=</a> </td>
        <td></td>
        <td>Simple Sorting With Rotation
          <ul class="assert">
            <li>The red box here is translated to the same extent as the lime box, so they should render in stacking context order: the lime box is on top, because it's later in the DOM. But then we apply rotatex(180deg) to the whole thing, so the lime box should wind up on top in the end.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-sorting-003-9" class="">
        <td>
            <a href="transform3d-sorting-003.xht">transform3d-sorting-003</a></td>
        <td><a href="reference/transform-lime-square-ref.xht">=</a> </td>
        <td></td>
        <td>Simple Sorting With No Preserve-3D
          <ul class="assert">
            <li>The red box here is translated to above the lime box, but they aren't in the same 3D rendering context, so they should be drawn in DOM order regardless: lime box on top.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-sorting-004-9" class="">
        <td>
            <a href="transform3d-sorting-004.xht">transform3d-sorting-004</a></td>
        <td><a href="reference/transform-lime-square-ref.xht">=</a> </td>
        <td></td>
        <td>Simple Sorting With Preserve-3D on Grandparent
          <ul class="assert">
            <li>This is the same as transform3d-sorting-003.html, except with two wrapper divs. 'transform-style: preserve-3d' only affects children, not grandchildren, so the two divs with backgrounds are still in different rendering contexts and the Z-position should still not affect stacking.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-sorting-005-9" class="">
        <td>
            <a href="transform3d-sorting-005.xht">transform3d-sorting-005</a></td>
        <td><a href="reference/transform-lime-square-ref.xht">=</a> </td>
        <td></td>
        <td>Sorting With Background on Parent
          <ul class="assert">
            <li>This tests that if a parent has 'transform-style: preserve-3d', it's in the same rendering context as its children. Thus the translateZ(10px) puts the child above it, and the rotateX(180deg) puts it below, so the lime parent is rendered on top.</li>
          </ul>
        </td>
      </tr>
      <tr id="transform3d-sorting-006-9" class="">
        <td>
            <a href="transform3d-sorting-006.xht">transform3d-sorting-006</a></td>
        <td><a href="reference/transform3d-sorting-006-ref.xht">=</a> </td>
        <td></td>
        <td>Sorting With Intersection
          <ul class="assert">
            <li>This tests that when two boxes intersect in a simple fashion, they're rendered according to Newell's algorithm.</li>
          </ul>
        </td>
      </tr>
    </tbody>
    <tbody id="s9.#issue-f175efd2">
      <!-- 0 tests -->
    </tbody>
    <tbody id="s9.#propdef-transform-style">
      <!-- 0 tests -->
    </tbody>
  </table>

 </body>
</html>
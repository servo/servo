// GENERATED CONTENT - DO NOT EDIT
// Content of this file was automatically extracted from the
// "Presentation API" spec.
// See: https://w3c.github.io/presentation-api/

partial interface Navigator {
    [SecureContext,
     SameObject]
    readonly attribute Presentation presentation;
};

[SecureContext,
 Exposed=Window]
interface Presentation {
};
partial interface Presentation {
    attribute PresentationRequest? defaultRequest;
};
partial interface Presentation {
    readonly attribute PresentationReceiver? receiver;
};
[Constructor(USVString url),
 Constructor(sequence<USVString> urls),
 SecureContext,
 Exposed=Window]
interface PresentationRequest : EventTarget {
    Promise<PresentationConnection>   start();
    Promise<PresentationConnection>   reconnect(USVString presentationId);
    Promise<PresentationAvailability> getAvailability();

    attribute EventHandler onconnectionavailable;
};
[SecureContext,
 Exposed=Window]
interface PresentationAvailability : EventTarget {
    readonly attribute boolean      value;

             attribute EventHandler onchange;
};
[Constructor(DOMString type, PresentationConnectionAvailableEventInit eventInitDict),
 SecureContext,
 Exposed=Window]
interface PresentationConnectionAvailableEvent : Event {
    [SameObject]
    readonly attribute PresentationConnection connection;
};

dictionary PresentationConnectionAvailableEventInit : EventInit {
    required PresentationConnection connection;
};
enum PresentationConnectionState {
    "connecting",
    "connected",
    "closed",
    "terminated"
};

enum BinaryType {
    "blob",
    "arraybuffer"
};

[SecureContext,
 Exposed=Window]
interface PresentationConnection : EventTarget {
    readonly attribute USVString                   id;
    readonly attribute USVString                   url;
    readonly attribute PresentationConnectionState state;
    void close();
    void terminate();
             attribute EventHandler                onconnect;
             attribute EventHandler                onclose;
             attribute EventHandler                onterminate;

    // Communication
             attribute BinaryType                  binaryType;
             attribute EventHandler                onmessage;
    void send(DOMString message);
    void send(Blob data);
    void send(ArrayBuffer data);
    void send(ArrayBufferView data);
};
enum PresentationConnectionCloseReason {
    "error",
    "closed",
    "wentaway"
};

[Constructor(DOMString type, PresentationConnectionCloseEventInit eventInitDict),
 SecureContext,
 Exposed=Window]
interface PresentationConnectionCloseEvent : Event {
    readonly attribute PresentationConnectionCloseReason reason;
    readonly attribute DOMString                         message;
};

dictionary PresentationConnectionCloseEventInit : EventInit {
    required PresentationConnectionCloseReason reason;
             DOMString                         message = "";
};
[SecureContext,
 Exposed=Window]
interface PresentationReceiver {
    readonly attribute Promise<PresentationConnectionList> connectionList;
};
[SecureContext,
 Exposed=Window]
interface PresentationConnectionList : EventTarget {
    readonly attribute FrozenArray<PresentationConnection> connections;
             attribute EventHandler                        onconnectionavailable;
};

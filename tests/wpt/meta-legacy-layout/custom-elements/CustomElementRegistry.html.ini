[CustomElementRegistry.html]
  type: testharness
  [customElements.define must upgrade elements in the shadow-including tree order]
    expected: FAIL

  [customElements.define must get "observedAttributes" property on the constructor prototype when "attributeChangedCallback" is present]
    expected: FAIL

  [customElements.define must rethrow an exception thrown while retrieving Symbol.iterator on disabledFeatures]
    expected: FAIL

  [customElements.define must rethrow an exception thrown while getting disabledFeatures on the constructor prototype]
    expected: FAIL

  [customElements.define must rethrow an exception thrown while iterating over disabledFeatures to sequence<DOMString>]
    expected: FAIL

  [customElements.define must rethrow an exception thrown while converting the value of disabledFeatures to sequence<DOMString>]
    expected: FAIL

  [customElements.define must rethrow an exception thrown while getting formAssociated on the constructor prototype]
    expected: FAIL

  [customElements.define must rethrow an exception thrown while getting additional formAssociated callbacks on the constructor prototype]
    expected: FAIL

  [customElements.define must get four additional callbacks on the prototype if formAssociated is converted to true]
    expected: FAIL

  [customElements.define must get "prototype", "disabledFeatures", and "formAssociated" property of the constructor]
    expected: FAIL

  [customElements.define must not throw when defining another custom element in a different global object during Get(constructor, "prototype")]
    expected: FAIL

  [customElements.getName must return null when the registry does not contain an entry with the given constructor]
    expected: FAIL

  [customElements.getName returns the name of the entry with the given constructor when there is a matching entry.]
    expected: FAIL

  [customElements.getName returns the name of the entry with the given customized built in constructor when there is a matching entry.]
    expected: FAIL

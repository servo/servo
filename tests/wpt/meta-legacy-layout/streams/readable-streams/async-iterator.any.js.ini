[async-iterator.any.serviceworker.html]
  expected: ERROR

[async-iterator.any.sharedworker.html]
  expected: ERROR

[async-iterator.any.html]
  [Async-iterating an empty but not closed/errored stream never executes the loop body and stalls the async function]
    expected: FAIL

  [Calling return() twice rejects]
    expected: FAIL

  [Cancellation behavior when manually calling return(); preventCancel = true]
    expected: FAIL

  [calling next() after return() should reject]
    expected: FAIL

  [Cancellation behavior when returning inside loop body; preventCancel = true]
    expected: FAIL

  [getIterator() throws if there's already a lock]
    expected: FAIL

  [Async-iterating a push source]
    expected: FAIL

  [Async-iterating a closed stream never executes the loop body, but works fine]
    expected: FAIL

  [Acquiring a reader after exhaustively async-iterating a stream]
    expected: FAIL

  [return() should unlock the stream synchronously when preventCancel = true]
    expected: FAIL

  [Async iterator instances should have the correct list of properties]
    expected: FAIL

  [return() should unlock the stream synchronously when preventCancel = false]
    expected: FAIL

  [Cancellation behavior when returning inside loop body; preventCancel = false]
    expected: FAIL

  [Cancellation behavior when manually calling return(); preventCancel = false]
    expected: FAIL

  [Cancellation behavior when throwing inside loop body; preventCancel = true]
    expected: FAIL

  [Cancellation behavior when breaking inside loop body; preventCancel = true]
    expected: FAIL

  [Cancellation behavior when throwing inside loop body; preventCancel = false]
    expected: FAIL

  [Async-iterating a pull source]
    expected: FAIL

  [Acquiring a reader and reading the remaining chunks after partially async-iterating a stream with preventCancel = true]
    expected: FAIL

  [Acquiring a reader after partially async-iterating a stream]
    expected: FAIL

  [Async-iterating a partially consumed stream]
    expected: FAIL

  [Cancellation behavior when breaking inside loop body; preventCancel = false]
    expected: FAIL

  [calling return() while there are pending reads rejects]
    expected: FAIL

  [Async-iterating a pull source manually]
    expected: FAIL

  [Async-iterating an errored stream throws]
    expected: FAIL

  [next()'s fulfillment value has the right shape]
    expected: FAIL

  [return() rejects if the stream has errored]
    expected: FAIL

  [values() throws if there's already a lock]
    expected: FAIL

  [Async-iterating a pull source with undefined values]
    expected: FAIL

  [next() that succeeds; return() [no awaiting\]]
    expected: FAIL

  [next() that succeeds; next() that reports an error(); next() [no awaiting\]]
    expected: FAIL

  [next() that succeeds; next() that reports an error; next()]
    expected: FAIL

  [return(); return() [no awaiting\]]
    expected: FAIL

  [return(); return()]
    expected: FAIL

  [next() that succeeds; next() that reports an error(); return() [no awaiting\]]
    expected: FAIL

  [next() rejects if the stream errors]
    expected: FAIL

  [Async-iterating a push source with undefined values]
    expected: FAIL

  [return(); next() [no awaiting\]]
    expected: FAIL

  [next() that succeeds; return()]
    expected: FAIL

  [return(); next()]
    expected: FAIL

  [Acquiring a reader after return()ing from a stream that errors]
    expected: FAIL

  [next() that succeeds; next() that reports an error(); return()]
    expected: FAIL

  [return() does not rejects if the stream has not errored yet]
    expected: FAIL

  [close() while next() is pending]
    expected: FAIL

  [return(); next() with delayed cancel()]
    expected: FAIL

  [return(); next() with delayed cancel() [no awaiting\]]
    expected: FAIL


[async-iterator.any.worker.html]
  [Async-iterating an empty but not closed/errored stream never executes the loop body and stalls the async function]
    expected: FAIL

  [Calling return() twice rejects]
    expected: FAIL

  [Cancellation behavior when manually calling return(); preventCancel = true]
    expected: FAIL

  [calling next() after return() should reject]
    expected: FAIL

  [Cancellation behavior when returning inside loop body; preventCancel = true]
    expected: FAIL

  [getIterator() throws if there's already a lock]
    expected: FAIL

  [Async-iterating a push source]
    expected: FAIL

  [Async-iterating a closed stream never executes the loop body, but works fine]
    expected: FAIL

  [Acquiring a reader after exhaustively async-iterating a stream]
    expected: FAIL

  [return() should unlock the stream synchronously when preventCancel = true]
    expected: FAIL

  [Async iterator instances should have the correct list of properties]
    expected: FAIL

  [return() should unlock the stream synchronously when preventCancel = false]
    expected: FAIL

  [Cancellation behavior when returning inside loop body; preventCancel = false]
    expected: FAIL

  [Cancellation behavior when manually calling return(); preventCancel = false]
    expected: FAIL

  [Cancellation behavior when throwing inside loop body; preventCancel = true]
    expected: FAIL

  [Cancellation behavior when breaking inside loop body; preventCancel = true]
    expected: FAIL

  [Cancellation behavior when throwing inside loop body; preventCancel = false]
    expected: FAIL

  [Async-iterating a pull source]
    expected: FAIL

  [Acquiring a reader and reading the remaining chunks after partially async-iterating a stream with preventCancel = true]
    expected: FAIL

  [Acquiring a reader after partially async-iterating a stream]
    expected: FAIL

  [Async-iterating a partially consumed stream]
    expected: FAIL

  [Cancellation behavior when breaking inside loop body; preventCancel = false]
    expected: FAIL

  [calling return() while there are pending reads rejects]
    expected: FAIL

  [Async-iterating a pull source manually]
    expected: FAIL

  [Async-iterating an errored stream throws]
    expected: FAIL

  [next()'s fulfillment value has the right shape]
    expected: FAIL

  [return() rejects if the stream has errored]
    expected: FAIL

  [values() throws if there's already a lock]
    expected: FAIL

  [Async-iterating a pull source with undefined values]
    expected: FAIL

  [next() that succeeds; return() [no awaiting\]]
    expected: FAIL

  [next() that succeeds; next() that reports an error(); next() [no awaiting\]]
    expected: FAIL

  [next() that succeeds; next() that reports an error; next()]
    expected: FAIL

  [return(); return() [no awaiting\]]
    expected: FAIL

  [return(); return()]
    expected: FAIL

  [next() that succeeds; next() that reports an error(); return() [no awaiting\]]
    expected: FAIL

  [next() rejects if the stream errors]
    expected: FAIL

  [Async-iterating a push source with undefined values]
    expected: FAIL

  [return(); next() [no awaiting\]]
    expected: FAIL

  [next() that succeeds; return()]
    expected: FAIL

  [return(); next()]
    expected: FAIL

  [Acquiring a reader after return()ing from a stream that errors]
    expected: FAIL

  [next() that succeeds; next() that reports an error(); return()]
    expected: FAIL

  [return() does not rejects if the stream has not errored yet]
    expected: FAIL

  [close() while next() is pending]
    expected: FAIL

  [return(); next() with delayed cancel()]
    expected: FAIL

  [return(); next() with delayed cancel() [no awaiting\]]
    expected: FAIL


[async-iterator.any.shadowrealm.html]
  expected: ERROR

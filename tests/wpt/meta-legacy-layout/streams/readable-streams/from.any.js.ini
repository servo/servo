[from.any.serviceworker.html]
  expected: ERROR

[from.any.html]
  [ReadableStream.from accepts an array of values]
    expected: FAIL

  [ReadableStream.from accepts an array of promises]
    expected: FAIL

  [ReadableStream.from accepts an array iterator]
    expected: FAIL

  [ReadableStream.from accepts a string]
    expected: FAIL

  [ReadableStream.from accepts a Set]
    expected: FAIL

  [ReadableStream.from accepts a Set iterator]
    expected: FAIL

  [ReadableStream.from accepts a sync generator]
    expected: FAIL

  [ReadableStream.from accepts an async generator]
    expected: FAIL

  [ReadableStream.from accepts a sync iterable of values]
    expected: FAIL

  [ReadableStream.from accepts a sync iterable of promises]
    expected: FAIL

  [ReadableStream.from accepts an async iterable]
    expected: FAIL

  [ReadableStream.from accepts a ReadableStream]
    expected: FAIL

  [ReadableStream.from accepts a ReadableStream async iterator]
    expected: FAIL

  [ReadableStream.from re-throws errors from calling the @@iterator method]
    expected: FAIL

  [ReadableStream.from re-throws errors from calling the @@asyncIterator method]
    expected: FAIL

  [ReadableStream.from ignores @@iterator if @@asyncIterator exists]
    expected: FAIL

  [ReadableStream.from accepts an empty iterable]
    expected: FAIL

  [ReadableStream.from: stream errors when next() rejects]
    expected: FAIL

  [ReadableStream.from: stream stalls when next() never settles]
    expected: FAIL

  [ReadableStream.from: calls next() after first read()]
    expected: FAIL

  [ReadableStream.from: cancelling the returned stream calls and awaits return()]
    expected: FAIL

  [ReadableStream.from: return() is not called when iterator completes normally]
    expected: FAIL

  [ReadableStream.from: cancel() rejects when return() fulfills with a non-object]
    expected: FAIL

  [ReadableStream.from: reader.read() inside next()]
    expected: FAIL

  [ReadableStream.from: reader.cancel() inside next()]
    expected: FAIL

  [ReadableStream.from: reader.cancel() inside return()]
    expected: FAIL

  [ReadableStream.from(array), push() to array while reading]
    expected: FAIL

  [ReadableStream.from ignores a null @@asyncIterator]
    expected: FAIL


[from.any.worker.html]
  [ReadableStream.from accepts an array of values]
    expected: FAIL

  [ReadableStream.from accepts an array of promises]
    expected: FAIL

  [ReadableStream.from accepts an array iterator]
    expected: FAIL

  [ReadableStream.from accepts a string]
    expected: FAIL

  [ReadableStream.from accepts a Set]
    expected: FAIL

  [ReadableStream.from accepts a Set iterator]
    expected: FAIL

  [ReadableStream.from accepts a sync generator]
    expected: FAIL

  [ReadableStream.from accepts an async generator]
    expected: FAIL

  [ReadableStream.from accepts a sync iterable of values]
    expected: FAIL

  [ReadableStream.from accepts a sync iterable of promises]
    expected: FAIL

  [ReadableStream.from accepts an async iterable]
    expected: FAIL

  [ReadableStream.from accepts a ReadableStream]
    expected: FAIL

  [ReadableStream.from accepts a ReadableStream async iterator]
    expected: FAIL

  [ReadableStream.from re-throws errors from calling the @@iterator method]
    expected: FAIL

  [ReadableStream.from re-throws errors from calling the @@asyncIterator method]
    expected: FAIL

  [ReadableStream.from ignores @@iterator if @@asyncIterator exists]
    expected: FAIL

  [ReadableStream.from accepts an empty iterable]
    expected: FAIL

  [ReadableStream.from: stream errors when next() rejects]
    expected: FAIL

  [ReadableStream.from: stream stalls when next() never settles]
    expected: FAIL

  [ReadableStream.from: calls next() after first read()]
    expected: FAIL

  [ReadableStream.from: cancelling the returned stream calls and awaits return()]
    expected: FAIL

  [ReadableStream.from: return() is not called when iterator completes normally]
    expected: FAIL

  [ReadableStream.from: cancel() rejects when return() fulfills with a non-object]
    expected: FAIL

  [ReadableStream.from: reader.read() inside next()]
    expected: FAIL

  [ReadableStream.from: reader.cancel() inside next()]
    expected: FAIL

  [ReadableStream.from: reader.cancel() inside return()]
    expected: FAIL

  [ReadableStream.from(array), push() to array while reading]
    expected: FAIL

  [ReadableStream.from ignores a null @@asyncIterator]
    expected: FAIL


[from.any.sharedworker.html]
  expected: ERROR

[from.any.shadowrealm.html]
  expected: ERROR

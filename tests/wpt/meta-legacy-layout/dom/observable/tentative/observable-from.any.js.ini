[observable-from.any.html]
  [from(): Observable.from() is a function]
    expected: FAIL

  [from(): Failed conversions]
    expected: FAIL

  [from(): Given an observable, it returns that exact observable]
    expected: FAIL

  [from(): Given an array]
    expected: FAIL

  [from(): Iterable converts to Observable]
    expected: FAIL

  [from(): [Symbol.iterator\] side-effects (one observable)]
    expected: FAIL

  [from(): [Symbol.iterator\] side-effects (many observables)]
    expected: FAIL

  [from(): [Symbol.iterator\] next() throws error]
    expected: FAIL

  [from(): Converts Promise to Observable]
    expected: FAIL

  [from(): Converts rejected Promise to Observable. No `unhandledrejection` event when error is handled by subscription]
    expected: FAIL

  [from(): Rejections not handled by subscription are reported to the global, and still not sent as an unhandledrejection event]
    expected: FAIL

  [from(): Observable that implements @@iterator protocol gets converted as an Observable, not iterator]
    expected: FAIL

  [from(): Promise that implements @@iterator protocol gets converted as an iterable, not Promise]
    expected: FAIL

  [from(): [Symbol.iterator\] not callable]
    expected: FAIL

  [from(): [Symbol.iterator\] is not cached]
    expected: FAIL

  [from(): Promise whose [Symbol.iterator\] returns null converts as Promise]
    expected: FAIL

  [from(): Rethrows the error when Converting an object whose @@iterator method *getter* throws an error]
    expected: FAIL

  [from(): Throws 'callable' error when @@iterator property is a non-callable primitive]
    expected: FAIL

  [from(): Async iterable protocol null, converts as iterator]
    expected: FAIL

  [from(): Asynchronous iterable conversion]
    expected: FAIL

  [from(): Asynchronous iterable multiple in-flight subscriptions competing]
    expected: FAIL

  [from(): Asynchronous generator conversion: can only be used once]
    expected: FAIL

  [from(): Promise-wrapping semantics of IteratorResult interface]
    expected: FAIL

  [from(): Errors thrown in Symbol.asyncIterator() are propagated synchronously]
    expected: FAIL

  [from(): Errors thrown in async iterator's next() GETTER are propagated in a microtask]
    expected: FAIL

  [from(): Errors thrown in async iterator's next() are propagated in a microtask]
    expected: FAIL

  [from(): Aborting sync iterable midway through iteration both stops iteration and invokes `IteratorRecord#return()]
    expected: FAIL

  [from(): Asynchronous iterable conversion, with synchronous iterable fallback]
    expected: FAIL

  [from(): Generator finally block runs when subscription is aborted]
    expected: FAIL

  [from(): Generator finally block run when Observable completes]
    expected: FAIL

  [from(): Generator finally block run when Observable errors]
    expected: FAIL

  [from(): Async generator finally block run when subscription is aborted]
    expected: FAIL

  [from(): Async generator finally block runs when Observable completes]
    expected: FAIL

  [from(): Async generator finally block run when Observable errors]
    expected: FAIL


[observable-from.any.worker.html]
  [from(): Observable.from() is a function]
    expected: FAIL

  [from(): Failed conversions]
    expected: FAIL

  [from(): Given an observable, it returns that exact observable]
    expected: FAIL

  [from(): Given an array]
    expected: FAIL

  [from(): Iterable converts to Observable]
    expected: FAIL

  [from(): [Symbol.iterator\] side-effects (one observable)]
    expected: FAIL

  [from(): [Symbol.iterator\] side-effects (many observables)]
    expected: FAIL

  [from(): [Symbol.iterator\] next() throws error]
    expected: FAIL

  [from(): Converts Promise to Observable]
    expected: FAIL

  [from(): Converts rejected Promise to Observable. No `unhandledrejection` event when error is handled by subscription]
    expected: FAIL

  [from(): Rejections not handled by subscription are reported to the global, and still not sent as an unhandledrejection event]
    expected: FAIL

  [from(): Observable that implements @@iterator protocol gets converted as an Observable, not iterator]
    expected: FAIL

  [from(): Promise that implements @@iterator protocol gets converted as an iterable, not Promise]
    expected: FAIL

  [from(): [Symbol.iterator\] not callable]
    expected: FAIL

  [from(): [Symbol.iterator\] is not cached]
    expected: FAIL

  [from(): Promise whose [Symbol.iterator\] returns null converts as Promise]
    expected: FAIL

  [from(): Rethrows the error when Converting an object whose @@iterator method *getter* throws an error]
    expected: FAIL

  [from(): Throws 'callable' error when @@iterator property is a non-callable primitive]
    expected: FAIL

  [from(): Async iterable protocol null, converts as iterator]
    expected: FAIL

  [from(): Asynchronous iterable conversion]
    expected: FAIL

  [from(): Asynchronous iterable multiple in-flight subscriptions competing]
    expected: FAIL

  [from(): Asynchronous generator conversion: can only be used once]
    expected: FAIL

  [from(): Promise-wrapping semantics of IteratorResult interface]
    expected: FAIL

  [from(): Errors thrown in Symbol.asyncIterator() are propagated synchronously]
    expected: FAIL

  [from(): Errors thrown in async iterator's next() GETTER are propagated in a microtask]
    expected: FAIL

  [from(): Errors thrown in async iterator's next() are propagated in a microtask]
    expected: FAIL

  [from(): Aborting sync iterable midway through iteration both stops iteration and invokes `IteratorRecord#return()]
    expected: FAIL

  [from(): Asynchronous iterable conversion, with synchronous iterable fallback]
    expected: FAIL

  [from(): Generator finally block runs when subscription is aborted]
    expected: FAIL

  [from(): Generator finally block run when Observable completes]
    expected: FAIL

  [from(): Generator finally block run when Observable errors]
    expected: FAIL

  [from(): Async generator finally block run when subscription is aborted]
    expected: FAIL

  [from(): Async generator finally block runs when Observable completes]
    expected: FAIL

  [from(): Async generator finally block run when Observable errors]
    expected: FAIL

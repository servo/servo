(function memory_grow_wast_js() {

// memory_grow.wast:1
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x00\x07\x88\x80\x80\x80\x00\x01\x04\x67\x72\x6f\x77\x00\x00\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x20\x00\x40\x00\x0b", "memory_grow.wast:1");

// memory_grow.wast:1
let $1 = instance($$1);

// memory_grow.wast:6
assert_return(() => call($1, "grow", [0]), "memory_grow.wast:6", 0);

// memory_grow.wast:7
assert_return(() => call($1, "grow", [1]), "memory_grow.wast:7", 0);

// memory_grow.wast:8
assert_return(() => call($1, "grow", [0]), "memory_grow.wast:8", 1);

// memory_grow.wast:9
assert_return(() => call($1, "grow", [2]), "memory_grow.wast:9", 1);

// memory_grow.wast:10
assert_return(() => call($1, "grow", [800]), "memory_grow.wast:10", 3);

// memory_grow.wast:11
assert_return(() => call($1, "grow", [65_536]), "memory_grow.wast:11", -1);

// memory_grow.wast:12
assert_return(() => call($1, "grow", [64_736]), "memory_grow.wast:12", -1);

// memory_grow.wast:13
assert_return(() => call($1, "grow", [1]), "memory_grow.wast:13", 803);

// memory_grow.wast:15
let $$2 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x84\x80\x80\x80\x00\x01\x01\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x67\x72\x6f\x77\x00\x00\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x20\x00\x40\x00\x0b", "memory_grow.wast:15");

// memory_grow.wast:15
let $2 = instance($$2);

// memory_grow.wast:20
assert_return(() => call($2, "grow", [0]), "memory_grow.wast:20", 0);

// memory_grow.wast:21
assert_return(() => call($2, "grow", [1]), "memory_grow.wast:21", 0);

// memory_grow.wast:22
assert_return(() => call($2, "grow", [1]), "memory_grow.wast:22", 1);

// memory_grow.wast:23
assert_return(() => call($2, "grow", [2]), "memory_grow.wast:23", 2);

// memory_grow.wast:24
assert_return(() => call($2, "grow", [6]), "memory_grow.wast:24", 4);

// memory_grow.wast:25
assert_return(() => call($2, "grow", [0]), "memory_grow.wast:25", 10);

// memory_grow.wast:26
assert_return(() => call($2, "grow", [1]), "memory_grow.wast:26", -1);

// memory_grow.wast:27
assert_return(() => call($2, "grow", [65_536]), "memory_grow.wast:27", -1);

// memory_grow.wast:32
let $$3 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8c\x80\x80\x80\x00\x02\x60\x01\x7f\x01\x7f\x60\x02\x7f\x7f\x01\x7f\x03\x83\x80\x80\x80\x00\x02\x00\x01\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x9c\x80\x80\x80\x00\x02\x04\x67\x72\x6f\x77\x00\x00\x11\x63\x68\x65\x63\x6b\x2d\x6d\x65\x6d\x6f\x72\x79\x2d\x7a\x65\x72\x6f\x00\x01\x0a\xc4\x80\x80\x80\x00\x02\x86\x80\x80\x80\x00\x00\x20\x00\x40\x00\x0b\xb3\x80\x80\x80\x00\x01\x01\x7f\x41\x01\x21\x02\x02\x40\x03\x40\x20\x00\x2d\x00\x00\x21\x02\x20\x02\x41\x00\x47\x0d\x01\x20\x00\x20\x01\x4f\x0d\x01\x20\x00\x41\x01\x6a\x21\x00\x20\x00\x20\x01\x4d\x0d\x00\x0b\x0b\x20\x02\x0b", "memory_grow.wast:32");

// memory_grow.wast:32
let $3 = instance($$3);

// memory_grow.wast:53
assert_return(() => call($3, "check-memory-zero", [0, 65_535]), "memory_grow.wast:53", 0);

// memory_grow.wast:54
assert_return(() => call($3, "grow", [1]), "memory_grow.wast:54", 1);

// memory_grow.wast:55
assert_return(() => call($3, "check-memory-zero", [65_536, 131_071]), "memory_grow.wast:55", 0);

// memory_grow.wast:56
assert_return(() => call($3, "grow", [1]), "memory_grow.wast:56", 2);

// memory_grow.wast:57
assert_return(() => call($3, "check-memory-zero", [131_072, 196_607]), "memory_grow.wast:57", 0);

// memory_grow.wast:58
assert_return(() => call($3, "grow", [1]), "memory_grow.wast:58", 3);

// memory_grow.wast:59
assert_return(() => call($3, "check-memory-zero", [196_608, 262_143]), "memory_grow.wast:59", 0);

// memory_grow.wast:60
assert_return(() => call($3, "grow", [1]), "memory_grow.wast:60", 4);

// memory_grow.wast:61
assert_return(() => call($3, "check-memory-zero", [262_144, 327_679]), "memory_grow.wast:61", 0);

// memory_grow.wast:62
assert_return(() => call($3, "grow", [1]), "memory_grow.wast:62", 5);

// memory_grow.wast:63
assert_return(() => call($3, "check-memory-zero", [327_680, 393_215]), "memory_grow.wast:63", 0);

// memory_grow.wast:68
let $$4 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7f\x01\x7f\x03\x87\x80\x80\x80\x00\x06\x00\x01\x00\x01\x02\x00\x05\x83\x80\x80\x80\x00\x01\x00\x00\x07\xd7\x80\x80\x80\x00\x06\x0c\x6c\x6f\x61\x64\x5f\x61\x74\x5f\x7a\x65\x72\x6f\x00\x00\x0d\x73\x74\x6f\x72\x65\x5f\x61\x74\x5f\x7a\x65\x72\x6f\x00\x01\x11\x6c\x6f\x61\x64\x5f\x61\x74\x5f\x70\x61\x67\x65\x5f\x73\x69\x7a\x65\x00\x02\x12\x73\x74\x6f\x72\x65\x5f\x61\x74\x5f\x70\x61\x67\x65\x5f\x73\x69\x7a\x65\x00\x03\x04\x67\x72\x6f\x77\x00\x04\x04\x73\x69\x7a\x65\x00\x05\x0a\xcd\x80\x80\x80\x00\x06\x87\x80\x80\x80\x00\x00\x41\x00\x28\x02\x00\x0b\x89\x80\x80\x80\x00\x00\x41\x00\x41\x02\x36\x02\x00\x0b\x89\x80\x80\x80\x00\x00\x41\x80\x80\x04\x28\x02\x00\x0b\x8b\x80\x80\x80\x00\x00\x41\x80\x80\x04\x41\x03\x36\x02\x00\x0b\x86\x80\x80\x80\x00\x00\x20\x00\x40\x00\x0b\x84\x80\x80\x80\x00\x00\x3f\x00\x0b", "memory_grow.wast:68");

// memory_grow.wast:68
let $4 = instance($$4);

// memory_grow.wast:85
assert_return(() => call($4, "size", []), "memory_grow.wast:85", 0);

// memory_grow.wast:86
assert_trap(() => call($4, "store_at_zero", []), "memory_grow.wast:86");

// memory_grow.wast:87
assert_trap(() => call($4, "load_at_zero", []), "memory_grow.wast:87");

// memory_grow.wast:88
assert_trap(() => call($4, "store_at_page_size", []), "memory_grow.wast:88");

// memory_grow.wast:89
assert_trap(() => call($4, "load_at_page_size", []), "memory_grow.wast:89");

// memory_grow.wast:90
assert_return(() => call($4, "grow", [1]), "memory_grow.wast:90", 0);

// memory_grow.wast:91
assert_return(() => call($4, "size", []), "memory_grow.wast:91", 1);

// memory_grow.wast:92
assert_return(() => call($4, "load_at_zero", []), "memory_grow.wast:92", 0);

// memory_grow.wast:93
assert_return(() => call($4, "store_at_zero", []), "memory_grow.wast:93");

// memory_grow.wast:94
assert_return(() => call($4, "load_at_zero", []), "memory_grow.wast:94", 2);

// memory_grow.wast:95
assert_trap(() => call($4, "store_at_page_size", []), "memory_grow.wast:95");

// memory_grow.wast:96
assert_trap(() => call($4, "load_at_page_size", []), "memory_grow.wast:96");

// memory_grow.wast:97
assert_return(() => call($4, "grow", [4]), "memory_grow.wast:97", 1);

// memory_grow.wast:98
assert_return(() => call($4, "size", []), "memory_grow.wast:98", 5);

// memory_grow.wast:99
assert_return(() => call($4, "load_at_zero", []), "memory_grow.wast:99", 2);

// memory_grow.wast:100
assert_return(() => call($4, "store_at_zero", []), "memory_grow.wast:100");

// memory_grow.wast:101
assert_return(() => call($4, "load_at_zero", []), "memory_grow.wast:101", 2);

// memory_grow.wast:102
assert_return(() => call($4, "load_at_page_size", []), "memory_grow.wast:102", 0);

// memory_grow.wast:103
assert_return(() => call($4, "store_at_page_size", []), "memory_grow.wast:103");

// memory_grow.wast:104
assert_return(() => call($4, "load_at_page_size", []), "memory_grow.wast:104", 3);

// memory_grow.wast:108
let $$5 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x95\x80\x80\x80\x00\x04\x60\x03\x7f\x7f\x7f\x01\x7f\x60\x00\x01\x7f\x60\x00\x00\x60\x02\x7f\x7f\x01\x7f\x03\xa7\x80\x80\x80\x00\x26\x01\x02\x01\x01\x02\x01\x01\x01\x01\x01\x01\x03\x03\x01\x00\x01\x01\x01\x01\x01\x01\x01\x02\x01\x02\x01\x01\x02\x02\x02\x02\x01\x01\x01\x01\x01\x01\x01\x04\x85\x80\x80\x80\x00\x01\x70\x01\x01\x01\x05\x83\x80\x80\x80\x00\x01\x00\x01\x06\x86\x80\x80\x80\x00\x01\x7f\x01\x41\x00\x0b\x07\xb7\x85\x80\x80\x00\x25\x0b\x61\x73\x2d\x62\x72\x2d\x76\x61\x6c\x75\x65\x00\x00\x0d\x61\x73\x2d\x62\x72\x5f\x69\x66\x2d\x63\x6f\x6e\x64\x00\x01\x0e\x61\x73\x2d\x62\x72\x5f\x69\x66\x2d\x76\x61\x6c\x75\x65\x00\x02\x13\x61\x73\x2d\x62\x72\x5f\x69\x66\x2d\x76\x61\x6c\x75\x65\x2d\x63\x6f\x6e\x64\x00\x03\x11\x61\x73\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x69\x6e\x64\x65\x78\x00\x04\x11\x61\x73\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x76\x61\x6c\x75\x65\x00\x05\x17\x61\x73\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x76\x61\x6c\x75\x65\x2d\x69\x6e\x64\x65\x78\x00\x06\x0f\x61\x73\x2d\x72\x65\x74\x75\x72\x6e\x2d\x76\x61\x6c\x75\x65\x00\x07\x0a\x61\x73\x2d\x69\x66\x2d\x63\x6f\x6e\x64\x00\x08\x0a\x61\x73\x2d\x69\x66\x2d\x74\x68\x65\x6e\x00\x09\x0a\x61\x73\x2d\x69\x66\x2d\x65\x6c\x73\x65\x00\x0a\x0f\x61\x73\x2d\x73\x65\x6c\x65\x63\x74\x2d\x66\x69\x72\x73\x74\x00\x0b\x10\x61\x73\x2d\x73\x65\x6c\x65\x63\x74\x2d\x73\x65\x63\x6f\x6e\x64\x00\x0c\x0e\x61\x73\x2d\x73\x65\x6c\x65\x63\x74\x2d\x63\x6f\x6e\x64\x00\x0d\x0d\x61\x73\x2d\x63\x61\x6c\x6c\x2d\x66\x69\x72\x73\x74\x00\x0f\x0b\x61\x73\x2d\x63\x61\x6c\x6c\x2d\x6d\x69\x64\x00\x10\x0c\x61\x73\x2d\x63\x61\x6c\x6c\x2d\x6c\x61\x73\x74\x00\x11\x16\x61\x73\x2d\x63\x61\x6c\x6c\x5f\x69\x6e\x64\x69\x72\x65\x63\x74\x2d\x66\x69\x72\x73\x74\x00\x12\x14\x61\x73\x2d\x63\x61\x6c\x6c\x5f\x69\x6e\x64\x69\x72\x65\x63\x74\x2d\x6d\x69\x64\x00\x13\x15\x61\x73\x2d\x63\x61\x6c\x6c\x5f\x69\x6e\x64\x69\x72\x65\x63\x74\x2d\x6c\x61\x73\x74\x00\x14\x16\x61\x73\x2d\x63\x61\x6c\x6c\x5f\x69\x6e\x64\x69\x72\x65\x63\x74\x2d\x69\x6e\x64\x65\x78\x00\x15\x12\x61\x73\x2d\x6c\x6f\x63\x61\x6c\x2e\x73\x65\x74\x2d\x76\x61\x6c\x75\x65\x00\x16\x12\x61\x73\x2d\x6c\x6f\x63\x61\x6c\x2e\x74\x65\x65\x2d\x76\x61\x6c\x75\x65\x00\x17\x13\x61\x73\x2d\x67\x6c\x6f\x62\x61\x6c\x2e\x73\x65\x74\x2d\x76\x61\x6c\x75\x65\x00\x18\x0f\x61\x73\x2d\x6c\x6f\x61\x64\x2d\x61\x64\x64\x72\x65\x73\x73\x00\x19\x10\x61\x73\x2d\x6c\x6f\x61\x64\x4e\x2d\x61\x64\x64\x72\x65\x73\x73\x00\x1a\x10\x61\x73\x2d\x73\x74\x6f\x72\x65\x2d\x61\x64\x64\x72\x65\x73\x73\x00\x1b\x0e\x61\x73\x2d\x73\x74\x6f\x72\x65\x2d\x76\x61\x6c\x75\x65\x00\x1c\x11\x61\x73\x2d\x73\x74\x6f\x72\x65\x4e\x2d\x61\x64\x64\x72\x65\x73\x73\x00\x1d\x0f\x61\x73\x2d\x73\x74\x6f\x72\x65\x4e\x2d\x76\x61\x6c\x75\x65\x00\x1e\x10\x61\x73\x2d\x75\x6e\x61\x72\x79\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x1f\x0e\x61\x73\x2d\x62\x69\x6e\x61\x72\x79\x2d\x6c\x65\x66\x74\x00\x20\x0f\x61\x73\x2d\x62\x69\x6e\x61\x72\x79\x2d\x72\x69\x67\x68\x74\x00\x21\x0f\x61\x73\x2d\x74\x65\x73\x74\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x22\x0f\x61\x73\x2d\x63\x6f\x6d\x70\x61\x72\x65\x2d\x6c\x65\x66\x74\x00\x23\x10\x61\x73\x2d\x63\x6f\x6d\x70\x61\x72\x65\x2d\x72\x69\x67\x68\x74\x00\x24\x13\x61\x73\x2d\x6d\x65\x6d\x6f\x72\x79\x2e\x67\x72\x6f\x77\x2d\x73\x69\x7a\x65\x00\x25\x09\x89\x80\x80\x80\x00\x01\x04\x41\x00\x0b\x01\xd2\x0e\x0b\x0a\xf2\x84\x80\x80\x00\x26\x8b\x80\x80\x80\x00\x00\x02\x7f\x41\x00\x40\x00\x0c\x00\x0b\x0b\x8b\x80\x80\x80\x00\x00\x02\x40\x41\x00\x40\x00\x0d\x00\x0b\x0b\x90\x80\x80\x80\x00\x00\x02\x7f\x41\x00\x40\x00\x41\x01\x0d\x00\x1a\x41\x07\x0b\x0b\x90\x80\x80\x80\x00\x00\x02\x7f\x41\x06\x41\x00\x40\x00\x0d\x00\x1a\x41\x07\x0b\x0b\x8e\x80\x80\x80\x00\x00\x02\x40\x41\x00\x40\x00\x0e\x02\x00\x00\x00\x0b\x0b\x92\x80\x80\x80\x00\x00\x02\x7f\x41\x00\x40\x00\x41\x01\x0e\x02\x00\x00\x00\x41\x07\x0b\x0b\x91\x80\x80\x80\x00\x00\x02\x7f\x41\x06\x41\x00\x40\x00\x0e\x01\x00\x00\x41\x07\x0b\x0b\x87\x80\x80\x80\x00\x00\x41\x00\x40\x00\x0f\x0b\x8e\x80\x80\x80\x00\x00\x41\x00\x40\x00\x04\x7f\x41\x00\x05\x41\x01\x0b\x0b\x8e\x80\x80\x80\x00\x00\x41\x01\x04\x7f\x41\x00\x40\x00\x05\x41\x00\x0b\x0b\x8e\x80\x80\x80\x00\x00\x41\x00\x04\x7f\x41\x00\x05\x41\x00\x40\x00\x0b\x0b\x8b\x80\x80\x80\x00\x00\x41\x00\x40\x00\x20\x00\x20\x01\x1b\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x41\x00\x40\x00\x20\x01\x1b\x0b\x8b\x80\x80\x80\x00\x00\x41\x00\x41\x01\x41\x00\x40\x00\x1b\x0b\x84\x80\x80\x80\x00\x00\x41\x7f\x0b\x8c\x80\x80\x80\x00\x00\x41\x00\x40\x00\x41\x02\x41\x03\x10\x0e\x0b\x8c\x80\x80\x80\x00\x00\x41\x01\x41\x00\x40\x00\x41\x03\x10\x0e\x0b\x8c\x80\x80\x80\x00\x00\x41\x01\x41\x02\x41\x00\x40\x00\x10\x0e\x0b\x8f\x80\x80\x80\x00\x00\x41\x00\x40\x00\x41\x02\x41\x03\x41\x00\x11\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x41\x01\x41\x00\x40\x00\x41\x03\x41\x00\x11\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x41\x01\x41\x02\x41\x00\x40\x00\x41\x00\x11\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x41\x01\x41\x02\x41\x03\x41\x00\x40\x00\x11\x00\x00\x0b\x8a\x80\x80\x80\x00\x01\x01\x7f\x41\x00\x40\x00\x21\x00\x0b\x8a\x80\x80\x80\x00\x01\x01\x7f\x41\x00\x40\x00\x22\x00\x0b\x8a\x80\x80\x80\x00\x01\x01\x7f\x41\x00\x40\x00\x24\x00\x0b\x89\x80\x80\x80\x00\x00\x41\x00\x40\x00\x28\x02\x00\x0b\x89\x80\x80\x80\x00\x00\x41\x00\x40\x00\x2c\x00\x00\x0b\x8b\x80\x80\x80\x00\x00\x41\x00\x40\x00\x41\x07\x36\x02\x00\x0b\x8b\x80\x80\x80\x00\x00\x41\x02\x41\x00\x40\x00\x36\x02\x00\x0b\x8b\x80\x80\x80\x00\x00\x41\x00\x40\x00\x41\x07\x3a\x00\x00\x0b\x8b\x80\x80\x80\x00\x00\x41\x02\x41\x00\x40\x00\x3b\x01\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x00\x40\x00\x67\x0b\x89\x80\x80\x80\x00\x00\x41\x00\x40\x00\x41\x0a\x6a\x0b\x89\x80\x80\x80\x00\x00\x41\x0a\x41\x00\x40\x00\x6b\x0b\x87\x80\x80\x80\x00\x00\x41\x00\x40\x00\x45\x0b\x89\x80\x80\x80\x00\x00\x41\x00\x40\x00\x41\x0a\x4c\x0b\x89\x80\x80\x80\x00\x00\x41\x0a\x41\x00\x40\x00\x47\x0b\x88\x80\x80\x80\x00\x00\x41\x00\x40\x00\x40\x00\x0b", "memory_grow.wast:108");

// memory_grow.wast:108
let $5 = instance($$5);

// memory_grow.wast:266
assert_return(() => call($5, "as-br-value", []), "memory_grow.wast:266", 1);

// memory_grow.wast:268
assert_return(() => call($5, "as-br_if-cond", []), "memory_grow.wast:268");

// memory_grow.wast:269
assert_return(() => call($5, "as-br_if-value", []), "memory_grow.wast:269", 1);

// memory_grow.wast:270
assert_return(() => call($5, "as-br_if-value-cond", []), "memory_grow.wast:270", 6);

// memory_grow.wast:272
assert_return(() => call($5, "as-br_table-index", []), "memory_grow.wast:272");

// memory_grow.wast:273
assert_return(() => call($5, "as-br_table-value", []), "memory_grow.wast:273", 1);

// memory_grow.wast:274
assert_return(() => call($5, "as-br_table-value-index", []), "memory_grow.wast:274", 6);

// memory_grow.wast:276
assert_return(() => call($5, "as-return-value", []), "memory_grow.wast:276", 1);

// memory_grow.wast:278
assert_return(() => call($5, "as-if-cond", []), "memory_grow.wast:278", 0);

// memory_grow.wast:279
assert_return(() => call($5, "as-if-then", []), "memory_grow.wast:279", 1);

// memory_grow.wast:280
assert_return(() => call($5, "as-if-else", []), "memory_grow.wast:280", 1);

// memory_grow.wast:282
assert_return(() => call($5, "as-select-first", [0, 1]), "memory_grow.wast:282", 1);

// memory_grow.wast:283
assert_return(() => call($5, "as-select-second", [0, 0]), "memory_grow.wast:283", 1);

// memory_grow.wast:284
assert_return(() => call($5, "as-select-cond", []), "memory_grow.wast:284", 0);

// memory_grow.wast:286
assert_return(() => call($5, "as-call-first", []), "memory_grow.wast:286", -1);

// memory_grow.wast:287
assert_return(() => call($5, "as-call-mid", []), "memory_grow.wast:287", -1);

// memory_grow.wast:288
assert_return(() => call($5, "as-call-last", []), "memory_grow.wast:288", -1);

// memory_grow.wast:290
assert_return(() => call($5, "as-call_indirect-first", []), "memory_grow.wast:290", -1);

// memory_grow.wast:291
assert_return(() => call($5, "as-call_indirect-mid", []), "memory_grow.wast:291", -1);

// memory_grow.wast:292
assert_return(() => call($5, "as-call_indirect-last", []), "memory_grow.wast:292", -1);

// memory_grow.wast:293
assert_trap(() => call($5, "as-call_indirect-index", []), "memory_grow.wast:293");

// memory_grow.wast:295
assert_return(() => call($5, "as-local.set-value", []), "memory_grow.wast:295");

// memory_grow.wast:296
assert_return(() => call($5, "as-local.tee-value", []), "memory_grow.wast:296", 1);

// memory_grow.wast:297
assert_return(() => call($5, "as-global.set-value", []), "memory_grow.wast:297");

// memory_grow.wast:299
assert_return(() => call($5, "as-load-address", []), "memory_grow.wast:299", 0);

// memory_grow.wast:300
assert_return(() => call($5, "as-loadN-address", []), "memory_grow.wast:300", 0);

// memory_grow.wast:301
assert_return(() => call($5, "as-store-address", []), "memory_grow.wast:301");

// memory_grow.wast:302
assert_return(() => call($5, "as-store-value", []), "memory_grow.wast:302");

// memory_grow.wast:303
assert_return(() => call($5, "as-storeN-address", []), "memory_grow.wast:303");

// memory_grow.wast:304
assert_return(() => call($5, "as-storeN-value", []), "memory_grow.wast:304");

// memory_grow.wast:306
assert_return(() => call($5, "as-unary-operand", []), "memory_grow.wast:306", 31);

// memory_grow.wast:308
assert_return(() => call($5, "as-binary-left", []), "memory_grow.wast:308", 11);

// memory_grow.wast:309
assert_return(() => call($5, "as-binary-right", []), "memory_grow.wast:309", 9);

// memory_grow.wast:311
assert_return(() => call($5, "as-test-operand", []), "memory_grow.wast:311", 0);

// memory_grow.wast:313
assert_return(() => call($5, "as-compare-left", []), "memory_grow.wast:313", 1);

// memory_grow.wast:314
assert_return(() => call($5, "as-compare-right", []), "memory_grow.wast:314", 1);

// memory_grow.wast:316
assert_return(() => call($5, "as-memory.grow-size", []), "memory_grow.wast:316", 1);

// memory_grow.wast:318
let $$6 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x91\x80\x80\x80\x00\x02\x06\x6d\x65\x6d\x6f\x72\x79\x02\x00\x04\x67\x72\x6f\x77\x00\x00\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x41\x01\x40\x00\x0b", "memory_grow.wast:318");
let $Mgm = $$6;

// memory_grow.wast:318
let $6 = instance($Mgm);
let Mgm = $6;

// memory_grow.wast:322
register("grown-memory", Mgm)

// memory_grow.wast:323
assert_return(() => call(Mgm, "grow", []), "memory_grow.wast:323", 1);

// memory_grow.wast:324
let $$7 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x02\x98\x80\x80\x80\x00\x01\x0c\x67\x72\x6f\x77\x6e\x2d\x6d\x65\x6d\x6f\x72\x79\x06\x6d\x65\x6d\x6f\x72\x79\x02\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x91\x80\x80\x80\x00\x02\x06\x6d\x65\x6d\x6f\x72\x79\x02\x00\x04\x67\x72\x6f\x77\x00\x00\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x41\x01\x40\x00\x0b", "memory_grow.wast:324");
let $Mgim1 = $$7;

// memory_grow.wast:324
let $7 = instance($Mgim1);
let Mgim1 = $7;

// memory_grow.wast:329
register("grown-imported-memory", Mgim1)

// memory_grow.wast:330
assert_return(() => call(Mgim1, "grow", []), "memory_grow.wast:330", 2);

// memory_grow.wast:331
let $$8 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x02\xa1\x80\x80\x80\x00\x01\x15\x67\x72\x6f\x77\x6e\x2d\x69\x6d\x70\x6f\x72\x74\x65\x64\x2d\x6d\x65\x6d\x6f\x72\x79\x06\x6d\x65\x6d\x6f\x72\x79\x02\x00\x03\x03\x82\x80\x80\x80\x00\x01\x00\x07\x88\x80\x80\x80\x00\x01\x04\x73\x69\x7a\x65\x00\x00\x0a\x8a\x80\x80\x80\x00\x01\x84\x80\x80\x80\x00\x00\x3f\x00\x0b", "memory_grow.wast:331");
let $Mgim2 = $$8;

// memory_grow.wast:331
let $8 = instance($Mgim2);
let Mgim2 = $8;

// memory_grow.wast:336
assert_return(() => call(Mgim2, "size", []), "memory_grow.wast:336", 3);

// memory_grow.wast:341
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x43\x00\x00\x00\x00\x40\x00\x0b", "memory_grow.wast:341");

// memory_grow.wast:350
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x00\x0a\x8a\x80\x80\x80\x00\x01\x84\x80\x80\x80\x00\x00\x40\x00\x0b", "memory_grow.wast:350");

// memory_grow.wast:359
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x00\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x41\x00\x02\x7f\x40\x00\x0b\x0b", "memory_grow.wast:359");

// memory_grow.wast:369
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x00\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x41\x00\x03\x7f\x40\x00\x0b\x0b", "memory_grow.wast:369");

// memory_grow.wast:379
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x00\x0a\x91\x80\x80\x80\x00\x01\x8b\x80\x80\x80\x00\x00\x41\x00\x41\x00\x04\x7f\x40\x00\x0b\x0b", "memory_grow.wast:379");

// memory_grow.wast:390
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x41\x01\x40\x00\x0b", "memory_grow.wast:390");

// memory_grow.wast:399
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x43\x00\x00\x00\x00\x40\x00\x0b", "memory_grow.wast:399");

// memory_grow.wast:409
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x41\x00\x40\x00\x0b", "memory_grow.wast:409");

// memory_grow.wast:418
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7d\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x41\x00\x40\x00\x0b", "memory_grow.wast:418");
reinitializeRegistry();
})();

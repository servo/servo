(function return_wast_js() {

// return.wast:3
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xa1\x80\x80\x80\x00\x07\x60\x03\x7f\x7f\x7f\x01\x7f\x60\x00\x00\x60\x00\x01\x7f\x60\x00\x01\x7e\x60\x00\x01\x7d\x60\x00\x01\x7c\x60\x02\x7f\x7f\x01\x7f\x03\xbe\x80\x80\x80\x00\x3d\x01\x01\x01\x01\x01\x02\x03\x04\x05\x01\x05\x02\x02\x01\x02\x01\x01\x01\x02\x02\x02\x02\x02\x01\x02\x02\x03\x02\x02\x03\x02\x06\x06\x06\x06\x02\x00\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x04\x03\x02\x02\x02\x02\x04\x02\x03\x02\x02\x02\x02\x02\x04\x85\x80\x80\x80\x00\x01\x70\x01\x01\x01\x05\x83\x80\x80\x80\x00\x01\x00\x01\x06\x86\x80\x80\x80\x00\x01\x7f\x01\x41\x00\x0b\x07\xf8\x87\x80\x80\x00\x3b\x08\x74\x79\x70\x65\x2d\x69\x33\x32\x00\x01\x08\x74\x79\x70\x65\x2d\x69\x36\x34\x00\x02\x08\x74\x79\x70\x65\x2d\x66\x33\x32\x00\x03\x08\x74\x79\x70\x65\x2d\x66\x36\x34\x00\x04\x0e\x74\x79\x70\x65\x2d\x69\x33\x32\x2d\x76\x61\x6c\x75\x65\x00\x05\x0e\x74\x79\x70\x65\x2d\x69\x36\x34\x2d\x76\x61\x6c\x75\x65\x00\x06\x0e\x74\x79\x70\x65\x2d\x66\x33\x32\x2d\x76\x61\x6c\x75\x65\x00\x07\x0e\x74\x79\x70\x65\x2d\x66\x36\x34\x2d\x76\x61\x6c\x75\x65\x00\x08\x07\x6e\x75\x6c\x6c\x61\x72\x79\x00\x09\x05\x75\x6e\x61\x72\x79\x00\x0a\x0d\x61\x73\x2d\x66\x75\x6e\x63\x2d\x66\x69\x72\x73\x74\x00\x0b\x0b\x61\x73\x2d\x66\x75\x6e\x63\x2d\x6d\x69\x64\x00\x0c\x0c\x61\x73\x2d\x66\x75\x6e\x63\x2d\x6c\x61\x73\x74\x00\x0d\x0d\x61\x73\x2d\x66\x75\x6e\x63\x2d\x76\x61\x6c\x75\x65\x00\x0e\x0e\x61\x73\x2d\x62\x6c\x6f\x63\x6b\x2d\x66\x69\x72\x73\x74\x00\x0f\x0c\x61\x73\x2d\x62\x6c\x6f\x63\x6b\x2d\x6d\x69\x64\x00\x10\x0d\x61\x73\x2d\x62\x6c\x6f\x63\x6b\x2d\x6c\x61\x73\x74\x00\x11\x0e\x61\x73\x2d\x62\x6c\x6f\x63\x6b\x2d\x76\x61\x6c\x75\x65\x00\x12\x0d\x61\x73\x2d\x6c\x6f\x6f\x70\x2d\x66\x69\x72\x73\x74\x00\x13\x0b\x61\x73\x2d\x6c\x6f\x6f\x70\x2d\x6d\x69\x64\x00\x14\x0c\x61\x73\x2d\x6c\x6f\x6f\x70\x2d\x6c\x61\x73\x74\x00\x15\x0b\x61\x73\x2d\x62\x72\x2d\x76\x61\x6c\x75\x65\x00\x16\x0d\x61\x73\x2d\x62\x72\x5f\x69\x66\x2d\x63\x6f\x6e\x64\x00\x17\x0e\x61\x73\x2d\x62\x72\x5f\x69\x66\x2d\x76\x61\x6c\x75\x65\x00\x18\x13\x61\x73\x2d\x62\x72\x5f\x69\x66\x2d\x76\x61\x6c\x75\x65\x2d\x63\x6f\x6e\x64\x00\x19\x11\x61\x73\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x69\x6e\x64\x65\x78\x00\x1a\x11\x61\x73\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x76\x61\x6c\x75\x65\x00\x1b\x17\x61\x73\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x76\x61\x6c\x75\x65\x2d\x69\x6e\x64\x65\x78\x00\x1c\x0f\x61\x73\x2d\x72\x65\x74\x75\x72\x6e\x2d\x76\x61\x6c\x75\x65\x00\x1d\x0a\x61\x73\x2d\x69\x66\x2d\x63\x6f\x6e\x64\x00\x1e\x0a\x61\x73\x2d\x69\x66\x2d\x74\x68\x65\x6e\x00\x1f\x0a\x61\x73\x2d\x69\x66\x2d\x65\x6c\x73\x65\x00\x20\x0f\x61\x73\x2d\x73\x65\x6c\x65\x63\x74\x2d\x66\x69\x72\x73\x74\x00\x21\x10\x61\x73\x2d\x73\x65\x6c\x65\x63\x74\x2d\x73\x65\x63\x6f\x6e\x64\x00\x22\x0e\x61\x73\x2d\x73\x65\x6c\x65\x63\x74\x2d\x63\x6f\x6e\x64\x00\x23\x0d\x61\x73\x2d\x63\x61\x6c\x6c\x2d\x66\x69\x72\x73\x74\x00\x25\x0b\x61\x73\x2d\x63\x61\x6c\x6c\x2d\x6d\x69\x64\x00\x26\x0c\x61\x73\x2d\x63\x61\x6c\x6c\x2d\x6c\x61\x73\x74\x00\x27\x15\x61\x73\x2d\x63\x61\x6c\x6c\x5f\x69\x6e\x64\x69\x72\x65\x63\x74\x2d\x66\x75\x6e\x63\x00\x28\x16\x61\x73\x2d\x63\x61\x6c\x6c\x5f\x69\x6e\x64\x69\x72\x65\x63\x74\x2d\x66\x69\x72\x73\x74\x00\x29\x14\x61\x73\x2d\x63\x61\x6c\x6c\x5f\x69\x6e\x64\x69\x72\x65\x63\x74\x2d\x6d\x69\x64\x00\x2a\x15\x61\x73\x2d\x63\x61\x6c\x6c\x5f\x69\x6e\x64\x69\x72\x65\x63\x74\x2d\x6c\x61\x73\x74\x00\x2b\x12\x61\x73\x2d\x6c\x6f\x63\x61\x6c\x2e\x73\x65\x74\x2d\x76\x61\x6c\x75\x65\x00\x2c\x12\x61\x73\x2d\x6c\x6f\x63\x61\x6c\x2e\x74\x65\x65\x2d\x76\x61\x6c\x75\x65\x00\x2d\x13\x61\x73\x2d\x67\x6c\x6f\x62\x61\x6c\x2e\x73\x65\x74\x2d\x76\x61\x6c\x75\x65\x00\x2e\x0f\x61\x73\x2d\x6c\x6f\x61\x64\x2d\x61\x64\x64\x72\x65\x73\x73\x00\x2f\x10\x61\x73\x2d\x6c\x6f\x61\x64\x4e\x2d\x61\x64\x64\x72\x65\x73\x73\x00\x30\x10\x61\x73\x2d\x73\x74\x6f\x72\x65\x2d\x61\x64\x64\x72\x65\x73\x73\x00\x31\x0e\x61\x73\x2d\x73\x74\x6f\x72\x65\x2d\x76\x61\x6c\x75\x65\x00\x32\x11\x61\x73\x2d\x73\x74\x6f\x72\x65\x4e\x2d\x61\x64\x64\x72\x65\x73\x73\x00\x33\x0f\x61\x73\x2d\x73\x74\x6f\x72\x65\x4e\x2d\x76\x61\x6c\x75\x65\x00\x34\x10\x61\x73\x2d\x75\x6e\x61\x72\x79\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x35\x0e\x61\x73\x2d\x62\x69\x6e\x61\x72\x79\x2d\x6c\x65\x66\x74\x00\x36\x0f\x61\x73\x2d\x62\x69\x6e\x61\x72\x79\x2d\x72\x69\x67\x68\x74\x00\x37\x0f\x61\x73\x2d\x74\x65\x73\x74\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x38\x0f\x61\x73\x2d\x63\x6f\x6d\x70\x61\x72\x65\x2d\x6c\x65\x66\x74\x00\x39\x10\x61\x73\x2d\x63\x6f\x6d\x70\x61\x72\x65\x2d\x72\x69\x67\x68\x74\x00\x3a\x12\x61\x73\x2d\x63\x6f\x6e\x76\x65\x72\x74\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x3b\x13\x61\x73\x2d\x6d\x65\x6d\x6f\x72\x79\x2e\x67\x72\x6f\x77\x2d\x73\x69\x7a\x65\x00\x3c\x09\x89\x80\x80\x80\x00\x01\x04\x41\x00\x0b\x01\xd2\x24\x0b\x0a\x9d\x87\x80\x80\x00\x3d\x82\x80\x80\x80\x00\x00\x0b\x85\x80\x80\x80\x00\x00\x0f\x68\x1a\x0b\x85\x80\x80\x80\x00\x00\x0f\x7a\x1a\x0b\x85\x80\x80\x80\x00\x00\x0f\x8c\x1a\x0b\x85\x80\x80\x80\x00\x00\x0f\x9a\x1a\x0b\x89\x80\x80\x80\x00\x00\x02\x7f\x41\x01\x0f\x68\x0b\x0b\x89\x80\x80\x80\x00\x00\x02\x7e\x42\x02\x0f\x7a\x0b\x0b\x8c\x80\x80\x80\x00\x00\x02\x7d\x43\x00\x00\x40\x40\x0f\x8c\x0b\x0b\x90\x80\x80\x80\x00\x00\x02\x7c\x44\x00\x00\x00\x00\x00\x00\x10\x40\x0f\x9a\x0b\x0b\x83\x80\x80\x80\x00\x00\x0f\x0b\x8c\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\x08\x40\x0f\x0b\x87\x80\x80\x80\x00\x00\x41\x01\x0f\x41\x02\x0b\x89\x80\x80\x80\x00\x00\x10\x00\x41\x02\x0f\x41\x03\x0b\x86\x80\x80\x80\x00\x00\x01\x10\x00\x0f\x0b\x88\x80\x80\x80\x00\x00\x01\x10\x00\x41\x03\x0f\x0b\x88\x80\x80\x80\x00\x00\x02\x40\x0f\x10\x00\x0b\x0b\x8a\x80\x80\x80\x00\x00\x02\x40\x10\x00\x0f\x10\x00\x0b\x0b\x89\x80\x80\x80\x00\x00\x02\x40\x01\x10\x00\x0f\x0b\x0b\x8b\x80\x80\x80\x00\x00\x02\x7f\x01\x10\x00\x41\x02\x0f\x0b\x0b\x8a\x80\x80\x80\x00\x00\x03\x7f\x41\x03\x0f\x41\x02\x0b\x0b\x8c\x80\x80\x80\x00\x00\x03\x7f\x10\x00\x41\x04\x0f\x41\x02\x0b\x0b\x8b\x80\x80\x80\x00\x00\x03\x7f\x01\x10\x00\x41\x05\x0f\x0b\x0b\x8a\x80\x80\x80\x00\x00\x02\x7f\x41\x09\x0f\x0c\x00\x0b\x0b\x88\x80\x80\x80\x00\x00\x02\x40\x0f\x0d\x00\x0b\x0b\x8f\x80\x80\x80\x00\x00\x02\x7f\x41\x08\x0f\x41\x01\x0d\x00\x1a\x41\x07\x0b\x0b\x8f\x80\x80\x80\x00\x00\x02\x7f\x41\x06\x41\x09\x0f\x0d\x00\x1a\x41\x07\x0b\x0b\x8f\x80\x80\x80\x00\x00\x02\x40\x42\x09\x0f\x0e\x02\x00\x00\x00\x0b\x42\x7f\x0b\x91\x80\x80\x80\x00\x00\x02\x7f\x41\x0a\x0f\x41\x01\x0e\x02\x00\x00\x00\x41\x07\x0b\x0b\x90\x80\x80\x80\x00\x00\x02\x7f\x41\x06\x41\x0b\x0f\x0e\x01\x00\x00\x41\x07\x0b\x0b\x86\x80\x80\x80\x00\x00\x42\x07\x0f\x0f\x0b\x8d\x80\x80\x80\x00\x00\x41\x02\x0f\x04\x7f\x41\x00\x05\x41\x01\x0b\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\x04\x7f\x41\x03\x0f\x05\x20\x01\x0b\x0b\x8d\x80\x80\x80\x00\x00\x20\x00\x04\x7f\x20\x01\x05\x41\x04\x0f\x0b\x0b\x8a\x80\x80\x80\x00\x00\x41\x05\x0f\x20\x00\x20\x01\x1b\x0b\x8a\x80\x80\x80\x00\x00\x20\x00\x41\x06\x0f\x20\x01\x1b\x0b\x8a\x80\x80\x80\x00\x00\x41\x00\x41\x01\x41\x07\x0f\x1b\x0b\x84\x80\x80\x80\x00\x00\x41\x7f\x0b\x8b\x80\x80\x80\x00\x00\x41\x0c\x0f\x41\x02\x41\x03\x10\x24\x0b\x8b\x80\x80\x80\x00\x00\x41\x01\x41\x0d\x0f\x41\x03\x10\x24\x0b\x8b\x80\x80\x80\x00\x00\x41\x01\x41\x02\x41\x0e\x0f\x10\x24\x0b\x8e\x80\x80\x80\x00\x00\x41\x14\x0f\x41\x01\x41\x02\x41\x03\x11\x00\x00\x0b\x8e\x80\x80\x80\x00\x00\x41\x00\x41\x15\x0f\x41\x02\x41\x03\x11\x00\x00\x0b\x8e\x80\x80\x80\x00\x00\x41\x00\x41\x01\x41\x16\x0f\x41\x03\x11\x00\x00\x0b\x8e\x80\x80\x80\x00\x00\x41\x00\x41\x01\x41\x02\x41\x17\x0f\x11\x00\x00\x0b\x8b\x80\x80\x80\x00\x01\x01\x7d\x41\x11\x0f\x21\x00\x41\x7f\x0b\x89\x80\x80\x80\x00\x01\x01\x7f\x41\x01\x0f\x22\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x01\x0f\x24\x00\x0b\x8b\x80\x80\x80\x00\x00\x43\x9a\x99\xd9\x3f\x0f\x2a\x02\x00\x0b\x88\x80\x80\x80\x00\x00\x42\x1e\x0f\x30\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x41\x1e\x0f\x44\x00\x00\x00\x00\x00\x00\x1c\x40\x39\x03\x00\x41\x7f\x0b\x8c\x80\x80\x80\x00\x00\x41\x02\x41\x1f\x0f\x37\x03\x00\x41\x7f\x0b\x8c\x80\x80\x80\x00\x00\x41\x20\x0f\x41\x07\x3a\x00\x00\x41\x7f\x0b\x8c\x80\x80\x80\x00\x00\x41\x02\x41\x21\x0f\x3d\x01\x00\x41\x7f\x0b\x89\x80\x80\x80\x00\x00\x43\x9a\x99\x59\x40\x0f\x8c\x0b\x88\x80\x80\x80\x00\x00\x41\x03\x0f\x41\x0a\x6a\x0b\x88\x80\x80\x80\x00\x00\x42\x0a\x42\x2d\x0f\x7d\x0b\x86\x80\x80\x80\x00\x00\x41\x2c\x0f\x45\x0b\x8f\x80\x80\x80\x00\x00\x41\x2b\x0f\x44\x00\x00\x00\x00\x00\x00\x24\x40\x65\x0b\x8b\x80\x80\x80\x00\x00\x43\x00\x00\x20\x41\x41\x2a\x0f\x5c\x0b\x86\x80\x80\x80\x00\x00\x41\x29\x0f\xa7\x0b\x87\x80\x80\x80\x00\x00\x41\x28\x0f\x40\x00\x0b", "return.wast:3");

// return.wast:3
let $1 = instance($$1);

// return.wast:224
assert_return(() => call($1, "type-i32", []), "return.wast:224");

// return.wast:225
assert_return(() => call($1, "type-i64", []), "return.wast:225");

// return.wast:226
assert_return(() => call($1, "type-f32", []), "return.wast:226");

// return.wast:227
assert_return(() => call($1, "type-f64", []), "return.wast:227");

// return.wast:229
assert_return(() => call($1, "type-i32-value", []), "return.wast:229", 1);

// return.wast:230
assert_return(() => call($1, "type-i64-value", []), "return.wast:230", 2n);

// return.wast:231
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xbe\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0e\x74\x79\x70\x65\x2d\x66\x33\x32\x2d\x76\x61\x6c\x75\x65\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x00\x40\x40\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return.wast:231");  // assert_return(() => call($1, "type-f32-value", []), "return.wast:231", 3.)

// return.wast:232
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xbe\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0e\x74\x79\x70\x65\x2d\x66\x36\x34\x2d\x76\x61\x6c\x75\x65\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x10\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return.wast:232");  // assert_return(() => call($1, "type-f64-value", []), "return.wast:232", 4.)

// return.wast:234
assert_return(() => call($1, "nullary", []), "return.wast:234");

// return.wast:235
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb5\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x05\x75\x6e\x61\x72\x79\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x08\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return.wast:235");  // assert_return(() => call($1, "unary", []), "return.wast:235", 3.)

// return.wast:237
assert_return(() => call($1, "as-func-first", []), "return.wast:237", 1);

// return.wast:238
assert_return(() => call($1, "as-func-mid", []), "return.wast:238", 2);

// return.wast:239
assert_return(() => call($1, "as-func-last", []), "return.wast:239");

// return.wast:240
assert_return(() => call($1, "as-func-value", []), "return.wast:240", 3);

// return.wast:242
assert_return(() => call($1, "as-block-first", []), "return.wast:242");

// return.wast:243
assert_return(() => call($1, "as-block-mid", []), "return.wast:243");

// return.wast:244
assert_return(() => call($1, "as-block-last", []), "return.wast:244");

// return.wast:245
assert_return(() => call($1, "as-block-value", []), "return.wast:245", 2);

// return.wast:247
assert_return(() => call($1, "as-loop-first", []), "return.wast:247", 3);

// return.wast:248
assert_return(() => call($1, "as-loop-mid", []), "return.wast:248", 4);

// return.wast:249
assert_return(() => call($1, "as-loop-last", []), "return.wast:249", 5);

// return.wast:251
assert_return(() => call($1, "as-br-value", []), "return.wast:251", 9);

// return.wast:253
assert_return(() => call($1, "as-br_if-cond", []), "return.wast:253");

// return.wast:254
assert_return(() => call($1, "as-br_if-value", []), "return.wast:254", 8);

// return.wast:255
assert_return(() => call($1, "as-br_if-value-cond", []), "return.wast:255", 9);

// return.wast:257
assert_return(() => call($1, "as-br_table-index", []), "return.wast:257", 9n);

// return.wast:258
assert_return(() => call($1, "as-br_table-value", []), "return.wast:258", 10);

// return.wast:259
assert_return(() => call($1, "as-br_table-value-index", []), "return.wast:259", 11);

// return.wast:261
assert_return(() => call($1, "as-return-value", []), "return.wast:261", 7n);

// return.wast:263
assert_return(() => call($1, "as-if-cond", []), "return.wast:263", 2);

// return.wast:264
assert_return(() => call($1, "as-if-then", [1, 6]), "return.wast:264", 3);

// return.wast:265
assert_return(() => call($1, "as-if-then", [0, 6]), "return.wast:265", 6);

// return.wast:266
assert_return(() => call($1, "as-if-else", [0, 6]), "return.wast:266", 4);

// return.wast:267
assert_return(() => call($1, "as-if-else", [1, 6]), "return.wast:267", 6);

// return.wast:269
assert_return(() => call($1, "as-select-first", [0, 6]), "return.wast:269", 5);

// return.wast:270
assert_return(() => call($1, "as-select-first", [1, 6]), "return.wast:270", 5);

// return.wast:271
assert_return(() => call($1, "as-select-second", [0, 6]), "return.wast:271", 6);

// return.wast:272
assert_return(() => call($1, "as-select-second", [1, 6]), "return.wast:272", 6);

// return.wast:273
assert_return(() => call($1, "as-select-cond", []), "return.wast:273", 7);

// return.wast:275
assert_return(() => call($1, "as-call-first", []), "return.wast:275", 12);

// return.wast:276
assert_return(() => call($1, "as-call-mid", []), "return.wast:276", 13);

// return.wast:277
assert_return(() => call($1, "as-call-last", []), "return.wast:277", 14);

// return.wast:279
assert_return(() => call($1, "as-call_indirect-func", []), "return.wast:279", 20);

// return.wast:280
assert_return(() => call($1, "as-call_indirect-first", []), "return.wast:280", 21);

// return.wast:281
assert_return(() => call($1, "as-call_indirect-mid", []), "return.wast:281", 22);

// return.wast:282
assert_return(() => call($1, "as-call_indirect-last", []), "return.wast:282", 23);

// return.wast:284
assert_return(() => call($1, "as-local.set-value", []), "return.wast:284", 17);

// return.wast:285
assert_return(() => call($1, "as-local.tee-value", []), "return.wast:285", 1);

// return.wast:286
assert_return(() => call($1, "as-global.set-value", []), "return.wast:286", 1);

// return.wast:288
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xbf\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0f\x61\x73\x2d\x6c\x6f\x61\x64\x2d\x61\x64\x64\x72\x65\x73\x73\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x9a\x99\xd9\x3f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return.wast:288");  // assert_return(() => call($1, "as-load-address", []), "return.wast:288", 1.70000004768)

// return.wast:289
assert_return(() => call($1, "as-loadN-address", []), "return.wast:289", 30n);

// return.wast:291
assert_return(() => call($1, "as-store-address", []), "return.wast:291", 30);

// return.wast:292
assert_return(() => call($1, "as-store-value", []), "return.wast:292", 31);

// return.wast:293
assert_return(() => call($1, "as-storeN-address", []), "return.wast:293", 32);

// return.wast:294
assert_return(() => call($1, "as-storeN-value", []), "return.wast:294", 33);

// return.wast:296
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xc0\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x10\x61\x73\x2d\x75\x6e\x61\x72\x79\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x9a\x99\x59\x40\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return.wast:296");  // assert_return(() => call($1, "as-unary-operand", []), "return.wast:296", 3.40000009537)

// return.wast:298
assert_return(() => call($1, "as-binary-left", []), "return.wast:298", 3);

// return.wast:299
assert_return(() => call($1, "as-binary-right", []), "return.wast:299", 45n);

// return.wast:301
assert_return(() => call($1, "as-test-operand", []), "return.wast:301", 44);

// return.wast:303
assert_return(() => call($1, "as-compare-left", []), "return.wast:303", 43);

// return.wast:304
assert_return(() => call($1, "as-compare-right", []), "return.wast:304", 42);

// return.wast:306
assert_return(() => call($1, "as-convert-operand", []), "return.wast:306", 41);

// return.wast:308
assert_return(() => call($1, "as-memory.grow-size", []), "return.wast:308", 40);

// return.wast:310
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x89\x80\x80\x80\x00\x01\x83\x80\x80\x80\x00\x00\x0f\x0b", "return.wast:310");

// return.wast:314
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8e\x80\x80\x80\x00\x01\x88\x80\x80\x80\x00\x00\x41\x00\x02\x40\x0f\x0b\x0b", "return.wast:314");

// return.wast:323
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8e\x80\x80\x80\x00\x01\x88\x80\x80\x80\x00\x00\x41\x00\x03\x40\x0f\x0b\x0b", "return.wast:323");

// return.wast:332
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x90\x80\x80\x80\x00\x01\x8a\x80\x80\x80\x00\x00\x41\x00\x41\x00\x04\x40\x0f\x0b\x0b", "return.wast:332");

// return.wast:341
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x94\x80\x80\x80\x00\x01\x8e\x80\x80\x80\x00\x00\x41\x00\x41\x00\x04\x7f\x41\x00\x05\x0f\x0b\x1a\x0b", "return.wast:341");

// return.wast:350
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x90\x80\x80\x80\x00\x01\x8a\x80\x80\x80\x00\x00\x41\x00\x02\x40\x0f\x0c\x00\x0b\x0b", "return.wast:350");

// return.wast:359
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x00\x02\x40\x0f\x41\x01\x0d\x00\x0b\x0b", "return.wast:359");

// return.wast:368
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x91\x80\x80\x80\x00\x01\x8b\x80\x80\x80\x00\x00\x41\x00\x02\x40\x0f\x0e\x00\x00\x0b\x0b", "return.wast:368");

// return.wast:377
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8a\x80\x80\x80\x00\x01\x84\x80\x80\x80\x00\x00\x0f\x0f\x0b", "return.wast:377");

// return.wast:385
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8e\x80\x80\x80\x00\x01\x88\x80\x80\x80\x00\x00\x0f\x41\x01\x41\x02\x1b\x0b", "return.wast:385");

// return.wast:393
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x03\x83\x80\x80\x80\x00\x02\x00\x01\x0a\x94\x80\x80\x80\x00\x02\x85\x80\x80\x80\x00\x00\x0f\x10\x01\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b", "return.wast:393");

// return.wast:402
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x01\x7f\x01\x7f\x60\x00\x01\x7f\x03\x83\x80\x80\x80\x00\x02\x00\x01\x04\x85\x80\x80\x80\x00\x01\x70\x01\x01\x01\x09\x89\x80\x80\x80\x00\x01\x04\x41\x00\x0b\x01\xd2\x00\x0b\x0a\x9a\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x8b\x80\x80\x80\x00\x00\x02\x7f\x0f\x41\x00\x11\x00\x00\x0b\x0b", "return.wast:402");

// return.wast:417
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x01\x01\x7f\x0f\x21\x00\x20\x00\x0b", "return.wast:417");

// return.wast:426
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x01\x01\x7f\x0f\x22\x00\x0b", "return.wast:426");

// return.wast:435
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x06\x86\x80\x80\x80\x00\x01\x7f\x01\x41\x00\x0b\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x0f\x24\x00\x23\x00\x0b", "return.wast:435");

// return.wast:444
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x00\x0a\x8b\x80\x80\x80\x00\x01\x85\x80\x80\x80\x00\x00\x0f\x40\x00\x0b", "return.wast:444");

// return.wast:453
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x00\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x0f\x28\x02\x00\x0b", "return.wast:453");

// return.wast:462
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8e\x80\x80\x80\x00\x01\x88\x80\x80\x80\x00\x00\x0f\x41\x01\x36\x02\x00\x0b", "return.wast:462");

// return.wast:471
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7c\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8a\x80\x80\x80\x00\x01\x84\x80\x80\x80\x00\x00\x01\x0f\x0b", "return.wast:471");

// return.wast:475
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7c\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8b\x80\x80\x80\x00\x01\x85\x80\x80\x80\x00\x00\x42\x01\x0f\x0b", "return.wast:475");
reinitializeRegistry();
})();

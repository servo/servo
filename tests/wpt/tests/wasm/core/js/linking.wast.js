(function linking_wast_js() {

// linking.wast:3
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x83\x80\x80\x80\x00\x02\x00\x00\x07\x88\x80\x80\x80\x00\x01\x04\x63\x61\x6c\x6c\x00\x00\x0a\x93\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x10\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b", "linking.wast:3");
let $Mf = $$1;

// linking.wast:3
let $1 = instance($Mf);
let Mf = $1;

// linking.wast:7
register("Mf", Mf)

// linking.wast:9
let $$2 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x02\x8b\x80\x80\x80\x00\x01\x02\x4d\x66\x04\x63\x61\x6c\x6c\x00\x00\x03\x84\x80\x80\x80\x00\x03\x00\x00\x00\x07\xa1\x80\x80\x80\x00\x03\x07\x4d\x66\x2e\x63\x61\x6c\x6c\x00\x00\x0c\x63\x61\x6c\x6c\x20\x4d\x66\x2e\x63\x61\x6c\x6c\x00\x01\x04\x63\x61\x6c\x6c\x00\x02\x0a\x9c\x80\x80\x80\x00\x03\x84\x80\x80\x80\x00\x00\x10\x00\x0b\x84\x80\x80\x80\x00\x00\x10\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b", "linking.wast:9");
let $Nf = $$2;

// linking.wast:9
let $2 = instance($Nf);
let Nf = $2;

// linking.wast:17
assert_return(() => call(Mf, "call", []), "linking.wast:17", 2);

// linking.wast:18
assert_return(() => call(Nf, "Mf.call", []), "linking.wast:18", 2);

// linking.wast:19
assert_return(() => call(Nf, "call", []), "linking.wast:19", 3);

// linking.wast:20
assert_return(() => call(Nf, "call Mf.call", []), "linking.wast:20", 2);

// linking.wast:22
let $$3 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x01\x7f\x00\x02\x96\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x00\x07\x89\x80\x80\x80\x00\x01\x05\x70\x72\x69\x6e\x74\x00\x00", "linking.wast:22");

// linking.wast:22
let $3 = instance($$3);

// linking.wast:26
register("reexport_f", $3)

// linking.wast:28
let $$4 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x01\x7e\x00\x02\x94\x80\x80\x80\x00\x01\x0a\x72\x65\x65\x78\x70\x6f\x72\x74\x5f\x66\x05\x70\x72\x69\x6e\x74\x00\x00", "linking.wast:28");

// linking.wast:27
assert_unlinkable($$4);

// linking.wast:32
let $$5 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x02\x94\x80\x80\x80\x00\x01\x0a\x72\x65\x65\x78\x70\x6f\x72\x74\x5f\x66\x05\x70\x72\x69\x6e\x74\x00\x00", "linking.wast:32");

// linking.wast:31
assert_unlinkable($$5);

// linking.wast:39
let $$6 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x01\x7f\x00\x03\x84\x80\x80\x80\x00\x03\x00\x00\x01\x06\x8c\x80\x80\x80\x00\x02\x7f\x00\x41\x2a\x0b\x7f\x01\x41\x8e\x01\x0b\x07\xad\x80\x80\x80\x00\x05\x04\x67\x6c\x6f\x62\x03\x00\x03\x67\x65\x74\x00\x00\x08\x6d\x75\x74\x5f\x67\x6c\x6f\x62\x03\x01\x07\x67\x65\x74\x5f\x6d\x75\x74\x00\x01\x07\x73\x65\x74\x5f\x6d\x75\x74\x00\x02\x0a\x9e\x80\x80\x80\x00\x03\x84\x80\x80\x80\x00\x00\x23\x00\x0b\x84\x80\x80\x80\x00\x00\x23\x01\x0b\x86\x80\x80\x80\x00\x00\x20\x00\x24\x01\x0b", "linking.wast:39");
let $Mg = $$6;

// linking.wast:39
let $4 = instance($Mg);
let Mg = $4;

// linking.wast:48
register("Mg", Mg)

// linking.wast:50
let $$7 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x01\x7f\x00\x02\xbe\x80\x80\x80\x00\x05\x02\x4d\x67\x04\x67\x6c\x6f\x62\x03\x7f\x00\x02\x4d\x67\x08\x6d\x75\x74\x5f\x67\x6c\x6f\x62\x03\x7f\x01\x02\x4d\x67\x03\x67\x65\x74\x00\x00\x02\x4d\x67\x07\x67\x65\x74\x5f\x6d\x75\x74\x00\x00\x02\x4d\x67\x07\x73\x65\x74\x5f\x6d\x75\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x06\x86\x80\x80\x80\x00\x01\x7f\x00\x41\x2b\x0b\x07\xc9\x80\x80\x80\x00\x07\x07\x4d\x67\x2e\x67\x6c\x6f\x62\x03\x00\x06\x4d\x67\x2e\x67\x65\x74\x00\x00\x04\x67\x6c\x6f\x62\x03\x02\x03\x67\x65\x74\x00\x03\x0b\x4d\x67\x2e\x6d\x75\x74\x5f\x67\x6c\x6f\x62\x03\x01\x0a\x4d\x67\x2e\x67\x65\x74\x5f\x6d\x75\x74\x00\x01\x0a\x4d\x67\x2e\x73\x65\x74\x5f\x6d\x75\x74\x00\x02\x0a\x8a\x80\x80\x80\x00\x01\x84\x80\x80\x80\x00\x00\x23\x02\x0b", "linking.wast:50");
let $Ng = $$7;

// linking.wast:50
let $5 = instance($Ng);
let Ng = $5;

// linking.wast:67
assert_return(() => get(Mg, "glob"), "linking.wast:67", 42);

// linking.wast:68
assert_return(() => get(Ng, "Mg.glob"), "linking.wast:68", 42);

// linking.wast:69
assert_return(() => get(Ng, "glob"), "linking.wast:69", 43);

// linking.wast:70
assert_return(() => call(Mg, "get", []), "linking.wast:70", 42);

// linking.wast:71
assert_return(() => call(Ng, "Mg.get", []), "linking.wast:71", 42);

// linking.wast:72
assert_return(() => call(Ng, "get", []), "linking.wast:72", 43);

// linking.wast:74
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x02\xb9\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x6d\x75\x74\x5f\x67\x6c\x6f\x62\x03\x7f\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x02\x0a\x98\x80\x80\x80\x00\x01\x92\x80\x80\x80\x00\x00\x02\x40\x23\x00\x01\x41\x8e\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports(Mg)),  "run", []), "linking.wast:74");  // assert_return(() => get(Mg, "mut_glob"), "linking.wast:74", 142)

// linking.wast:75
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x02\xbc\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0b\x4d\x67\x2e\x6d\x75\x74\x5f\x67\x6c\x6f\x62\x03\x7f\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x02\x0a\x98\x80\x80\x80\x00\x01\x92\x80\x80\x80\x00\x00\x02\x40\x23\x00\x01\x41\x8e\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports(Ng)),  "run", []), "linking.wast:75");  // assert_return(() => get(Ng, "Mg.mut_glob"), "linking.wast:75", 142)

// linking.wast:76
assert_return(() => call(Mg, "get_mut", []), "linking.wast:76", 142);

// linking.wast:77
assert_return(() => call(Ng, "Mg.get_mut", []), "linking.wast:77", 142);

// linking.wast:79
assert_return(() => call(Mg, "set_mut", [241]), "linking.wast:79");

// linking.wast:80
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x02\xb9\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x6d\x75\x74\x5f\x67\x6c\x6f\x62\x03\x7f\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x02\x0a\x98\x80\x80\x80\x00\x01\x92\x80\x80\x80\x00\x00\x02\x40\x23\x00\x01\x41\xf1\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports(Mg)),  "run", []), "linking.wast:80");  // assert_return(() => get(Mg, "mut_glob"), "linking.wast:80", 241)

// linking.wast:81
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x02\xbc\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0b\x4d\x67\x2e\x6d\x75\x74\x5f\x67\x6c\x6f\x62\x03\x7f\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x02\x0a\x98\x80\x80\x80\x00\x01\x92\x80\x80\x80\x00\x00\x02\x40\x23\x00\x01\x41\xf1\x01\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports(Ng)),  "run", []), "linking.wast:81");  // assert_return(() => get(Ng, "Mg.mut_glob"), "linking.wast:81", 241)

// linking.wast:82
assert_return(() => call(Mg, "get_mut", []), "linking.wast:82", 241);

// linking.wast:83
assert_return(() => call(Ng, "Mg.get_mut", []), "linking.wast:83", 241);

// linking.wast:87
let $$8 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x90\x80\x80\x80\x00\x01\x02\x4d\x67\x08\x6d\x75\x74\x5f\x67\x6c\x6f\x62\x03\x7f\x00", "linking.wast:87");

// linking.wast:86
assert_unlinkable($$8);

// linking.wast:91
let $$9 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x8c\x80\x80\x80\x00\x01\x02\x4d\x67\x04\x67\x6c\x6f\x62\x03\x7f\x01", "linking.wast:91");

// linking.wast:90
assert_unlinkable($$9);

// linking.wast:96
let $$10 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x06\xb9\x80\x80\x80\x00\x0a\x70\x00\xd0\x70\x0b\x64\x70\x00\xd2\x00\x0b\x63\x00\x00\xd0\x00\x0b\x64\x00\x00\xd2\x00\x0b\x6f\x00\xd0\x6f\x0b\x70\x01\xd0\x70\x0b\x64\x70\x01\xd2\x00\x0b\x63\x00\x01\xd0\x00\x0b\x64\x00\x01\xd2\x00\x0b\x6f\x01\xd0\x6f\x0b\x07\x9d\x81\x80\x80\x00\x0a\x10\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x66\x75\x6e\x63\x6e\x75\x6c\x6c\x03\x00\x0c\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x66\x75\x6e\x63\x03\x01\x0f\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x72\x65\x66\x6e\x75\x6c\x6c\x03\x02\x0b\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x72\x65\x66\x03\x03\x0e\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x65\x78\x74\x65\x72\x6e\x03\x04\x0e\x67\x2d\x76\x61\x72\x2d\x66\x75\x6e\x63\x6e\x75\x6c\x6c\x03\x05\x0a\x67\x2d\x76\x61\x72\x2d\x66\x75\x6e\x63\x03\x06\x0d\x67\x2d\x76\x61\x72\x2d\x72\x65\x66\x6e\x75\x6c\x6c\x03\x07\x09\x67\x2d\x76\x61\x72\x2d\x72\x65\x66\x03\x08\x0c\x67\x2d\x76\x61\x72\x2d\x65\x78\x74\x65\x72\x6e\x03\x09\x09\x85\x80\x80\x80\x00\x01\x03\x00\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b", "linking.wast:96");
let $Mref_ex = $$10;

// linking.wast:96
let $6 = instance($Mref_ex);
let Mref_ex = $6;

// linking.wast:110
register("Mref_ex", Mref_ex)

// linking.wast:112
let $$11 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\xf7\x82\x80\x80\x00\x0f\x07\x4d\x72\x65\x66\x5f\x65\x78\x10\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x66\x75\x6e\x63\x6e\x75\x6c\x6c\x03\x70\x00\x07\x4d\x72\x65\x66\x5f\x65\x78\x0c\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x66\x75\x6e\x63\x03\x70\x00\x07\x4d\x72\x65\x66\x5f\x65\x78\x0f\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x72\x65\x66\x6e\x75\x6c\x6c\x03\x70\x00\x07\x4d\x72\x65\x66\x5f\x65\x78\x0b\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x72\x65\x66\x03\x70\x00\x07\x4d\x72\x65\x66\x5f\x65\x78\x0c\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x66\x75\x6e\x63\x03\x64\x70\x00\x07\x4d\x72\x65\x66\x5f\x65\x78\x0b\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x72\x65\x66\x03\x64\x70\x00\x07\x4d\x72\x65\x66\x5f\x65\x78\x0f\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x72\x65\x66\x6e\x75\x6c\x6c\x03\x63\x00\x00\x07\x4d\x72\x65\x66\x5f\x65\x78\x0b\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x72\x65\x66\x03\x63\x00\x00\x07\x4d\x72\x65\x66\x5f\x65\x78\x0b\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x72\x65\x66\x03\x64\x00\x00\x07\x4d\x72\x65\x66\x5f\x65\x78\x0e\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x65\x78\x74\x65\x72\x6e\x03\x6f\x00\x07\x4d\x72\x65\x66\x5f\x65\x78\x0e\x67\x2d\x76\x61\x72\x2d\x66\x75\x6e\x63\x6e\x75\x6c\x6c\x03\x70\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0a\x67\x2d\x76\x61\x72\x2d\x66\x75\x6e\x63\x03\x64\x70\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0d\x67\x2d\x76\x61\x72\x2d\x72\x65\x66\x6e\x75\x6c\x6c\x03\x63\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x09\x67\x2d\x76\x61\x72\x2d\x72\x65\x66\x03\x64\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0c\x67\x2d\x76\x61\x72\x2d\x65\x78\x74\x65\x72\x6e\x03\x6f\x01", "linking.wast:112");
let $Mref_im = $$11;

// linking.wast:112
let $7 = instance($Mref_im);
let Mref_im = $7;

// linking.wast:133
let $$12 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x9b\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0e\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x65\x78\x74\x65\x72\x6e\x03\x70\x00", "linking.wast:133");

// linking.wast:132
assert_unlinkable($$12);

// linking.wast:138
let $$13 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x9e\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x10\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x66\x75\x6e\x63\x6e\x75\x6c\x6c\x03\x64\x70\x00", "linking.wast:138");

// linking.wast:137
assert_unlinkable($$13);

// linking.wast:142
let $$14 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x9d\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0f\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x72\x65\x66\x6e\x75\x6c\x6c\x03\x64\x70\x00", "linking.wast:142");

// linking.wast:141
assert_unlinkable($$14);

// linking.wast:146
let $$15 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x9c\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0e\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x65\x78\x74\x65\x72\x6e\x03\x64\x70\x00", "linking.wast:146");

// linking.wast:145
assert_unlinkable($$15);

// linking.wast:151
let $$16 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x9e\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x10\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x66\x75\x6e\x63\x6e\x75\x6c\x6c\x03\x63\x00\x00", "linking.wast:151");

// linking.wast:150
assert_unlinkable($$16);

// linking.wast:155
let $$17 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x9a\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0c\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x66\x75\x6e\x63\x03\x63\x00\x00", "linking.wast:155");

// linking.wast:154
assert_unlinkable($$17);

// linking.wast:159
let $$18 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x9c\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0e\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x65\x78\x74\x65\x72\x6e\x03\x63\x00\x00", "linking.wast:159");

// linking.wast:158
assert_unlinkable($$18);

// linking.wast:164
let $$19 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x9e\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x10\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x66\x75\x6e\x63\x6e\x75\x6c\x6c\x03\x64\x00\x00", "linking.wast:164");

// linking.wast:163
assert_unlinkable($$19);

// linking.wast:168
let $$20 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x9a\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0c\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x66\x75\x6e\x63\x03\x64\x00\x00", "linking.wast:168");

// linking.wast:167
assert_unlinkable($$20);

// linking.wast:172
let $$21 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x9d\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0f\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x72\x65\x66\x6e\x75\x6c\x6c\x03\x64\x00\x00", "linking.wast:172");

// linking.wast:171
assert_unlinkable($$21);

// linking.wast:176
let $$22 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x9c\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0e\x67\x2d\x63\x6f\x6e\x73\x74\x2d\x65\x78\x74\x65\x72\x6e\x03\x64\x00\x00", "linking.wast:176");

// linking.wast:175
assert_unlinkable($$22);

// linking.wast:182
let $$23 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0a\x67\x2d\x76\x61\x72\x2d\x66\x75\x6e\x63\x03\x70\x01", "linking.wast:182");

// linking.wast:181
assert_unlinkable($$23);

// linking.wast:186
let $$24 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x9a\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0d\x67\x2d\x76\x61\x72\x2d\x72\x65\x66\x6e\x75\x6c\x6c\x03\x70\x01", "linking.wast:186");

// linking.wast:185
assert_unlinkable($$24);

// linking.wast:190
let $$25 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x96\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x09\x67\x2d\x76\x61\x72\x2d\x72\x65\x66\x03\x70\x01", "linking.wast:190");

// linking.wast:189
assert_unlinkable($$25);

// linking.wast:194
let $$26 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x99\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0c\x67\x2d\x76\x61\x72\x2d\x65\x78\x74\x65\x72\x6e\x03\x70\x01", "linking.wast:194");

// linking.wast:193
assert_unlinkable($$26);

// linking.wast:199
let $$27 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x9c\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0e\x67\x2d\x76\x61\x72\x2d\x66\x75\x6e\x63\x6e\x75\x6c\x6c\x03\x64\x70\x01", "linking.wast:199");

// linking.wast:198
assert_unlinkable($$27);

// linking.wast:203
let $$28 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x9b\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0d\x67\x2d\x76\x61\x72\x2d\x72\x65\x66\x6e\x75\x6c\x6c\x03\x64\x70\x01", "linking.wast:203");

// linking.wast:202
assert_unlinkable($$28);

// linking.wast:207
let $$29 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x09\x67\x2d\x76\x61\x72\x2d\x72\x65\x66\x03\x64\x70\x01", "linking.wast:207");

// linking.wast:206
assert_unlinkable($$29);

// linking.wast:211
let $$30 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x9a\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0c\x67\x2d\x76\x61\x72\x2d\x65\x78\x74\x65\x72\x6e\x03\x64\x70\x01", "linking.wast:211");

// linking.wast:210
assert_unlinkable($$30);

// linking.wast:216
let $$31 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x9c\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0e\x67\x2d\x76\x61\x72\x2d\x66\x75\x6e\x63\x6e\x75\x6c\x6c\x03\x63\x00\x01", "linking.wast:216");

// linking.wast:215
assert_unlinkable($$31);

// linking.wast:220
let $$32 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x98\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0a\x67\x2d\x76\x61\x72\x2d\x66\x75\x6e\x63\x03\x63\x00\x01", "linking.wast:220");

// linking.wast:219
assert_unlinkable($$32);

// linking.wast:224
let $$33 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x97\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x09\x67\x2d\x76\x61\x72\x2d\x72\x65\x66\x03\x63\x00\x01", "linking.wast:224");

// linking.wast:223
assert_unlinkable($$33);

// linking.wast:228
let $$34 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x9a\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0c\x67\x2d\x76\x61\x72\x2d\x65\x78\x74\x65\x72\x6e\x03\x63\x00\x01", "linking.wast:228");

// linking.wast:227
assert_unlinkable($$34);

// linking.wast:233
let $$35 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x9c\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0e\x67\x2d\x76\x61\x72\x2d\x66\x75\x6e\x63\x6e\x75\x6c\x6c\x03\x64\x00\x01", "linking.wast:233");

// linking.wast:232
assert_unlinkable($$35);

// linking.wast:237
let $$36 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x98\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0a\x67\x2d\x76\x61\x72\x2d\x66\x75\x6e\x63\x03\x64\x00\x01", "linking.wast:237");

// linking.wast:236
assert_unlinkable($$36);

// linking.wast:241
let $$37 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x9b\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0d\x67\x2d\x76\x61\x72\x2d\x72\x65\x66\x6e\x75\x6c\x6c\x03\x64\x00\x01", "linking.wast:241");

// linking.wast:240
assert_unlinkable($$37);

// linking.wast:245
let $$38 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x9a\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0c\x67\x2d\x76\x61\x72\x2d\x65\x78\x74\x65\x72\x6e\x03\x64\x00\x01", "linking.wast:245");

// linking.wast:244
assert_unlinkable($$38);

// linking.wast:250
let $$39 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x9b\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0e\x67\x2d\x76\x61\x72\x2d\x66\x75\x6e\x63\x6e\x75\x6c\x6c\x03\x6f\x01", "linking.wast:250");

// linking.wast:249
assert_unlinkable($$39);

// linking.wast:254
let $$40 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x97\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0a\x67\x2d\x76\x61\x72\x2d\x66\x75\x6e\x63\x03\x6f\x01", "linking.wast:254");

// linking.wast:253
assert_unlinkable($$40);

// linking.wast:258
let $$41 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x9a\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x0d\x67\x2d\x76\x61\x72\x2d\x72\x65\x66\x6e\x75\x6c\x6c\x03\x6f\x01", "linking.wast:258");

// linking.wast:257
assert_unlinkable($$41);

// linking.wast:262
let $$42 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x96\x80\x80\x80\x00\x01\x07\x4d\x72\x65\x66\x5f\x65\x78\x09\x67\x2d\x76\x61\x72\x2d\x72\x65\x66\x03\x6f\x01", "linking.wast:262");

// linking.wast:261
assert_unlinkable($$42);

// linking.wast:269
let $$43 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7f\x01\x7f\x03\x84\x80\x80\x80\x00\x03\x00\x00\x02\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x92\x80\x80\x80\x00\x03\x03\x74\x61\x62\x01\x00\x01\x68\x00\x01\x04\x63\x61\x6c\x6c\x00\x02\x09\x8a\x80\x80\x80\x00\x01\x00\x41\x02\x0b\x04\x00\x00\x00\x00\x0a\x9f\x80\x80\x80\x00\x03\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x7c\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b", "linking.wast:269");
let $Mt = $$43;

// linking.wast:269
let $8 = instance($Mt);
let Mt = $8;

// linking.wast:282
register("Mt", Mt)

// linking.wast:284
let $$44 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x00\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x02\x92\x80\x80\x80\x00\x02\x02\x4d\x74\x04\x63\x61\x6c\x6c\x00\x02\x02\x4d\x74\x01\x68\x00\x01\x03\x84\x80\x80\x80\x00\x03\x01\x02\x02\x04\x85\x80\x80\x80\x00\x01\x70\x01\x05\x05\x07\xa1\x80\x80\x80\x00\x03\x07\x4d\x74\x2e\x63\x61\x6c\x6c\x00\x00\x0c\x63\x61\x6c\x6c\x20\x4d\x74\x2e\x63\x61\x6c\x6c\x00\x03\x04\x63\x61\x6c\x6c\x00\x04\x09\x95\x80\x80\x80\x00\x01\x04\x41\x00\x0b\x05\xd2\x02\x0b\xd2\x02\x0b\xd2\x02\x0b\xd2\x01\x0b\xd2\x00\x0b\x0a\xa1\x80\x80\x80\x00\x03\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x86\x80\x80\x80\x00\x00\x20\x00\x10\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x01\x00\x0b", "linking.wast:284");
let $Nt = $$44;

// linking.wast:284
let $9 = instance($Nt);
let Nt = $9;

// linking.wast:303
assert_return(() => call(Mt, "call", [2]), "linking.wast:303", 4);

// linking.wast:304
assert_return(() => call(Nt, "Mt.call", [2]), "linking.wast:304", 4);

// linking.wast:305
assert_return(() => call(Nt, "call", [2]), "linking.wast:305", 5);

// linking.wast:306
assert_return(() => call(Nt, "call Mt.call", [2]), "linking.wast:306", 4);

// linking.wast:308
assert_trap(() => call(Mt, "call", [1]), "linking.wast:308");

// linking.wast:309
assert_trap(() => call(Nt, "Mt.call", [1]), "linking.wast:309");

// linking.wast:310
assert_return(() => call(Nt, "call", [1]), "linking.wast:310", 5);

// linking.wast:311
assert_trap(() => call(Nt, "call Mt.call", [1]), "linking.wast:311");

// linking.wast:313
assert_trap(() => call(Mt, "call", [0]), "linking.wast:313");

// linking.wast:314
assert_trap(() => call(Nt, "Mt.call", [0]), "linking.wast:314");

// linking.wast:315
assert_return(() => call(Nt, "call", [0]), "linking.wast:315", 5);

// linking.wast:316
assert_trap(() => call(Nt, "call Mt.call", [0]), "linking.wast:316");

// linking.wast:318
assert_trap(() => call(Mt, "call", [20]), "linking.wast:318");

// linking.wast:319
assert_trap(() => call(Nt, "Mt.call", [20]), "linking.wast:319");

// linking.wast:320
assert_trap(() => call(Nt, "call", [7]), "linking.wast:320");

// linking.wast:321
assert_trap(() => call(Nt, "call Mt.call", [20]), "linking.wast:321");

// linking.wast:323
assert_return(() => call(Nt, "call", [3]), "linking.wast:323", -4);

// linking.wast:324
assert_trap(() => call(Nt, "call", [4]), "linking.wast:324");

// linking.wast:326
let $$45 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x02\x93\x80\x80\x80\x00\x02\x02\x4d\x74\x01\x68\x00\x00\x02\x4d\x74\x03\x74\x61\x62\x01\x70\x00\x05\x03\x83\x80\x80\x80\x00\x02\x00\x01\x07\x88\x80\x80\x80\x00\x01\x04\x63\x61\x6c\x6c\x00\x02\x09\x88\x80\x80\x80\x00\x01\x00\x41\x01\x0b\x02\x01\x00\x0a\x96\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b", "linking.wast:326");
let $Ot = $$45;

// linking.wast:326
let $10 = instance($Ot);
let Ot = $10;

// linking.wast:339
assert_return(() => call(Mt, "call", [3]), "linking.wast:339", 4);

// linking.wast:340
assert_return(() => call(Nt, "Mt.call", [3]), "linking.wast:340", 4);

// linking.wast:341
assert_return(() => call(Nt, "call Mt.call", [3]), "linking.wast:341", 4);

// linking.wast:342
assert_return(() => call(Ot, "call", [3]), "linking.wast:342", 4);

// linking.wast:344
assert_return(() => call(Mt, "call", [2]), "linking.wast:344", -4);

// linking.wast:345
assert_return(() => call(Nt, "Mt.call", [2]), "linking.wast:345", -4);

// linking.wast:346
assert_return(() => call(Nt, "call", [2]), "linking.wast:346", 5);

// linking.wast:347
assert_return(() => call(Nt, "call Mt.call", [2]), "linking.wast:347", -4);

// linking.wast:348
assert_return(() => call(Ot, "call", [2]), "linking.wast:348", -4);

// linking.wast:350
assert_return(() => call(Mt, "call", [1]), "linking.wast:350", 6);

// linking.wast:351
assert_return(() => call(Nt, "Mt.call", [1]), "linking.wast:351", 6);

// linking.wast:352
assert_return(() => call(Nt, "call", [1]), "linking.wast:352", 5);

// linking.wast:353
assert_return(() => call(Nt, "call Mt.call", [1]), "linking.wast:353", 6);

// linking.wast:354
assert_return(() => call(Ot, "call", [1]), "linking.wast:354", 6);

// linking.wast:356
assert_trap(() => call(Mt, "call", [0]), "linking.wast:356");

// linking.wast:357
assert_trap(() => call(Nt, "Mt.call", [0]), "linking.wast:357");

// linking.wast:358
assert_return(() => call(Nt, "call", [0]), "linking.wast:358", 5);

// linking.wast:359
assert_trap(() => call(Nt, "call Mt.call", [0]), "linking.wast:359");

// linking.wast:360
assert_trap(() => call(Ot, "call", [0]), "linking.wast:360");

// linking.wast:362
assert_trap(() => call(Ot, "call", [20]), "linking.wast:362");

// linking.wast:364
let $$46 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x8c\x80\x80\x80\x00\x01\x02\x4d\x74\x03\x74\x61\x62\x01\x70\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x09\x87\x80\x80\x80\x00\x01\x00\x41\x09\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b", "linking.wast:364");

// linking.wast:364
let $11 = instance($$46);

// linking.wast:370
let $$47 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x06\x86\x80\x80\x80\x00\x01\x7f\x00\x41\x05\x0b\x07\x85\x80\x80\x80\x00\x01\x01\x67\x03\x00", "linking.wast:370");
let $G1 = $$47;

// linking.wast:370
let $12 = instance($G1);
let G1 = $12;

// linking.wast:371
register("G1", G1)

// linking.wast:372
let $$48 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x89\x80\x80\x80\x00\x01\x02\x47\x31\x01\x67\x03\x7f\x00\x06\x86\x80\x80\x80\x00\x01\x7f\x00\x23\x00\x0b\x07\x85\x80\x80\x80\x00\x01\x01\x67\x03\x01", "linking.wast:372");
let $G2 = $$48;

// linking.wast:372
let $13 = instance($G2);
let G2 = $13;

// linking.wast:376
assert_return(() => get(G2, "g"), "linking.wast:376", 5);

// linking.wast:379
let $$49 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x8c\x80\x80\x80\x00\x01\x02\x4d\x74\x03\x74\x61\x62\x01\x70\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x09\x87\x80\x80\x80\x00\x01\x00\x41\x0a\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b", "linking.wast:379");

// linking.wast:378
assert_uninstantiable($$49);

// linking.wast:388
let $$50 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x02\x96\x80\x80\x80\x00\x02\x02\x4d\x74\x03\x74\x61\x62\x01\x70\x00\x0a\x02\x4d\x74\x03\x6d\x65\x6d\x02\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x09\x8d\x80\x80\x80\x00\x02\x00\x41\x07\x0b\x01\x00\x00\x41\x09\x0b\x01\x00\x0a\x8a\x80\x80\x80\x00\x01\x84\x80\x80\x80\x00\x00\x41\x00\x0b", "linking.wast:388");

// linking.wast:387
assert_unlinkable($$50);

// linking.wast:397
assert_trap(() => call(Mt, "call", [7]), "linking.wast:397");

// linking.wast:402
let $$51 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x02\x8c\x80\x80\x80\x00\x01\x02\x4d\x74\x03\x74\x61\x62\x01\x70\x00\x0a\x03\x82\x80\x80\x80\x00\x01\x00\x09\x91\x80\x80\x80\x00\x02\x00\x41\x07\x0b\x01\x00\x00\x41\x08\x0b\x05\x00\x00\x00\x00\x00\x0a\x8a\x80\x80\x80\x00\x01\x84\x80\x80\x80\x00\x00\x41\x00\x0b", "linking.wast:402");

// linking.wast:401
assert_uninstantiable($$51);

// linking.wast:410
assert_return(() => call(Mt, "call", [7]), "linking.wast:410", 0);

// linking.wast:411
assert_trap(() => call(Mt, "call", [8]), "linking.wast:411");

// linking.wast:414
let $$52 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x02\x8c\x80\x80\x80\x00\x01\x02\x4d\x74\x03\x74\x61\x62\x01\x70\x00\x0a\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x09\x87\x80\x80\x80\x00\x01\x00\x41\x07\x0b\x01\x00\x0a\x8a\x80\x80\x80\x00\x01\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x0b\x89\x80\x80\x80\x00\x01\x00\x41\x80\x80\x04\x0b\x01\x64", "linking.wast:414");

// linking.wast:413
assert_uninstantiable($$52);

// linking.wast:423
assert_return(() => call(Mt, "call", [7]), "linking.wast:423", 0);

// linking.wast:426
let $$53 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x04\x8b\x80\x80\x80\x00\x03\x70\x00\x01\x63\x00\x00\x01\x6f\x00\x01\x07\xa5\x80\x80\x80\x00\x03\x0a\x74\x2d\x66\x75\x6e\x63\x6e\x75\x6c\x6c\x01\x00\x09\x74\x2d\x72\x65\x66\x6e\x75\x6c\x6c\x01\x01\x08\x74\x2d\x65\x78\x74\x65\x72\x6e\x01\x02", "linking.wast:426");
let $Mtable_ex = $$53;

// linking.wast:426
let $14 = instance($Mtable_ex);
let Mtable_ex = $14;

// linking.wast:432
register("Mtable_ex", Mtable_ex)

// linking.wast:434
let $$54 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\xca\x80\x80\x80\x00\x03\x09\x4d\x74\x61\x62\x6c\x65\x5f\x65\x78\x0a\x74\x2d\x66\x75\x6e\x63\x6e\x75\x6c\x6c\x01\x70\x00\x01\x09\x4d\x74\x61\x62\x6c\x65\x5f\x65\x78\x09\x74\x2d\x72\x65\x66\x6e\x75\x6c\x6c\x01\x63\x00\x00\x01\x09\x4d\x74\x61\x62\x6c\x65\x5f\x65\x78\x08\x74\x2d\x65\x78\x74\x65\x72\x6e\x01\x6f\x00\x01", "linking.wast:434");

// linking.wast:434
let $15 = instance($$54);

// linking.wast:442
let $$55 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x99\x80\x80\x80\x00\x01\x09\x4d\x74\x61\x62\x6c\x65\x5f\x65\x78\x09\x74\x2d\x72\x65\x66\x6e\x75\x6c\x6c\x01\x70\x00\x01", "linking.wast:442");

// linking.wast:441
assert_unlinkable($$55);

// linking.wast:446
let $$56 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x98\x80\x80\x80\x00\x01\x09\x4d\x74\x61\x62\x6c\x65\x5f\x65\x78\x08\x74\x2d\x65\x78\x74\x65\x72\x6e\x01\x70\x00\x01", "linking.wast:446");

// linking.wast:445
assert_unlinkable($$56);

// linking.wast:451
let $$57 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x9b\x80\x80\x80\x00\x01\x09\x4d\x74\x61\x62\x6c\x65\x5f\x65\x78\x0a\x74\x2d\x66\x75\x6e\x63\x6e\x75\x6c\x6c\x01\x63\x00\x00\x01", "linking.wast:451");

// linking.wast:450
assert_unlinkable($$57);

// linking.wast:455
let $$58 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x99\x80\x80\x80\x00\x01\x09\x4d\x74\x61\x62\x6c\x65\x5f\x65\x78\x08\x74\x2d\x65\x78\x74\x65\x72\x6e\x01\x63\x00\x00\x01", "linking.wast:455");

// linking.wast:454
assert_unlinkable($$58);

// linking.wast:460
let $$59 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x9a\x80\x80\x80\x00\x01\x09\x4d\x74\x61\x62\x6c\x65\x5f\x65\x78\x0a\x74\x2d\x66\x75\x6e\x63\x6e\x75\x6c\x6c\x01\x6f\x00\x01", "linking.wast:460");

// linking.wast:459
assert_unlinkable($$59);

// linking.wast:464
let $$60 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x99\x80\x80\x80\x00\x01\x09\x4d\x74\x61\x62\x6c\x65\x5f\x65\x78\x09\x74\x2d\x72\x65\x66\x6e\x75\x6c\x6c\x01\x6f\x00\x01", "linking.wast:464");

// linking.wast:463
assert_unlinkable($$60);

// linking.wast:471
let $$61 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x84\x80\x80\x80\x00\x01\x01\x01\x05\x07\x8e\x80\x80\x80\x00\x02\x03\x6d\x65\x6d\x02\x00\x04\x6c\x6f\x61\x64\x00\x00\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x20\x00\x2d\x00\x00\x0b\x0b\x90\x80\x80\x80\x00\x01\x00\x41\x0a\x0b\x0a\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09", "linking.wast:471");
let $Mm = $$61;

// linking.wast:471
let $16 = instance($Mm);
let Mm = $16;

// linking.wast:479
register("Mm", Mm)

// linking.wast:481
let $$62 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x02\x8b\x80\x80\x80\x00\x01\x02\x4d\x6d\x04\x6c\x6f\x61\x64\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x92\x80\x80\x80\x00\x02\x07\x4d\x6d\x2e\x6c\x6f\x61\x64\x00\x00\x04\x6c\x6f\x61\x64\x00\x01\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x20\x00\x2d\x00\x00\x0b\x0b\x8c\x80\x80\x80\x00\x01\x00\x41\x0a\x0b\x06\xf0\xf1\xf2\xf3\xf4\xf5", "linking.wast:481");
let $Nm = $$62;

// linking.wast:481
let $17 = instance($Nm);
let Nm = $17;

// linking.wast:493
assert_return(() => call(Mm, "load", [12]), "linking.wast:493", 2);

// linking.wast:494
assert_return(() => call(Nm, "Mm.load", [12]), "linking.wast:494", 2);

// linking.wast:495
assert_return(() => call(Nm, "load", [12]), "linking.wast:495", 242);

// linking.wast:497
let $$63 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x02\x8b\x80\x80\x80\x00\x01\x02\x4d\x6d\x03\x6d\x65\x6d\x02\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x88\x80\x80\x80\x00\x01\x04\x6c\x6f\x61\x64\x00\x00\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x20\x00\x2d\x00\x00\x0b\x0b\x8e\x80\x80\x80\x00\x01\x00\x41\x05\x0b\x08\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7", "linking.wast:497");
let $Om = $$63;

// linking.wast:497
let $18 = instance($Om);
let Om = $18;

// linking.wast:506
assert_return(() => call(Mm, "load", [12]), "linking.wast:506", 167);

// linking.wast:507
assert_return(() => call(Nm, "Mm.load", [12]), "linking.wast:507", 167);

// linking.wast:508
assert_return(() => call(Nm, "load", [12]), "linking.wast:508", 242);

// linking.wast:509
assert_return(() => call(Om, "load", [12]), "linking.wast:509", 167);

// linking.wast:511
let $$64 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x8b\x80\x80\x80\x00\x01\x02\x4d\x6d\x03\x6d\x65\x6d\x02\x00\x00\x0b\x89\x80\x80\x80\x00\x01\x00\x41\xff\xff\x03\x0b\x01\x61", "linking.wast:511");

// linking.wast:511
let $19 = instance($$64);

// linking.wast:517
let $$65 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x8b\x80\x80\x80\x00\x01\x02\x4d\x6d\x03\x6d\x65\x6d\x02\x00\x00\x0b\x89\x80\x80\x80\x00\x01\x00\x41\x80\x80\x04\x0b\x01\x61", "linking.wast:517");

// linking.wast:516
assert_uninstantiable($$65);

// linking.wast:524
let $$66 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x02\x8c\x80\x80\x80\x00\x01\x02\x4d\x6d\x03\x6d\x65\x6d\x02\x01\x01\x08\x03\x82\x80\x80\x80\x00\x01\x00\x07\x88\x80\x80\x80\x00\x01\x04\x67\x72\x6f\x77\x00\x00\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x20\x00\x40\x00\x0b", "linking.wast:524");
let $Pm = $$66;

// linking.wast:524
let $20 = instance($Pm);
let Pm = $20;

// linking.wast:532
assert_return(() => call(Pm, "grow", [0]), "linking.wast:532", 1);

// linking.wast:533
assert_return(() => call(Pm, "grow", [2]), "linking.wast:533", 1);

// linking.wast:534
assert_return(() => call(Pm, "grow", [0]), "linking.wast:534", 3);

// linking.wast:535
assert_return(() => call(Pm, "grow", [1]), "linking.wast:535", 3);

// linking.wast:536
assert_return(() => call(Pm, "grow", [1]), "linking.wast:536", 4);

// linking.wast:537
assert_return(() => call(Pm, "grow", [0]), "linking.wast:537", 5);

// linking.wast:538
assert_return(() => call(Pm, "grow", [1]), "linking.wast:538", -1);

// linking.wast:539
assert_return(() => call(Pm, "grow", [0]), "linking.wast:539", 5);

// linking.wast:542
let $$67 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\xa7\x80\x80\x80\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x70\x72\x69\x6e\x74\x00\x00\x02\x4d\x6d\x03\x6d\x65\x6d\x02\x00\x01\x02\x4d\x6d\x03\x74\x61\x62\x01\x70\x00\x00\x0b\x89\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x03\x61\x62\x63", "linking.wast:542");

// linking.wast:541
assert_unlinkable($$67);

// linking.wast:550
assert_return(() => call(Mm, "load", [0]), "linking.wast:550", 0);

// linking.wast:555
let $$68 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x8b\x80\x80\x80\x00\x01\x02\x4d\x6d\x03\x6d\x65\x6d\x02\x00\x01\x0b\xa2\x80\x80\x80\x00\x02\x00\x41\x00\x0b\x03\x61\x62\x63\x00\x41\xf6\xff\x13\x0b\x12\x7a\x7a\x7a\x7a\x7a\x7a\x7a\x7a\x7a\x7a\x7a\x7a\x7a\x7a\x7a\x7a\x7a\x7a", "linking.wast:555");

// linking.wast:554
assert_uninstantiable($$68);

// linking.wast:563
assert_return(() => call(Mm, "load", [0]), "linking.wast:563", 97);

// linking.wast:564
assert_return(() => call(Mm, "load", [327_670]), "linking.wast:564", 0);

// linking.wast:567
let $$69 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x8b\x80\x80\x80\x00\x01\x02\x4d\x6d\x03\x6d\x65\x6d\x02\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x09\x87\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b\x0b\x89\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x03\x61\x62\x63", "linking.wast:567");

// linking.wast:566
assert_uninstantiable($$69);

// linking.wast:576
assert_return(() => call(Mm, "load", [0]), "linking.wast:576", 97);

// linking.wast:579
let $$70 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x01\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\xb1\x80\x80\x80\x00\x04\x06\x6d\x65\x6d\x6f\x72\x79\x02\x00\x05\x74\x61\x62\x6c\x65\x01\x00\x0d\x67\x65\x74\x20\x6d\x65\x6d\x6f\x72\x79\x5b\x30\x5d\x00\x00\x0c\x67\x65\x74\x20\x74\x61\x62\x6c\x65\x5b\x30\x5d\x00\x01\x0a\x99\x80\x80\x80\x00\x02\x87\x80\x80\x80\x00\x00\x41\x00\x2d\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x00\x11\x00\x00\x0b", "linking.wast:579");
let $Ms = $$70;

// linking.wast:579
let $21 = instance($Ms);
let Ms = $21;

// linking.wast:590
register("Ms", Ms)

// linking.wast:593
let $$71 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x02\x9b\x80\x80\x80\x00\x02\x02\x4d\x73\x06\x6d\x65\x6d\x6f\x72\x79\x02\x00\x01\x02\x4d\x73\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x01\x03\x83\x80\x80\x80\x00\x02\x00\x01\x08\x81\x80\x80\x80\x00\x01\x09\x87\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x01\x00\x0a\x94\x80\x80\x80\x00\x02\x86\x80\x80\x80\x00\x00\x41\xad\xbd\x03\x0b\x83\x80\x80\x80\x00\x00\x00\x0b\x0b\x8b\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x05\x68\x65\x6c\x6c\x6f", "linking.wast:593");

// linking.wast:592
assert_uninstantiable($$71);

// linking.wast:609
assert_return(() => call(Ms, "get memory[0]", []), "linking.wast:609", 104);

// linking.wast:610
assert_return(() => call(Ms, "get table[0]", []), "linking.wast:610", 57_005);
reinitializeRegistry();
})();

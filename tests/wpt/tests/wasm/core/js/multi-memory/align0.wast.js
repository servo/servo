(function align0_wast_js() {

// align0.wast:3
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7d\x03\x82\x80\x80\x80\x00\x01\x00\x05\x87\x80\x80\x80\x00\x03\x00\x00\x00\x01\x00\x00\x07\x94\x80\x80\x80\x00\x01\x10\x66\x33\x32\x5f\x61\x6c\x69\x67\x6e\x5f\x73\x77\x69\x74\x63\x68\x00\x00\x0a\xf1\x80\x80\x80\x00\x01\xeb\x80\x80\x80\x00\x01\x02\x7d\x43\x00\x00\x20\x41\x21\x01\x02\x40\x02\x40\x02\x40\x02\x40\x02\x40\x20\x00\x0e\x04\x00\x01\x02\x03\x04\x0b\x41\x00\x20\x01\x38\x42\x01\x00\x41\x00\x2a\x42\x01\x00\x21\x02\x0c\x03\x0b\x41\x00\x20\x01\x38\x40\x01\x00\x41\x00\x2a\x40\x01\x00\x21\x02\x0c\x02\x0b\x41\x00\x20\x01\x38\x41\x01\x00\x41\x00\x2a\x41\x01\x00\x21\x02\x0c\x01\x0b\x41\x00\x20\x01\x38\x42\x01\x00\x41\x00\x2a\x42\x01\x00\x21\x02\x0b\x20\x02\x0b", "align0.wast:3");

// align0.wast:3
let $1 = instance($$1);

// align0.wast:39
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7f\x01\x7d\x02\xc0\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x10\x66\x33\x32\x5f\x61\x6c\x69\x67\x6e\x5f\x73\x77\x69\x74\x63\x68\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9c\x80\x80\x80\x00\x01\x96\x80\x80\x80\x00\x00\x02\x40\x41\x00\x10\x00\xbc\x43\x00\x00\x20\x41\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "align0.wast:39");  // assert_return(() => call($1, "f32_align_switch", [0]), "align0.wast:39", 10.)

// align0.wast:40
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7f\x01\x7d\x02\xc0\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x10\x66\x33\x32\x5f\x61\x6c\x69\x67\x6e\x5f\x73\x77\x69\x74\x63\x68\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9c\x80\x80\x80\x00\x01\x96\x80\x80\x80\x00\x00\x02\x40\x41\x01\x10\x00\xbc\x43\x00\x00\x20\x41\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "align0.wast:40");  // assert_return(() => call($1, "f32_align_switch", [1]), "align0.wast:40", 10.)

// align0.wast:41
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7f\x01\x7d\x02\xc0\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x10\x66\x33\x32\x5f\x61\x6c\x69\x67\x6e\x5f\x73\x77\x69\x74\x63\x68\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9c\x80\x80\x80\x00\x01\x96\x80\x80\x80\x00\x00\x02\x40\x41\x02\x10\x00\xbc\x43\x00\x00\x20\x41\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "align0.wast:41");  // assert_return(() => call($1, "f32_align_switch", [2]), "align0.wast:41", 10.)

// align0.wast:42
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7f\x01\x7d\x02\xc0\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x10\x66\x33\x32\x5f\x61\x6c\x69\x67\x6e\x5f\x73\x77\x69\x74\x63\x68\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9c\x80\x80\x80\x00\x01\x96\x80\x80\x80\x00\x00\x02\x40\x41\x03\x10\x00\xbc\x43\x00\x00\x20\x41\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "align0.wast:42");  // assert_return(() => call($1, "f32_align_switch", [3]), "align0.wast:42", 10.)
reinitializeRegistry();
})();

(function linking1_wast_js() {

// linking1.wast:1
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x8a\x80\x80\x80\x00\x03\x01\x00\x00\x01\x01\x05\x01\x00\x00\x07\x9d\x80\x80\x80\x00\x04\x04\x6d\x65\x6d\x30\x02\x00\x04\x6d\x65\x6d\x31\x02\x01\x04\x6d\x65\x6d\x32\x02\x02\x04\x6c\x6f\x61\x64\x00\x00\x0a\x8e\x80\x80\x80\x00\x01\x88\x80\x80\x80\x00\x00\x20\x00\x2d\x40\x01\x00\x0b\x0b\x91\x80\x80\x80\x00\x01\x02\x01\x41\x0a\x0b\x0a\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09", "linking1.wast:1");
let $Mm = $$1;

// linking1.wast:1
let $1 = instance($Mm);
let Mm = $1;

// linking1.wast:12
register("Mm", Mm)

// linking1.wast:14
let $$2 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x02\x96\x80\x80\x80\x00\x02\x02\x4d\x6d\x04\x6c\x6f\x61\x64\x00\x00\x02\x4d\x6d\x04\x6d\x65\x6d\x30\x02\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x92\x80\x80\x80\x00\x02\x07\x4d\x6d\x2e\x6c\x6f\x61\x64\x00\x00\x04\x6c\x6f\x61\x64\x00\x01\x0a\x8e\x80\x80\x80\x00\x01\x88\x80\x80\x80\x00\x00\x20\x00\x2d\x40\x01\x00\x0b\x0b\x8d\x80\x80\x80\x00\x01\x02\x01\x41\x0a\x0b\x06\xf0\xf1\xf2\xf3\xf4\xf5", "linking1.wast:14");
let $Nm = $$2;

// linking1.wast:14
let $2 = instance($Nm);
let Nm = $2;

// linking1.wast:27
assert_return(() => call(Mm, "load", [12]), "linking1.wast:27", 2);

// linking1.wast:28
assert_return(() => call(Nm, "Mm.load", [12]), "linking1.wast:28", 2);

// linking1.wast:29
assert_return(() => call(Nm, "load", [12]), "linking1.wast:29", 242);

// linking1.wast:31
let $$3 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x86\x80\x80\x80\x00\x01\x60\x01\x7f\x01\x7f\x02\x8c\x80\x80\x80\x00\x01\x02\x4d\x6d\x04\x6d\x65\x6d\x31\x02\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x88\x80\x80\x80\x00\x01\x04\x6c\x6f\x61\x64\x00\x00\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x20\x00\x2d\x00\x00\x0b\x0b\x8e\x80\x80\x80\x00\x01\x00\x41\x05\x0b\x08\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7", "linking1.wast:31");
let $Om = $$3;

// linking1.wast:31
let $3 = instance($Om);
let Om = $3;

// linking1.wast:40
assert_return(() => call(Mm, "load", [12]), "linking1.wast:40", 167);

// linking1.wast:41
assert_return(() => call(Nm, "Mm.load", [12]), "linking1.wast:41", 167);

// linking1.wast:42
assert_return(() => call(Nm, "load", [12]), "linking1.wast:42", 242);

// linking1.wast:43
assert_return(() => call(Om, "load", [12]), "linking1.wast:43", 167);

// linking1.wast:45
let $$4 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x8c\x80\x80\x80\x00\x01\x02\x4d\x6d\x04\x6d\x65\x6d\x31\x02\x00\x00\x0b\x89\x80\x80\x80\x00\x01\x00\x41\xff\xff\x03\x0b\x01\x61", "linking1.wast:45");

// linking1.wast:45
let $4 = instance($$4);

// linking1.wast:51
let $$5 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x8c\x80\x80\x80\x00\x01\x02\x4d\x6d\x04\x6d\x65\x6d\x30\x02\x00\x00\x0b\x89\x80\x80\x80\x00\x01\x00\x41\xff\xff\x03\x0b\x01\x61", "linking1.wast:51");

// linking1.wast:50
assert_uninstantiable($$5);

// linking1.wast:59
let $$6 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x8c\x80\x80\x80\x00\x01\x02\x4d\x6d\x04\x6d\x65\x6d\x31\x02\x00\x00\x0b\x89\x80\x80\x80\x00\x01\x00\x41\x80\x80\x04\x0b\x01\x61", "linking1.wast:59");

// linking1.wast:58
assert_uninstantiable($$6);
reinitializeRegistry();
})();

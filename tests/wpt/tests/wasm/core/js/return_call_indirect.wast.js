(function return_call_indirect_wast_js() {

// return_call_indirect.wast:3
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x83\x81\x80\x80\x00\x19\x60\x00\x00\x60\x00\x01\x7f\x60\x00\x01\x7e\x60\x00\x01\x7d\x60\x00\x01\x7c\x60\x01\x7f\x01\x7f\x60\x01\x7e\x01\x7e\x60\x01\x7d\x01\x7d\x60\x01\x7c\x01\x7c\x60\x02\x7d\x7f\x01\x7f\x60\x02\x7f\x7e\x01\x7e\x60\x02\x7c\x7d\x01\x7d\x60\x02\x7e\x7c\x01\x7c\x60\x01\x7f\x01\x7f\x60\x01\x7e\x01\x7e\x60\x01\x7d\x01\x7d\x60\x01\x7c\x01\x7c\x60\x02\x7f\x7d\x00\x60\x02\x7c\x7e\x02\x7f\x7d\x60\x04\x7e\x7c\x7f\x7e\x00\x60\x01\x7e\x00\x60\x04\x7e\x7c\x7f\x7e\x01\x7f\x60\x01\x7e\x01\x7f\x60\x01\x7f\x01\x7e\x60\x02\x7e\x7e\x01\x7e\x02\x9a\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0d\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x5f\x66\x33\x32\x00\x11\x03\xaf\x80\x80\x80\x00\x2e\x01\x02\x03\x04\x05\x06\x07\x08\x0a\x0c\x09\x0b\x0d\x0e\x0f\x10\x11\x12\x12\x00\x01\x02\x01\x02\x03\x04\x02\x01\x02\x03\x04\x01\x02\x03\x04\x0a\x17\x01\x01\x05\x06\x18\x05\x05\x11\x12\x04\x91\x80\x80\x80\x00\x04\x70\x01\x14\x14\x70\x01\x01\x01\x70\x01\x01\x01\x70\x01\x02\x02\x07\xd0\x82\x80\x80\x00\x17\x11\x74\x61\x69\x6c\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x5f\x66\x33\x32\x00\x11\x17\x74\x79\x70\x65\x2d\x66\x36\x34\x2d\x69\x36\x34\x2d\x74\x6f\x2d\x69\x33\x32\x2d\x66\x33\x32\x00\x13\x08\x74\x79\x70\x65\x2d\x69\x33\x32\x00\x17\x08\x74\x79\x70\x65\x2d\x69\x36\x34\x00\x18\x08\x74\x79\x70\x65\x2d\x66\x33\x32\x00\x19\x08\x74\x79\x70\x65\x2d\x66\x36\x34\x00\x1a\x0a\x74\x79\x70\x65\x2d\x69\x6e\x64\x65\x78\x00\x1b\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x69\x33\x32\x00\x1c\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x69\x36\x34\x00\x1d\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x66\x33\x32\x00\x1e\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x66\x36\x34\x00\x1f\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x69\x33\x32\x00\x20\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x69\x36\x34\x00\x21\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x66\x33\x32\x00\x22\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x66\x36\x34\x00\x23\x08\x64\x69\x73\x70\x61\x74\x63\x68\x00\x24\x13\x64\x69\x73\x70\x61\x74\x63\x68\x2d\x73\x74\x72\x75\x63\x74\x75\x72\x61\x6c\x00\x25\x08\x63\x61\x6c\x6c\x2d\x74\x61\x62\x00\x28\x03\x66\x61\x63\x00\x29\x04\x65\x76\x65\x6e\x00\x2b\x03\x6f\x64\x64\x00\x2c\x0e\x63\x61\x6c\x6c\x5f\x74\x61\x69\x6c\x70\x72\x69\x6e\x74\x00\x2d\x09\x63\x61\x6c\x6c\x5f\x6d\x70\x6d\x72\x00\x2e\x09\xe3\x80\x80\x80\x00\x04\x04\x41\x00\x0b\x14\xd2\x01\x0b\xd2\x02\x0b\xd2\x03\x0b\xd2\x04\x0b\xd2\x05\x0b\xd2\x06\x0b\xd2\x07\x0b\xd2\x08\x0b\xd2\x0b\x0b\xd2\x09\x0b\xd2\x0c\x0b\xd2\x0a\x0b\xd2\x29\x0b\xd2\x2a\x0b\xd2\x2b\x0b\xd2\x2c\x0b\xd2\x0d\x0b\xd2\x0e\x0b\xd2\x0f\x0b\xd2\x10\x0b\x06\x01\x41\x00\x0b\x70\x01\xd2\x26\x0b\x06\x02\x41\x00\x0b\x70\x01\xd2\x27\x0b\x06\x03\x41\x00\x0b\x70\x02\xd2\x11\x0b\xd2\x13\x0b\x0a\xe6\x85\x80\x80\x00\x2e\x85\x80\x80\x80\x00\x00\x41\xb2\x02\x0b\x85\x80\x80\x80\x00\x00\x42\xe4\x02\x0b\x87\x80\x80\x80\x00\x00\x43\x00\x20\x73\x45\x0b\x8b\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\xc8\xae\x40\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x01\x0b\x84\x80\x80\x80\x00\x00\x20\x01\x0b\x84\x80\x80\x80\x00\x00\x20\x01\x0b\x84\x80\x80\x80\x00\x00\x20\x01\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x88\x80\x80\x80\x00\x00\x20\x00\x20\x01\x12\x00\x0b\x88\x80\x80\x80\x00\x00\x20\x01\xa7\x20\x00\xb6\x0b\x88\x80\x80\x80\x00\x00\x20\x00\x20\x01\x12\x12\x0b\xa7\x80\x80\x80\x00\x00\x41\x00\x13\x00\x00\x42\x00\x41\x00\x13\x14\x00\x42\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x41\x00\x42\x00\x41\x00\x13\x13\x00\x41\x00\x13\x00\x00\x0b\xa7\x80\x80\x80\x00\x00\x41\x00\x13\x01\x00\x41\x00\x13\x01\x00\x42\x00\x41\x00\x13\x16\x00\x42\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x41\x00\x42\x00\x41\x00\x13\x15\x00\x0b\x89\x80\x80\x80\x00\x00\x42\x00\x41\x00\x13\x06\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x00\x13\x01\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x01\x13\x02\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x02\x13\x03\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x03\x13\x04\x00\x0b\x8a\x80\x80\x80\x00\x00\x42\xe4\x00\x41\x05\x13\x06\x00\x0b\x89\x80\x80\x80\x00\x00\x41\x20\x41\x04\x13\x05\x00\x0b\x8a\x80\x80\x80\x00\x00\x42\xc0\x00\x41\x05\x13\x06\x00\x0b\x8c\x80\x80\x80\x00\x00\x43\xc3\xf5\xa8\x3f\x41\x06\x13\x07\x00\x0b\x90\x80\x80\x80\x00\x00\x44\x3d\x0a\xd7\xa3\x70\x3d\xfa\x3f\x41\x07\x13\x08\x00\x0b\x8e\x80\x80\x80\x00\x00\x43\x66\x66\x00\x42\x41\x20\x41\x08\x13\x09\x00\x0b\x8c\x80\x80\x80\x00\x00\x41\x20\x42\xc0\x00\x41\x09\x13\x0a\x00\x0b\x95\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\x50\x40\x43\x00\x00\x00\x42\x41\x0a\x13\x0b\x00\x0b\x93\x80\x80\x80\x00\x00\x42\xc0\x00\x44\x66\x66\x66\x66\x66\x06\x50\x40\x41\x0b\x13\x0c\x00\x0b\x89\x80\x80\x80\x00\x00\x20\x01\x20\x00\x13\x06\x00\x0b\x89\x80\x80\x80\x00\x00\x42\x09\x20\x00\x13\x0e\x00\x0b\x85\x80\x80\x80\x00\x00\x41\xb3\x02\x0b\x85\x80\x80\x80\x00\x00\x41\xb4\x02\x0b\xab\x80\x80\x80\x00\x00\x20\x00\x41\x00\x46\x04\x40\x41\x00\x13\x01\x00\x0b\x20\x00\x41\x01\x46\x04\x40\x41\x00\x13\x01\x01\x0b\x20\x00\x41\x02\x46\x04\x40\x41\x00\x13\x01\x02\x0b\x41\x00\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x42\x01\x41\x0d\x13\x18\x00\x0b\x9a\x80\x80\x80\x00\x00\x20\x00\x50\x04\x7e\x20\x01\x05\x20\x00\x42\x01\x7d\x20\x00\x20\x01\x7e\x41\x0d\x13\x18\x00\x0b\x0b\x95\x80\x80\x80\x00\x00\x20\x00\x45\x04\x7f\x41\x2c\x05\x20\x00\x41\x01\x6b\x41\x0f\x13\x05\x00\x0b\x0b\x96\x80\x80\x80\x00\x00\x20\x00\x45\x04\x7f\x41\xe3\x00\x05\x20\x00\x41\x01\x6b\x41\x0e\x13\x05\x00\x0b\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\x41\x00\x13\x11\x03\x0b\x8b\x80\x80\x80\x00\x00\x20\x00\x20\x01\x41\x01\x13\x12\x03\x0b", "return_call_indirect.wast:3");

// return_call_indirect.wast:3
let $1 = instance($$1);

// return_call_indirect.wast:239
assert_return(() => call($1, "type-i32", []), "return_call_indirect.wast:239", 306);

// return_call_indirect.wast:240
assert_return(() => call($1, "type-i64", []), "return_call_indirect.wast:240", 356n);

// return_call_indirect.wast:241
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x74\x79\x70\x65\x2d\x66\x33\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x20\x73\x45\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call_indirect.wast:241");  // assert_return(() => call($1, "type-f32", []), "return_call_indirect.wast:241", 3890.)

// return_call_indirect.wast:242
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x74\x79\x70\x65\x2d\x66\x36\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\xc8\xae\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call_indirect.wast:242");  // assert_return(() => call($1, "type-f64", []), "return_call_indirect.wast:242", 3940.)

// return_call_indirect.wast:244
assert_return(() => call($1, "type-index", []), "return_call_indirect.wast:244", 100n);

// return_call_indirect.wast:246
assert_return(() => call($1, "type-first-i32", []), "return_call_indirect.wast:246", 32);

// return_call_indirect.wast:247
assert_return(() => call($1, "type-first-i64", []), "return_call_indirect.wast:247", 64n);

// return_call_indirect.wast:248
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xbe\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x66\x33\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\xc3\xf5\xa8\x3f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call_indirect.wast:248");  // assert_return(() => call($1, "type-first-f32", []), "return_call_indirect.wast:248", 1.32000005245)

// return_call_indirect.wast:249
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xbe\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x66\x36\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x3d\x0a\xd7\xa3\x70\x3d\xfa\x3f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call_indirect.wast:249");  // assert_return(() => call($1, "type-first-f64", []), "return_call_indirect.wast:249", 1.64)

// return_call_indirect.wast:251
assert_return(() => call($1, "type-second-i32", []), "return_call_indirect.wast:251", 32);

// return_call_indirect.wast:252
assert_return(() => call($1, "type-second-i64", []), "return_call_indirect.wast:252", 64n);

// return_call_indirect.wast:253
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xbf\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x66\x33\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x00\x00\x42\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call_indirect.wast:253");  // assert_return(() => call($1, "type-second-f32", []), "return_call_indirect.wast:253", 32.)

// return_call_indirect.wast:254
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xbf\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x66\x36\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x66\x66\x66\x66\x66\x06\x50\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call_indirect.wast:254");  // assert_return(() => call($1, "type-second-f64", []), "return_call_indirect.wast:254", 64.1)

// return_call_indirect.wast:256
assert_return(() => call($1, "dispatch", [5, 2n]), "return_call_indirect.wast:256", 2n);

// return_call_indirect.wast:257
assert_return(() => call($1, "dispatch", [5, 5n]), "return_call_indirect.wast:257", 5n);

// return_call_indirect.wast:258
assert_return(() => call($1, "dispatch", [12, 5n]), "return_call_indirect.wast:258", 120n);

// return_call_indirect.wast:259
assert_return(() => call($1, "dispatch", [17, 2n]), "return_call_indirect.wast:259", 2n);

// return_call_indirect.wast:260
assert_trap(() => call($1, "dispatch", [0, 2n]), "return_call_indirect.wast:260");

// return_call_indirect.wast:261
assert_trap(() => call($1, "dispatch", [15, 2n]), "return_call_indirect.wast:261");

// return_call_indirect.wast:262
assert_trap(() => call($1, "dispatch", [22, 2n]), "return_call_indirect.wast:262");

// return_call_indirect.wast:263
assert_trap(() => call($1, "dispatch", [-1, 2n]), "return_call_indirect.wast:263");

// return_call_indirect.wast:264
assert_trap(() => call($1, "dispatch", [1_213_432_423, 2n]), "return_call_indirect.wast:264");

// return_call_indirect.wast:266
assert_return(() => call($1, "dispatch-structural", [5]), "return_call_indirect.wast:266", 9n);

// return_call_indirect.wast:267
assert_return(() => call($1, "dispatch-structural", [5]), "return_call_indirect.wast:267", 9n);

// return_call_indirect.wast:268
assert_return(() => call($1, "dispatch-structural", [12]), "return_call_indirect.wast:268", 362_880n);

// return_call_indirect.wast:269
assert_return(() => call($1, "dispatch-structural", [17]), "return_call_indirect.wast:269", 9n);

// return_call_indirect.wast:270
assert_trap(() => call($1, "dispatch-structural", [11]), "return_call_indirect.wast:270");

// return_call_indirect.wast:271
assert_trap(() => call($1, "dispatch-structural", [16]), "return_call_indirect.wast:271");

// return_call_indirect.wast:273
assert_return(() => call($1, "call-tab", [0]), "return_call_indirect.wast:273", 306);

// return_call_indirect.wast:274
assert_return(() => call($1, "call-tab", [1]), "return_call_indirect.wast:274", 307);

// return_call_indirect.wast:275
assert_return(() => call($1, "call-tab", [2]), "return_call_indirect.wast:275", 308);

// return_call_indirect.wast:277
assert_return(() => call($1, "fac", [0n]), "return_call_indirect.wast:277", 1n);

// return_call_indirect.wast:278
assert_return(() => call($1, "fac", [1n]), "return_call_indirect.wast:278", 1n);

// return_call_indirect.wast:279
assert_return(() => call($1, "fac", [5n]), "return_call_indirect.wast:279", 120n);

// return_call_indirect.wast:280
assert_return(() => call($1, "fac", [25n]), "return_call_indirect.wast:280", 7_034_535_277_573_963_776n);

// return_call_indirect.wast:282
assert_return(() => call($1, "even", [0]), "return_call_indirect.wast:282", 44);

// return_call_indirect.wast:283
assert_return(() => call($1, "even", [1]), "return_call_indirect.wast:283", 99);

// return_call_indirect.wast:284
assert_return(() => call($1, "even", [100]), "return_call_indirect.wast:284", 44);

// return_call_indirect.wast:285
assert_return(() => call($1, "even", [77]), "return_call_indirect.wast:285", 99);

// return_call_indirect.wast:286
assert_return(() => call($1, "even", [100_000]), "return_call_indirect.wast:286", 44);

// return_call_indirect.wast:287
assert_return(() => call($1, "even", [111_111]), "return_call_indirect.wast:287", 99);

// return_call_indirect.wast:288
assert_return(() => call($1, "odd", [0]), "return_call_indirect.wast:288", 99);

// return_call_indirect.wast:289
assert_return(() => call($1, "odd", [1]), "return_call_indirect.wast:289", 44);

// return_call_indirect.wast:290
assert_return(() => call($1, "odd", [200]), "return_call_indirect.wast:290", 99);

// return_call_indirect.wast:291
assert_return(() => call($1, "odd", [77]), "return_call_indirect.wast:291", 44);

// return_call_indirect.wast:292
assert_return(() => call($1, "odd", [200_002]), "return_call_indirect.wast:292", 99);

// return_call_indirect.wast:293
assert_return(() => call($1, "odd", [300_003]), "return_call_indirect.wast:293", 44);

// return_call_indirect.wast:295
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x02\x7f\x7d\x00\x02\xbe\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0e\x63\x61\x6c\x6c\x5f\x74\x61\x69\x6c\x70\x72\x69\x6e\x74\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x96\x80\x80\x80\x00\x01\x90\x80\x80\x80\x00\x00\x02\x40\x41\x05\x43\x00\x00\xb6\x42\x10\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call_indirect.wast:295");  // assert_return(() => call($1, "call_tailprint", [5, 91.]), "return_call_indirect.wast:295")

// return_call_indirect.wast:296
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x96\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x02\x7c\x7e\x02\x7f\x7d\x02\xb9\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x09\x63\x61\x6c\x6c\x5f\x6d\x70\x6d\x72\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xaf\x80\x80\x80\x00\x01\xa9\x80\x80\x80\x00\x00\x02\x40\x44\xcd\xcc\xcc\xcc\xcc\xcc\x10\x40\x42\xe3\x00\x10\x00\xbc\x43\x66\x66\x86\x40\xbc\x46\x45\x0d\x00\x01\x41\xe3\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call_indirect.wast:296");  // assert_return(() => call($1, "call_mpmr", [4.2, 99n]), "return_call_indirect.wast:296", 99, 4.19999980927)

// return_call_indirect.wast:300
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e", "return_call_indirect.wast:300");

// return_call_indirect.wast:312
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e", "return_call_indirect.wast:312");

// return_call_indirect.wast:324
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e", "return_call_indirect.wast:324");

// return_call_indirect.wast:336
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e", "return_call_indirect.wast:336");

// return_call_indirect.wast:348
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e", "return_call_indirect.wast:348");

// return_call_indirect.wast:360
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e", "return_call_indirect.wast:360");

// return_call_indirect.wast:372
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e", "return_call_indirect.wast:372");

// return_call_indirect.wast:379
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e", "return_call_indirect.wast:379");

// return_call_indirect.wast:389
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e", "return_call_indirect.wast:389");

// return_call_indirect.wast:399
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e", "return_call_indirect.wast:399");

// return_call_indirect.wast:411
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e", "return_call_indirect.wast:411");

// return_call_indirect.wast:426
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x41\x00\x13\x00\x00\x0b", "return_call_indirect.wast:426");

// return_call_indirect.wast:434
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x0a\x8e\x80\x80\x80\x00\x01\x88\x80\x80\x80\x00\x00\x41\x00\x13\x00\x00\x45\x0b", "return_call_indirect.wast:434");

// return_call_indirect.wast:442
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7e\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x01\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x0a\x8e\x80\x80\x80\x00\x01\x88\x80\x80\x80\x00\x00\x41\x00\x13\x00\x00\x45\x0b", "return_call_indirect.wast:442");

// return_call_indirect.wast:451
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x01\x7f\x00\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x01\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x41\x00\x13\x00\x00\x0b", "return_call_indirect.wast:451");

// return_call_indirect.wast:459
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x02\x7c\x7f\x00\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x01\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x41\x00\x13\x00\x00\x0b", "return_call_indirect.wast:459");

// return_call_indirect.wast:468
let $$2 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x41\x01\x41\x00\x13\x00\x00\x0b", "return_call_indirect.wast:468");

// return_call_indirect.wast:468
let $2 = instance($$2);

// return_call_indirect.wast:474
let $$3 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x0a\x98\x80\x80\x80\x00\x01\x92\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x40\x41\x01\x41\x00\x13\x00\x00\x0b", "return_call_indirect.wast:474");

// return_call_indirect.wast:474
let $3 = instance($$3);

// return_call_indirect.wast:482
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x01\x7f\x00\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x01\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x0a\x8e\x80\x80\x80\x00\x01\x88\x80\x80\x80\x00\x00\x41\x01\x01\x13\x00\x00\x0b", "return_call_indirect.wast:482");

// return_call_indirect.wast:490
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x01\x7f\x00\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x01\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x41\x00\x42\x01\x13\x00\x00\x0b", "return_call_indirect.wast:490");

// return_call_indirect.wast:499
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x02\x7f\x7f\x00\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x01\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x0a\x90\x80\x80\x80\x00\x01\x8a\x80\x80\x80\x00\x00\x01\x41\x01\x41\x00\x13\x00\x00\x0b", "return_call_indirect.wast:499");

// return_call_indirect.wast:509
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x02\x7f\x7f\x00\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x01\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x0a\x90\x80\x80\x80\x00\x01\x8a\x80\x80\x80\x00\x00\x41\x01\x01\x41\x00\x13\x00\x00\x0b", "return_call_indirect.wast:509");

// return_call_indirect.wast:519
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x02\x7f\x7c\x00\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x01\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x0a\x98\x80\x80\x80\x00\x01\x92\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\x41\x00\x13\x00\x00\x0b", "return_call_indirect.wast:519");

// return_call_indirect.wast:529
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x02\x7c\x7f\x00\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x01\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x0a\x98\x80\x80\x80\x00\x01\x92\x80\x80\x80\x00\x00\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x00\x13\x00\x00\x0b", "return_call_indirect.wast:529");

// return_call_indirect.wast:539
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x02\x7f\x7f\x60\x01\x7f\x01\x7f\x02\x8f\x80\x80\x80\x00\x01\x03\x65\x6e\x76\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x00\x03\x82\x80\x80\x80\x00\x01\x01\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x20\x00\x13\x00\x00\x0b", "return_call_indirect.wast:539");

// return_call_indirect.wast:552
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x84\x80\x80\x80\x00\x01\x6f\x00\x0a\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x41\x00\x13\x00\x00\x0b", "return_call_indirect.wast:552");

// return_call_indirect.wast:563
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x41\x00\x13\x01\x00\x0b", "return_call_indirect.wast:563");

// return_call_indirect.wast:570
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x0a\x91\x80\x80\x80\x00\x01\x8b\x80\x80\x80\x00\x00\x41\x00\x13\x94\x98\xdb\xe2\x03\x00\x0b", "return_call_indirect.wast:570");

// return_call_indirect.wast:581
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x85\x80\x80\x80\x00\x01\x70\x01\x02\x02\x09\x8c\x80\x80\x80\x00\x01\x04\x41\x00\x0b\x02\xd2\x00\x0b\xd2\x00\x0b", "return_call_indirect.wast:581");
reinitializeRegistry();
})();

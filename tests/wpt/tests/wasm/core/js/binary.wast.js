(function binary_wast_js() {

// binary.wast:1
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00", "binary.wast:1");

// binary.wast:1
let $1 = instance($$1);

// binary.wast:2
let $$2 = module("\x00\x61\x73\x6d\x01\x00\x00\x00", "binary.wast:2");

// binary.wast:2
let $2 = instance($$2);

// binary.wast:3
let $$3 = module("\x00\x61\x73\x6d\x01\x00\x00\x00", "binary.wast:3");
let $M1 = $$3;

// binary.wast:3
let $3 = instance($M1);
let M1 = $3;

// binary.wast:4
let $$4 = module("\x00\x61\x73\x6d\x01\x00\x00\x00", "binary.wast:4");
let $M2 = $$4;

// binary.wast:4
let $4 = instance($M2);
let M2 = $4;

// binary.wast:6
assert_malformed("", "binary.wast:6");

// binary.wast:7
assert_malformed("\x01", "binary.wast:7");

// binary.wast:8
assert_malformed("\x00\x61\x73", "binary.wast:8");

// binary.wast:9
assert_malformed("\x61\x73\x6d\x00", "binary.wast:9");

// binary.wast:10
assert_malformed("\x6d\x73\x61\x00", "binary.wast:10");

// binary.wast:11
assert_malformed("\x6d\x73\x61\x00\x01\x00\x00\x00", "binary.wast:11");

// binary.wast:12
assert_malformed("\x6d\x73\x61\x00\x00\x00\x00\x01", "binary.wast:12");

// binary.wast:13
assert_malformed("\x61\x73\x6d\x01\x00\x00\x00\x00", "binary.wast:13");

// binary.wast:14
assert_malformed("\x77\x61\x73\x6d\x01\x00\x00\x00", "binary.wast:14");

// binary.wast:15
assert_malformed("\x7f\x61\x73\x6d\x01\x00\x00\x00", "binary.wast:15");

// binary.wast:16
assert_malformed("\x80\x61\x73\x6d\x01\x00\x00\x00", "binary.wast:16");

// binary.wast:17
assert_malformed("\x82\x61\x73\x6d\x01\x00\x00\x00", "binary.wast:17");

// binary.wast:18
assert_malformed("\xff\x61\x73\x6d\x01\x00\x00\x00", "binary.wast:18");

// binary.wast:21
assert_malformed("\x00\x00\x00\x01\x6d\x73\x61\x00", "binary.wast:21");

// binary.wast:24
assert_malformed("\x61\x00\x6d\x73\x00\x01\x00\x00", "binary.wast:24");

// binary.wast:25
assert_malformed("\x73\x6d\x00\x61\x00\x00\x01\x00", "binary.wast:25");

// binary.wast:28
assert_malformed("\x00\x41\x53\x4d\x01\x00\x00\x00", "binary.wast:28");

// binary.wast:31
assert_malformed("\x00\x81\xa2\x94\x01\x00\x00\x00", "binary.wast:31");

// binary.wast:34
assert_malformed("\xef\xbb\xbf\x00\x61\x73\x6d\x01\x00\x00\x00", "binary.wast:34");

// binary.wast:37
assert_malformed("\x00\x61\x73\x6d", "binary.wast:37");

// binary.wast:38
assert_malformed("\x00\x61\x73\x6d\x01", "binary.wast:38");

// binary.wast:39
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00", "binary.wast:39");

// binary.wast:40
assert_malformed("\x00\x61\x73\x6d\x00\x00\x00\x00", "binary.wast:40");

// binary.wast:41
assert_malformed("\x00\x61\x73\x6d\x0d\x00\x00\x00", "binary.wast:41");

// binary.wast:42
assert_malformed("\x00\x61\x73\x6d\x0e\x00\x00\x00", "binary.wast:42");

// binary.wast:43
assert_malformed("\x00\x61\x73\x6d\x00\x01\x00\x00", "binary.wast:43");

// binary.wast:44
assert_malformed("\x00\x61\x73\x6d\x00\x00\x01\x00", "binary.wast:44");

// binary.wast:45
assert_malformed("\x00\x61\x73\x6d\x00\x00\x00\x01", "binary.wast:45");

// binary.wast:48
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x0e\x01\x00", "binary.wast:48");

// binary.wast:49
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x7f\x01\x00", "binary.wast:49");

// binary.wast:50
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x80\x01\x00\x01\x01\x00", "binary.wast:50");

// binary.wast:51
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x81\x01\x00\x01\x01\x00", "binary.wast:51");

// binary.wast:52
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\xff\x01\x00\x01\x01\x00", "binary.wast:52");

// binary.wast:55
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x03\x02\x00\x00\x0a\x0c\x02\x04\x00\x41\x01\x1a\x05\x00\x41\x01\x1a\x0b", "binary.wast:55");

// binary.wast:76
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x06\x01\x04\x00\x41\x01\x1a", "binary.wast:76");

// binary.wast:92
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x06\x01\x04\x00\x41\x01\x1a\x0b\x03\x01\x01\x00", "binary.wast:92");

// binary.wast:112
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x06\x05\x01\x7f\x00\x41\x00\x0a\x04\x01\x02\x00\x0b", "binary.wast:112");

// binary.wast:125
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x0c\x01\x0a\x02\x80\x80\x80\x80\x10\x7f\x02\x7e\x0b", "binary.wast:125");

// binary.wast:142
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x0c\x01\x0a\x02\x80\x80\x80\x80\x10\x7f\x02\x7e\x0b", "binary.wast:142");

// binary.wast:159
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x0c\x01\x0a\x02\xff\xff\xff\xff\x0f\x7f\x02\x7e\x0b", "binary.wast:159");

// binary.wast:175
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x06\x01\x60\x02\x7f\x7f\x00\x03\x02\x01\x00\x0a\x1c\x01\x1a\x04\x80\x80\x80\x80\x04\x7f\x80\x80\x80\x80\x04\x7e\x80\x80\x80\x80\x04\x7d\x80\x80\x80\x80\x04\x7c\x0b", "binary.wast:175");

// binary.wast:194
let $$5 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x0a\x01\x08\x03\x00\x7f\x00\x7e\x02\x7d\x0b", "binary.wast:194");

// binary.wast:194
let $5 = instance($$5);

// binary.wast:209
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x03\x02\x00\x00", "binary.wast:209");

// binary.wast:219
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x0a\x04\x01\x02\x00\x0b", "binary.wast:219");

// binary.wast:228
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x03\x02\x00\x00\x0a\x04\x01\x02\x00\x0b", "binary.wast:228");

// binary.wast:239
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x07\x02\x02\x00\x0b\x02\x00\x0b", "binary.wast:239");

// binary.wast:250
let $$6 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x03\x01\x00", "binary.wast:250");

// binary.wast:250
let $6 = instance($$6);

// binary.wast:256
let $$7 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x0a\x01\x00", "binary.wast:256");

// binary.wast:256
let $7 = instance($$7);

// binary.wast:262
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x0c\x01\x03\x0b\x05\x02\x01\x00\x01\x00", "binary.wast:262");

// binary.wast:274
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x0c\x01\x01\x0b\x05\x02\x01\x00\x01\x00", "binary.wast:274");

// binary.wast:286
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x05\x03\x01\x00\x01\x0c\x01\x01", "binary.wast:286");

// binary.wast:296
let $$8 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x0c\x01\x00", "binary.wast:296");

// binary.wast:296
let $8 = instance($$8);

// binary.wast:302
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x05\x03\x01\x00\x00\x0a\x0e\x01\x0c\x00\x41\x00\x41\x00\x41\x00\xfc\x08\x00\x00\x0b\x0b\x03\x01\x01\x00", "binary.wast:302");

// binary.wast:325
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x05\x03\x01\x00\x00\x0a\x07\x01\x05\x00\xfc\x09\x00\x0b\x0b\x03\x01\x01\x00", "binary.wast:325");

// binary.wast:345
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x04\x04\x01\x70\x00\x00\x05\x03\x01\x00\x00\x09\x07\x01\x05\x70\x01\xf3\x00\x0b\x0a\x04\x01\x02\x00\x0b", "binary.wast:345");

// binary.wast:373
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x04\x04\x01\x70\x00\x00\x05\x03\x01\x00\x00\x09\x07\x01\x05\x7f\x01\xd2\x00\x0b\x0a\x04\x01\x02\x00\x0b", "binary.wast:373");

// binary.wast:401
let $$9 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x04\x04\x01\x70\x00\x00\x05\x03\x01\x00\x00\x09\x07\x01\x05\x70\x01\xd2\x00\x0b\x0a\x04\x01\x02\x00\x0b", "binary.wast:401");

// binary.wast:401
let $9 = instance($$9);

// binary.wast:426
let $$10 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x04\x04\x01\x70\x00\x00\x05\x03\x01\x00\x00\x09\x07\x01\x05\x70\x01\xd0\x70\x0b\x0a\x04\x01\x02\x00\x0b", "binary.wast:426");

// binary.wast:426
let $10 = instance($$10);

// binary.wast:452
let $$11 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x01\x00", "binary.wast:452");

// binary.wast:452
let $11 = instance($$11);

// binary.wast:458
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x07\x02\x60\x00\x00", "binary.wast:458");

// binary.wast:469
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x07\x01\x60\x00\x00\x60\x00\x00", "binary.wast:469");

// binary.wast:480
let $$12 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x05\x01\x60\x01\x7f\x00\x02\x01\x00", "binary.wast:480");

// binary.wast:480
let $12 = instance($$12);

// binary.wast:488
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x04\x01\x00\x00\x05", "binary.wast:488");

// binary.wast:498
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x05\x01\x00\x00\x05\x00", "binary.wast:498");

// binary.wast:509
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x04\x01\x00\x00\x05", "binary.wast:509");

// binary.wast:519
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x05\x01\x00\x00\x05\x00", "binary.wast:519");

// binary.wast:530
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x04\x01\x00\x00\x80", "binary.wast:530");

// binary.wast:540
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x05\x01\x00\x00\x80\x00", "binary.wast:540");

// binary.wast:553
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x05\x01\x60\x01\x7f\x00\x02\x16\x02\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x00", "binary.wast:553");

// binary.wast:572
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x09\x02\x60\x01\x7f\x00\x60\x01\x7d\x00\x02\x2b\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x00\x00\x08\x73\x70\x65\x63\x74\x65\x73\x74\x09\x70\x72\x69\x6e\x74\x5f\x66\x33\x32\x00\x01", "binary.wast:572");

// binary.wast:597
let $$13 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x01\x00", "binary.wast:597");

// binary.wast:597
let $13 = instance($$13);

// binary.wast:603
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x01\x01", "binary.wast:603");

// binary.wast:613
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x03\x01\x70\x08", "binary.wast:613");

// binary.wast:622
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x04\x01\x70\x08\x00", "binary.wast:622");

// binary.wast:632
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x06\x01\x70\x81\x00\x00\x00", "binary.wast:632");

// binary.wast:644
let $$14 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x05\x01\x00", "binary.wast:644");

// binary.wast:644
let $14 = instance($$14);

// binary.wast:650
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x05\x01\x01", "binary.wast:650");

// binary.wast:660
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x05\x02\x01\x08", "binary.wast:660");

// binary.wast:668
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x05\x03\x01\x10\x00", "binary.wast:668");

// binary.wast:677
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x05\x05\x01\x81\x00\x00\x00", "binary.wast:677");

// binary.wast:686
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x05\x05\x01\x81\x01\x00\x00", "binary.wast:686");

// binary.wast:697
let $$15 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x06\x01\x00", "binary.wast:697");

// binary.wast:697
let $15 = instance($$15);

// binary.wast:703
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x06\x06\x02\x7f\x00\x41\x00\x0b", "binary.wast:703");

// binary.wast:714
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x06\x0b\x01\x7f\x00\x41\x00\x0b\x7f\x00\x41\x00\x0b", "binary.wast:714");

// binary.wast:725
let $$16 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x03\x02\x00\x00\x07\x01\x00\x0a\x07\x02\x02\x00\x0b\x02\x00\x0b", "binary.wast:725");

// binary.wast:725
let $16 = instance($$16);

// binary.wast:737
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x03\x02\x00\x00\x07\x06\x02\x02\x66\x31\x00\x00\x0a\x07\x02\x02\x00\x0b\x02\x00\x0b", "binary.wast:737");

// binary.wast:758
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x03\x02\x00\x00\x07\x0b\x01\x02\x66\x31\x00\x00\x02\x66\x32\x00\x01\x0a\x07\x02\x02\x00\x0b\x02\x00\x0b", "binary.wast:758");

// binary.wast:779
let $$17 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x04\x04\x01\x70\x00\x01\x09\x01\x00\x0a\x04\x01\x02\x00\x0b", "binary.wast:779");

// binary.wast:779
let $17 = instance($$17);

// binary.wast:792
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x04\x04\x01\x70\x00\x01\x09\x07\x02\x00\x41\x00\x0b\x01\x00", "binary.wast:792");

// binary.wast:808
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x04\x04\x01\x70\x00\x01\x09\x0a\x02\x00\x41\x00\x0b\x01\x00\x00\x41\x00", "binary.wast:808");

// binary.wast:825
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x04\x04\x01\x70\x00\x01\x09\x0d\x01\x00\x41\x00\x0b\x01\x00\x00\x41\x00\x0b\x01\x00\x0a\x04\x01\x02\x00\x0b", "binary.wast:825");

// binary.wast:843
let $$18 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x05\x03\x01\x00\x01\x0b\x01\x00", "binary.wast:843");

// binary.wast:843
let $18 = instance($$18);

// binary.wast:851
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x05\x03\x01\x00\x01\x0b\x07\x02\x00\x41\x00\x0b\x01\x61", "binary.wast:851");

// binary.wast:864
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x05\x03\x01\x00\x01\x0b\x0d\x01\x00\x41\x00\x0b\x01\x61\x00\x41\x01\x0b\x01\x62", "binary.wast:864");

// binary.wast:877
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x05\x03\x01\x00\x01\x0b\x0c\x01\x00\x41\x03\x0b\x07\x61\x62\x63\x64\x65\x66", "binary.wast:877");

// binary.wast:891
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x05\x03\x01\x00\x01\x0b\x0c\x01\x00\x41\x00\x0b\x05\x61\x62\x63\x64\x65\x66", "binary.wast:891");

// binary.wast:905
let $$19 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x11\x01\x0f\x00\x02\x40\x41\x01\x04\x40\x41\x01\x0e\x00\x02\x0b\x0b\x0b", "binary.wast:905");

// binary.wast:905
let $19 = instance($$19);

// binary.wast:922
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x25\x0c\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00\x00\x60\x00\x00\x03\x02\x01\x00\x0a\x13\x01\x11\x00\x02\x40\x41\x01\x04\x40\x41\x01\x0e\x01\x00\x01\x02\x0b\x0b\x0b", "binary.wast:922");

// binary.wast:956
let $$20 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x08\x01\x00\x0a\x04\x01\x02\x00\x0b", "binary.wast:956");

// binary.wast:956
let $20 = instance($$20);

// binary.wast:969
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x08\x01\x00\x08\x01\x00\x0a\x04\x01\x02\x00\x0b", "binary.wast:969");

// binary.wast:986
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x03\x02\x01\x00\x0a\x07\x02\x02\x00\x0b\x02\x00\x0b", "binary.wast:986");

// binary.wast:998
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x03\x02\x00\x00\x0a\x04\x01\x02\x00\x0b\x0a\x04\x01\x02\x00\x0b", "binary.wast:998");

// binary.wast:1010
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x0c\x01\x01\x0c\x01\x01", "binary.wast:1010");

// binary.wast:1020
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x0b\x01\x00\x0b\x01\x00", "binary.wast:1020");

// binary.wast:1030
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x06\x01\x00\x06\x01\x00", "binary.wast:1030");

// binary.wast:1040
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x07\x01\x00\x07\x01\x00", "binary.wast:1040");

// binary.wast:1050
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x01\x00\x04\x01\x00", "binary.wast:1050");

// binary.wast:1060
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x09\x01\x00\x09\x01\x00", "binary.wast:1060");

// binary.wast:1070
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x01\x00\x02\x01\x00", "binary.wast:1070");

// binary.wast:1080
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x01\x00\x01\x01\x00", "binary.wast:1080");

// binary.wast:1090
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x05\x01\x00\x05\x01\x00", "binary.wast:1090");

// binary.wast:1100
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x01\x00\x01\x01\x00", "binary.wast:1100");

// binary.wast:1110
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x03\x01\x00\x02\x01\x00", "binary.wast:1110");

// binary.wast:1120
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x01\x00\x03\x01\x00", "binary.wast:1120");

// binary.wast:1130
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x05\x01\x00\x04\x01\x00", "binary.wast:1130");

// binary.wast:1140
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x06\x01\x00\x05\x01\x00", "binary.wast:1140");

// binary.wast:1150
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x07\x01\x00\x06\x01\x00", "binary.wast:1150");

// binary.wast:1160
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x08\x01\x00\x07\x01\x00", "binary.wast:1160");

// binary.wast:1172
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x09\x01\x00\x08\x01\x00", "binary.wast:1172");

// binary.wast:1184
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x0c\x01\x01\x09\x01\x00", "binary.wast:1184");

// binary.wast:1194
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x0a\x01\x00\x0c\x01\x01", "binary.wast:1194");

// binary.wast:1204
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x0b\x01\x00\x0a\x01\x00", "binary.wast:1204");

// binary.wast:1218
assert_malformed("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x08\x01\x06\x00\x00\xff\x00\x00\x0b", "binary.wast:1218");
reinitializeRegistry();
})();

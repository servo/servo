(function array_new_data_wast_js() {

// array_new_data.wast:1
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x5e\x78\x01\x60\x02\x7f\x7f\x01\x64\x00\x03\x82\x80\x80\x80\x00\x01\x01\x07\x92\x80\x80\x80\x00\x01\x0e\x61\x72\x72\x61\x79\x2d\x6e\x65\x77\x2d\x64\x61\x74\x61\x00\x00\x0c\x81\x80\x80\x80\x00\x01\x0a\x90\x80\x80\x80\x00\x01\x8a\x80\x80\x80\x00\x00\x20\x00\x20\x01\xfb\x09\x00\x00\x0b\x0b\x87\x80\x80\x80\x00\x01\x01\x04\x61\x62\x63\x64", "array_new_data.wast:1");

// array_new_data.wast:1
let $1 = instance($$1);

// array_new_data.wast:12
assert_return(() => call($1, "array-new-data", [0, 0]), "array_new_data.wast:12", "ref.array");

// array_new_data.wast:13
assert_return(() => call($1, "array-new-data", [0, 4]), "array_new_data.wast:13", "ref.array");

// array_new_data.wast:14
assert_return(() => call($1, "array-new-data", [1, 2]), "array_new_data.wast:14", "ref.array");

// array_new_data.wast:15
assert_return(() => call($1, "array-new-data", [4, 0]), "array_new_data.wast:15", "ref.array");

// array_new_data.wast:18
assert_trap(() => call($1, "array-new-data", [0, 5]), "array_new_data.wast:18");

// array_new_data.wast:19
assert_trap(() => call($1, "array-new-data", [5, 0]), "array_new_data.wast:19");

// array_new_data.wast:20
assert_trap(() => call($1, "array-new-data", [1, 4]), "array_new_data.wast:20");

// array_new_data.wast:21
assert_trap(() => call($1, "array-new-data", [4, 1]), "array_new_data.wast:21");

// array_new_data.wast:23
let $$2 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x03\x5e\x7f\x00\x5e\x7e\x00\x60\x00\x00\x03\x8d\x80\x80\x80\x00\x0c\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\xbd\x80\x80\x80\x00\x0c\x02\x66\x30\x00\x00\x02\x66\x31\x00\x01\x02\x66\x32\x00\x02\x02\x66\x33\x00\x03\x02\x66\x34\x00\x04\x02\x66\x39\x00\x05\x02\x67\x30\x00\x06\x02\x67\x31\x00\x07\x02\x67\x34\x00\x08\x02\x67\x37\x00\x09\x02\x67\x38\x00\x0a\x02\x67\x39\x00\x0b\x0c\x81\x80\x80\x80\x00\x07\x0a\xc1\x81\x80\x80\x00\x0c\x8b\x80\x80\x80\x00\x00\x41\x00\x41\x01\xfb\x09\x00\x00\x1a\x0b\x8b\x80\x80\x80\x00\x00\x41\x00\x41\x01\xfb\x09\x00\x01\x1a\x0b\x8b\x80\x80\x80\x00\x00\x41\x00\x41\x01\xfb\x09\x00\x02\x1a\x0b\x8b\x80\x80\x80\x00\x00\x41\x00\x41\x01\xfb\x09\x00\x03\x1a\x0b\x8b\x80\x80\x80\x00\x00\x41\x00\x41\x01\xfb\x09\x00\x04\x1a\x0b\x8b\x80\x80\x80\x00\x00\x41\x06\x41\x01\xfb\x09\x00\x06\x1a\x0b\x8b\x80\x80\x80\x00\x00\x41\x00\x41\x01\xfb\x09\x01\x00\x1a\x0b\x8b\x80\x80\x80\x00\x00\x41\x00\x41\x01\xfb\x09\x01\x01\x1a\x0b\x8b\x80\x80\x80\x00\x00\x41\x00\x41\x01\xfb\x09\x01\x04\x1a\x0b\x8b\x80\x80\x80\x00\x00\x41\x00\x41\x01\xfb\x09\x01\x05\x1a\x0b\x8b\x80\x80\x80\x00\x00\x41\x00\x41\x01\xfb\x09\x01\x06\x1a\x0b\x8b\x80\x80\x80\x00\x00\x41\x02\x41\x01\xfb\x09\x01\x06\x1a\x0b\x0b\xa9\x80\x80\x80\x00\x07\x01\x00\x01\x01\x31\x01\x02\x31\x32\x01\x03\x31\x32\x33\x01\x04\x31\x32\x33\x34\x01\x07\x31\x32\x33\x34\x35\x36\x37\x01\x09\x31\x32\x33\x34\x35\x36\x37\x38\x39", "array_new_data.wast:23");

// array_new_data.wast:23
let $2 = instance($$2);

// array_new_data.wast:74
assert_trap(() => call($2, "f0", []), "array_new_data.wast:74");

// array_new_data.wast:75
assert_trap(() => call($2, "f1", []), "array_new_data.wast:75");

// array_new_data.wast:76
assert_trap(() => call($2, "f2", []), "array_new_data.wast:76");

// array_new_data.wast:77
assert_trap(() => call($2, "f3", []), "array_new_data.wast:77");

// array_new_data.wast:78
assert_return(() => call($2, "f4", []), "array_new_data.wast:78");

// array_new_data.wast:79
assert_trap(() => call($2, "f9", []), "array_new_data.wast:79");

// array_new_data.wast:81
assert_trap(() => call($2, "g0", []), "array_new_data.wast:81");

// array_new_data.wast:82
assert_trap(() => call($2, "g1", []), "array_new_data.wast:82");

// array_new_data.wast:83
assert_trap(() => call($2, "g4", []), "array_new_data.wast:83");

// array_new_data.wast:84
assert_trap(() => call($2, "g7", []), "array_new_data.wast:84");

// array_new_data.wast:85
assert_return(() => call($2, "g8", []), "array_new_data.wast:85");

// array_new_data.wast:86
assert_trap(() => call($2, "g9", []), "array_new_data.wast:86");

// array_new_data.wast:89
let $$3 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x5e\x78\x01\x60\x00\x02\x7f\x7f\x03\x82\x80\x80\x80\x00\x01\x01\x07\x9b\x80\x80\x80\x00\x01\x17\x61\x72\x72\x61\x79\x2d\x6e\x65\x77\x2d\x64\x61\x74\x61\x2d\x63\x6f\x6e\x74\x65\x6e\x74\x73\x00\x00\x0c\x81\x80\x80\x80\x00\x01\x0a\xa3\x80\x80\x80\x00\x01\x9d\x80\x80\x80\x00\x01\x01\x64\x00\x41\x01\x41\x02\xfb\x09\x00\x00\x21\x00\x20\x00\x41\x00\xfb\x0d\x00\x20\x00\x41\x01\xfb\x0d\x00\x0b\x0b\x87\x80\x80\x80\x00\x01\x01\x04\xaa\xbb\xcc\xdd", "array_new_data.wast:89");

// array_new_data.wast:89
let $3 = instance($$3);

// array_new_data.wast:103
assert_return(() => call($3, "array-new-data-contents", []), "array_new_data.wast:103", 187, 204);

// array_new_data.wast:105
let $$4 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x5e\x7f\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x01\x07\xa0\x80\x80\x80\x00\x01\x1c\x61\x72\x72\x61\x79\x2d\x6e\x65\x77\x2d\x64\x61\x74\x61\x2d\x6c\x69\x74\x74\x6c\x65\x2d\x65\x6e\x64\x69\x61\x6e\x00\x00\x0c\x81\x80\x80\x80\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x00\x41\x00\x41\x01\xfb\x09\x00\x00\x41\x00\xfb\x0b\x00\x0b\x0b\x87\x80\x80\x80\x00\x01\x01\x04\xaa\xbb\xcc\xdd", "array_new_data.wast:105");

// array_new_data.wast:105
let $4 = instance($$4);

// array_new_data.wast:118
assert_return(() => call($4, "array-new-data-little-endian", []), "array_new_data.wast:118", -573_785_174);

// array_new_data.wast:120
let $$5 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x5e\x77\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x01\x07\x9c\x80\x80\x80\x00\x01\x18\x61\x72\x72\x61\x79\x2d\x6e\x65\x77\x2d\x64\x61\x74\x61\x2d\x75\x6e\x61\x6c\x69\x67\x6e\x65\x64\x00\x00\x0c\x81\x80\x80\x80\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x00\x41\x01\x41\x01\xfb\x09\x00\x00\x41\x00\xfb\x0d\x00\x0b\x0b\x86\x80\x80\x80\x00\x01\x01\x03\x00\x11\x22", "array_new_data.wast:120");

// array_new_data.wast:120
let $5 = instance($$5);

// array_new_data.wast:133
assert_return(() => call($5, "array-new-data-unaligned", []), "array_new_data.wast:133", 8_721);
reinitializeRegistry();
})();

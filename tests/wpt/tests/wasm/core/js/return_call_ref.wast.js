(function return_call_ref_wast_js() {

// return_call_ref.wast:3
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xc6\x80\x80\x80\x00\x0e\x60\x00\x00\x60\x00\x01\x7f\x60\x00\x01\x7e\x60\x00\x01\x7d\x60\x00\x01\x7c\x60\x01\x7f\x01\x7f\x60\x01\x7e\x01\x7e\x60\x01\x7d\x01\x7d\x60\x01\x7c\x01\x7c\x60\x02\x7d\x7f\x01\x7f\x60\x02\x7f\x7e\x01\x7e\x60\x02\x7c\x7d\x01\x7d\x60\x02\x7e\x7c\x01\x7c\x60\x02\x7e\x7e\x01\x7e\x03\x9e\x80\x80\x80\x00\x1d\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x01\x02\x03\x04\x01\x02\x03\x04\x01\x02\x03\x04\x00\x0d\x06\x06\x06\x06\xe1\x80\x80\x80\x00\x10\x64\x01\x00\xd2\x00\x0b\x64\x02\x00\xd2\x01\x0b\x64\x03\x00\xd2\x02\x0b\x64\x04\x00\xd2\x03\x0b\x64\x05\x00\xd2\x04\x0b\x64\x06\x00\xd2\x05\x0b\x64\x07\x00\xd2\x06\x0b\x64\x08\x00\xd2\x07\x0b\x64\x09\x00\xd2\x08\x0b\x64\x0a\x00\xd2\x09\x0b\x64\x0b\x00\xd2\x0a\x0b\x64\x0c\x00\xd2\x0b\x0b\x64\x0d\x00\xd2\x19\x0b\x64\x06\x00\xd2\x1a\x0b\x64\x06\x00\xd2\x1b\x0b\x64\x06\x00\xd2\x1c\x0b\x07\xdf\x81\x80\x80\x00\x11\x08\x74\x79\x70\x65\x2d\x69\x33\x32\x00\x0c\x08\x74\x79\x70\x65\x2d\x69\x36\x34\x00\x0d\x08\x74\x79\x70\x65\x2d\x66\x33\x32\x00\x0e\x08\x74\x79\x70\x65\x2d\x66\x36\x34\x00\x0f\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x69\x33\x32\x00\x10\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x69\x36\x34\x00\x11\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x66\x33\x32\x00\x12\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x66\x36\x34\x00\x13\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x69\x33\x32\x00\x14\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x69\x36\x34\x00\x15\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x66\x33\x32\x00\x16\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x66\x36\x34\x00\x17\x04\x6e\x75\x6c\x6c\x00\x18\x07\x66\x61\x63\x2d\x61\x63\x63\x00\x19\x05\x63\x6f\x75\x6e\x74\x00\x1a\x04\x65\x76\x65\x6e\x00\x1b\x03\x6f\x64\x64\x00\x1c\x09\xa0\x80\x80\x80\x00\x05\x03\x00\x0c\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x03\x00\x01\x19\x03\x00\x01\x1a\x03\x00\x01\x1b\x03\x00\x01\x1c\x0a\xab\x83\x80\x80\x00\x1d\x85\x80\x80\x80\x00\x00\x41\xb2\x02\x0b\x85\x80\x80\x80\x00\x00\x42\xe4\x02\x0b\x87\x80\x80\x80\x00\x00\x43\x00\x20\x73\x45\x0b\x8b\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\xc8\xae\x40\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x01\x0b\x84\x80\x80\x80\x00\x00\x20\x01\x0b\x84\x80\x80\x80\x00\x00\x20\x01\x0b\x84\x80\x80\x80\x00\x00\x20\x01\x0b\x86\x80\x80\x80\x00\x00\x23\x00\x15\x01\x0b\x86\x80\x80\x80\x00\x00\x23\x01\x15\x02\x0b\x86\x80\x80\x80\x00\x00\x23\x02\x15\x03\x0b\x86\x80\x80\x80\x00\x00\x23\x03\x15\x04\x0b\x88\x80\x80\x80\x00\x00\x41\x20\x23\x04\x15\x05\x0b\x89\x80\x80\x80\x00\x00\x42\xc0\x00\x23\x05\x15\x06\x0b\x8b\x80\x80\x80\x00\x00\x43\xc3\xf5\xa8\x3f\x23\x06\x15\x07\x0b\x8f\x80\x80\x80\x00\x00\x44\x3d\x0a\xd7\xa3\x70\x3d\xfa\x3f\x23\x07\x15\x08\x0b\x8d\x80\x80\x80\x00\x00\x43\x66\x66\x00\x42\x41\x20\x23\x08\x15\x09\x0b\x8b\x80\x80\x80\x00\x00\x41\x20\x42\xc0\x00\x23\x09\x15\x0a\x0b\x94\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\x50\x40\x43\x00\x00\x00\x42\x23\x0a\x15\x0b\x0b\x92\x80\x80\x80\x00\x00\x42\xc0\x00\x44\x66\x66\x66\x66\x66\x06\x50\x40\x23\x0b\x15\x0c\x0b\x86\x80\x80\x80\x00\x00\xd0\x00\x15\x00\x0b\x99\x80\x80\x80\x00\x00\x20\x00\x50\x04\x7e\x20\x01\x05\x20\x00\x42\x01\x7d\x20\x00\x20\x01\x7e\x23\x0c\x15\x0d\x0b\x0b\x94\x80\x80\x80\x00\x00\x20\x00\x50\x04\x7e\x20\x00\x05\x20\x00\x42\x01\x7d\x23\x0d\x15\x06\x0b\x0b\x94\x80\x80\x80\x00\x00\x20\x00\x50\x04\x7e\x42\x2c\x05\x20\x00\x42\x01\x7d\x23\x0f\x15\x06\x0b\x0b\x95\x80\x80\x80\x00\x00\x20\x00\x50\x04\x7e\x42\xe3\x00\x05\x20\x00\x42\x01\x7d\x23\x0e\x15\x06\x0b\x0b", "return_call_ref.wast:3");

// return_call_ref.wast:3
let $1 = instance($$1);

// return_call_ref.wast:168
assert_return(() => call($1, "type-i32", []), "return_call_ref.wast:168", 306);

// return_call_ref.wast:169
assert_return(() => call($1, "type-i64", []), "return_call_ref.wast:169", 356n);

// return_call_ref.wast:170
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x74\x79\x70\x65\x2d\x66\x33\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x20\x73\x45\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call_ref.wast:170");  // assert_return(() => call($1, "type-f32", []), "return_call_ref.wast:170", 3890.)

// return_call_ref.wast:171
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x74\x79\x70\x65\x2d\x66\x36\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\xc8\xae\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call_ref.wast:171");  // assert_return(() => call($1, "type-f64", []), "return_call_ref.wast:171", 3940.)

// return_call_ref.wast:173
assert_return(() => call($1, "type-first-i32", []), "return_call_ref.wast:173", 32);

// return_call_ref.wast:174
assert_return(() => call($1, "type-first-i64", []), "return_call_ref.wast:174", 64n);

// return_call_ref.wast:175
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xbe\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x66\x33\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\xc3\xf5\xa8\x3f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call_ref.wast:175");  // assert_return(() => call($1, "type-first-f32", []), "return_call_ref.wast:175", 1.32000005245)

// return_call_ref.wast:176
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xbe\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x66\x36\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x3d\x0a\xd7\xa3\x70\x3d\xfa\x3f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call_ref.wast:176");  // assert_return(() => call($1, "type-first-f64", []), "return_call_ref.wast:176", 1.64)

// return_call_ref.wast:178
assert_return(() => call($1, "type-second-i32", []), "return_call_ref.wast:178", 32);

// return_call_ref.wast:179
assert_return(() => call($1, "type-second-i64", []), "return_call_ref.wast:179", 64n);

// return_call_ref.wast:180
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xbf\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x66\x33\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x00\x00\x42\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call_ref.wast:180");  // assert_return(() => call($1, "type-second-f32", []), "return_call_ref.wast:180", 32.)

// return_call_ref.wast:181
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xbf\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x66\x36\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x66\x66\x66\x66\x66\x06\x50\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call_ref.wast:181");  // assert_return(() => call($1, "type-second-f64", []), "return_call_ref.wast:181", 64.1)

// return_call_ref.wast:183
assert_trap(() => call($1, "null", []), "return_call_ref.wast:183");

// return_call_ref.wast:185
assert_return(() => call($1, "fac-acc", [0n, 1n]), "return_call_ref.wast:185", 1n);

// return_call_ref.wast:186
assert_return(() => call($1, "fac-acc", [1n, 1n]), "return_call_ref.wast:186", 1n);

// return_call_ref.wast:187
assert_return(() => call($1, "fac-acc", [5n, 1n]), "return_call_ref.wast:187", 120n);

// return_call_ref.wast:188
assert_return(() => call($1, "fac-acc", [25n, 1n]), "return_call_ref.wast:188", 7_034_535_277_573_963_776n);

// return_call_ref.wast:193
assert_return(() => call($1, "count", [0n]), "return_call_ref.wast:193", 0n);

// return_call_ref.wast:194
assert_return(() => call($1, "count", [1_000n]), "return_call_ref.wast:194", 0n);

// return_call_ref.wast:195
assert_return(() => call($1, "count", [1_000_000n]), "return_call_ref.wast:195", 0n);

// return_call_ref.wast:197
assert_return(() => call($1, "even", [0n]), "return_call_ref.wast:197", 44n);

// return_call_ref.wast:198
assert_return(() => call($1, "even", [1n]), "return_call_ref.wast:198", 99n);

// return_call_ref.wast:199
assert_return(() => call($1, "even", [100n]), "return_call_ref.wast:199", 44n);

// return_call_ref.wast:200
assert_return(() => call($1, "even", [77n]), "return_call_ref.wast:200", 99n);

// return_call_ref.wast:201
assert_return(() => call($1, "even", [1_000_000n]), "return_call_ref.wast:201", 44n);

// return_call_ref.wast:202
assert_return(() => call($1, "even", [1_000_001n]), "return_call_ref.wast:202", 99n);

// return_call_ref.wast:203
assert_return(() => call($1, "odd", [0n]), "return_call_ref.wast:203", 99n);

// return_call_ref.wast:204
assert_return(() => call($1, "odd", [1n]), "return_call_ref.wast:204", 44n);

// return_call_ref.wast:205
assert_return(() => call($1, "odd", [200n]), "return_call_ref.wast:205", 99n);

// return_call_ref.wast:206
assert_return(() => call($1, "odd", [77n]), "return_call_ref.wast:206", 44n);

// return_call_ref.wast:207
assert_return(() => call($1, "odd", [1_000_000n]), "return_call_ref.wast:207", 99n);

// return_call_ref.wast:208
assert_return(() => call($1, "odd", [999_999n]), "return_call_ref.wast:208", 44n);

// return_call_ref.wast:213
let $$2 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x97\x80\x80\x80\x00\x05\x60\x00\x00\x60\x00\x01\x64\x00\x60\x00\x01\x63\x00\x60\x00\x01\x64\x70\x60\x00\x01\x70\x03\x8a\x80\x80\x80\x00\x09\x01\x02\x02\x03\x03\x04\x04\x04\x04\x09\x88\x80\x80\x80\x00\x01\x03\x00\x04\x00\x02\x04\x08\x0a\xe4\x80\x80\x80\x00\x09\x86\x80\x80\x80\x00\x00\xd2\x00\x15\x01\x0b\x86\x80\x80\x80\x00\x00\xd2\x00\x15\x01\x0b\x86\x80\x80\x80\x00\x00\xd2\x02\x15\x02\x0b\x86\x80\x80\x80\x00\x00\xd2\x00\x15\x01\x0b\x86\x80\x80\x80\x00\x00\xd2\x04\x15\x03\x0b\x86\x80\x80\x80\x00\x00\xd2\x00\x15\x01\x0b\x86\x80\x80\x80\x00\x00\xd2\x02\x15\x02\x0b\x86\x80\x80\x80\x00\x00\xd2\x04\x15\x03\x0b\x86\x80\x80\x80\x00\x00\xd2\x08\x15\x04\x0b", "return_call_ref.wast:213");

// return_call_ref.wast:213
let $2 = instance($$2);

// return_call_ref.wast:231
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8e\x80\x80\x80\x00\x03\x60\x00\x00\x60\x00\x01\x63\x00\x60\x00\x01\x64\x00\x03\x83\x80\x80\x80\x00\x02\x02\x01\x09\x85\x80\x80\x80\x00\x01\x03\x00\x01\x01\x0a\x97\x80\x80\x80\x00\x02\x86\x80\x80\x80\x00\x00\xd2\x01\x15\x01\x0b\x86\x80\x80\x80\x00\x00\xd2\x01\x15\x01\x0b", "return_call_ref.wast:231");

// return_call_ref.wast:242
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8e\x80\x80\x80\x00\x03\x60\x00\x00\x60\x00\x01\x64\x70\x60\x00\x01\x64\x00\x03\x83\x80\x80\x80\x00\x02\x02\x01\x09\x85\x80\x80\x80\x00\x01\x03\x00\x01\x01\x0a\x97\x80\x80\x80\x00\x02\x86\x80\x80\x80\x00\x00\xd2\x01\x15\x01\x0b\x86\x80\x80\x80\x00\x00\xd2\x01\x15\x01\x0b", "return_call_ref.wast:242");

// return_call_ref.wast:253
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x00\x60\x00\x01\x70\x60\x00\x01\x64\x00\x03\x83\x80\x80\x80\x00\x02\x02\x01\x09\x85\x80\x80\x80\x00\x01\x03\x00\x01\x01\x0a\x97\x80\x80\x80\x00\x02\x86\x80\x80\x80\x00\x00\xd2\x01\x15\x01\x0b\x86\x80\x80\x80\x00\x00\xd2\x01\x15\x01\x0b", "return_call_ref.wast:253");

// return_call_ref.wast:264
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8e\x80\x80\x80\x00\x03\x60\x00\x00\x60\x00\x01\x64\x70\x60\x00\x01\x63\x00\x03\x83\x80\x80\x80\x00\x02\x02\x01\x09\x85\x80\x80\x80\x00\x01\x03\x00\x01\x01\x0a\x97\x80\x80\x80\x00\x02\x86\x80\x80\x80\x00\x00\xd2\x01\x15\x01\x0b\x86\x80\x80\x80\x00\x00\xd2\x01\x15\x01\x0b", "return_call_ref.wast:264");

// return_call_ref.wast:275
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x00\x60\x00\x01\x70\x60\x00\x01\x63\x00\x03\x83\x80\x80\x80\x00\x02\x02\x01\x09\x85\x80\x80\x80\x00\x01\x03\x00\x01\x01\x0a\x97\x80\x80\x80\x00\x02\x86\x80\x80\x80\x00\x00\xd2\x01\x15\x01\x0b\x86\x80\x80\x80\x00\x00\xd2\x01\x15\x01\x0b", "return_call_ref.wast:275");

// return_call_ref.wast:286
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x01\x70\x60\x00\x01\x64\x70\x03\x83\x80\x80\x80\x00\x02\x01\x00\x09\x85\x80\x80\x80\x00\x01\x03\x00\x01\x01\x0a\x97\x80\x80\x80\x00\x02\x86\x80\x80\x80\x00\x00\xd2\x01\x15\x00\x0b\x86\x80\x80\x80\x00\x00\xd2\x01\x15\x00\x0b", "return_call_ref.wast:286");

// return_call_ref.wast:299
let $$3 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x07\x8f\x80\x80\x80\x00\x01\x0b\x75\x6e\x72\x65\x61\x63\x68\x61\x62\x6c\x65\x00\x00\x0a\x8b\x80\x80\x80\x00\x01\x85\x80\x80\x80\x00\x00\x00\x15\x00\x0b", "return_call_ref.wast:299");

// return_call_ref.wast:299
let $3 = instance($$3);

// return_call_ref.wast:306
assert_trap(() => call($3, "unreachable", []), "return_call_ref.wast:306");

// return_call_ref.wast:308
let $$4 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x01\x7f\x01\x7f\x60\x00\x01\x7f\x03\x83\x80\x80\x80\x00\x02\x00\x01\x07\x8f\x80\x80\x80\x00\x01\x0b\x75\x6e\x72\x65\x61\x63\x68\x61\x62\x6c\x65\x00\x01\x09\x85\x80\x80\x80\x00\x01\x03\x00\x01\x00\x0a\x96\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x87\x80\x80\x80\x00\x00\x00\xd2\x00\x15\x00\x0b", "return_call_ref.wast:308");

// return_call_ref.wast:308
let $4 = instance($$4);

// return_call_ref.wast:319
assert_trap(() => call($4, "unreachable", []), "return_call_ref.wast:319");

// return_call_ref.wast:321
let $$5 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x01\x7f\x01\x7f\x60\x00\x01\x7f\x03\x83\x80\x80\x80\x00\x02\x00\x01\x07\x8f\x80\x80\x80\x00\x01\x0b\x75\x6e\x72\x65\x61\x63\x68\x61\x62\x6c\x65\x00\x01\x09\x85\x80\x80\x80\x00\x01\x03\x00\x01\x00\x0a\x9a\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x8b\x80\x80\x80\x00\x00\x00\x41\x00\xd2\x00\x15\x00\x41\x00\x0b", "return_call_ref.wast:321");

// return_call_ref.wast:321
let $5 = instance($$5);

// return_call_ref.wast:334
assert_trap(() => call($5, "unreachable", []), "return_call_ref.wast:334");

// return_call_ref.wast:336
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x01\x7f\x01\x7f\x60\x00\x01\x7f\x03\x83\x80\x80\x80\x00\x02\x00\x01\x07\x8f\x80\x80\x80\x00\x01\x0b\x75\x6e\x72\x65\x61\x63\x68\x61\x62\x6c\x65\x00\x01\x09\x85\x80\x80\x80\x00\x01\x03\x00\x01\x00\x0a\x98\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x89\x80\x80\x80\x00\x00\x00\x42\x00\xd2\x00\x15\x00\x0b", "return_call_ref.wast:336");

// return_call_ref.wast:352
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x01\x7f\x01\x7f\x60\x00\x01\x7f\x03\x83\x80\x80\x80\x00\x02\x00\x01\x07\x8f\x80\x80\x80\x00\x01\x0b\x75\x6e\x72\x65\x61\x63\x68\x61\x62\x6c\x65\x00\x01\x09\x85\x80\x80\x80\x00\x01\x03\x00\x01\x00\x0a\x98\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x89\x80\x80\x80\x00\x00\x00\xd2\x00\x15\x00\x42\x00\x0b", "return_call_ref.wast:352");

// return_call_ref.wast:368
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x6f\x00\x03\x82\x80\x80\x80\x00\x01\x01\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x20\x00\x15\x00\x0b", "return_call_ref.wast:368");

// return_call_ref.wast:378
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x70\x00\x03\x82\x80\x80\x80\x00\x01\x01\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x20\x00\x15\x00\x0b", "return_call_ref.wast:378");

// return_call_ref.wast:388
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8c\x80\x80\x80\x00\x02\x60\x00\x02\x7f\x7f\x60\x01\x64\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x01\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x20\x00\x15\x00\x0b", "return_call_ref.wast:388");
reinitializeRegistry();
})();

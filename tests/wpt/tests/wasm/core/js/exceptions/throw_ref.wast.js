(function throw_ref_wast_js() {

// throw_ref.wast:3
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x00\x60\x01\x7f\x01\x7f\x60\x01\x69\x00\x03\x88\x80\x80\x80\x00\x07\x00\x01\x00\x01\x01\x01\x00\x0d\x85\x80\x80\x80\x00\x02\x00\x00\x00\x00\x07\x9d\x81\x80\x80\x00\x07\x11\x63\x61\x74\x63\x68\x2d\x74\x68\x72\x6f\x77\x5f\x72\x65\x66\x2d\x30\x00\x00\x11\x63\x61\x74\x63\x68\x2d\x74\x68\x72\x6f\x77\x5f\x72\x65\x66\x2d\x31\x00\x01\x14\x63\x61\x74\x63\x68\x61\x6c\x6c\x2d\x74\x68\x72\x6f\x77\x5f\x72\x65\x66\x2d\x30\x00\x02\x14\x63\x61\x74\x63\x68\x61\x6c\x6c\x2d\x74\x68\x72\x6f\x77\x5f\x72\x65\x66\x2d\x31\x00\x03\x10\x74\x68\x72\x6f\x77\x5f\x72\x65\x66\x2d\x6e\x65\x73\x74\x65\x64\x00\x04\x11\x74\x68\x72\x6f\x77\x5f\x72\x65\x66\x2d\x72\x65\x63\x61\x74\x63\x68\x00\x05\x1c\x74\x68\x72\x6f\x77\x5f\x72\x65\x66\x2d\x73\x74\x61\x63\x6b\x2d\x70\x6f\x6c\x79\x6d\x6f\x72\x70\x68\x69\x73\x6d\x00\x06\x0a\xf3\x81\x80\x80\x00\x07\x90\x80\x80\x80\x00\x00\x02\x69\x1f\x40\x01\x01\x00\x00\x08\x00\x0b\x00\x0b\x0a\x0b\x9a\x80\x80\x80\x00\x00\x02\x69\x1f\x7f\x01\x01\x00\x00\x08\x00\x0b\x0f\x0b\x20\x00\x45\x04\x02\x0a\x05\x1a\x0b\x41\x17\x0b\x8e\x80\x80\x80\x00\x00\x02\x69\x1f\x69\x01\x03\x00\x08\x00\x0b\x0b\x0a\x0b\x99\x80\x80\x80\x00\x00\x02\x69\x1f\x7f\x01\x03\x00\x08\x00\x0b\x0f\x0b\x20\x00\x45\x04\x02\x0a\x05\x1a\x0b\x41\x17\x0b\xba\x80\x80\x80\x00\x01\x02\x69\x02\x69\x1f\x7f\x01\x01\x01\x00\x08\x01\x0b\x0f\x0b\x21\x01\x02\x69\x1f\x7f\x01\x01\x00\x00\x08\x00\x0b\x0f\x0b\x21\x02\x20\x00\x41\x00\x46\x04\x40\x20\x01\x0a\x0b\x20\x00\x41\x01\x46\x04\x40\x20\x02\x0a\x0b\x41\x17\x0b\xac\x80\x80\x80\x00\x01\x01\x69\x02\x69\x1f\x7f\x01\x01\x00\x00\x08\x00\x0b\x0f\x0b\x21\x01\x02\x69\x1f\x7f\x01\x01\x00\x00\x20\x00\x45\x04\x40\x20\x01\x0a\x0b\x41\x2a\x0b\x0f\x0b\x1a\x41\x17\x0b\x98\x80\x80\x80\x00\x01\x01\x69\x02\x69\x1f\x7c\x01\x01\x00\x00\x08\x00\x0b\x00\x0b\x21\x00\x41\x01\x20\x00\x0a\x0b", "throw_ref.wast:3");

// throw_ref.wast:3
let $1 = instance($$1);

// throw_ref.wast:99
assert_exception(() => call($1, "catch-throw_ref-0", []), "throw_ref.wast:99");

// throw_ref.wast:101
assert_exception(() => call($1, "catch-throw_ref-1", [0]), "throw_ref.wast:101");

// throw_ref.wast:102
assert_return(() => call($1, "catch-throw_ref-1", [1]), "throw_ref.wast:102", 23);

// throw_ref.wast:104
assert_exception(() => call($1, "catchall-throw_ref-0", []), "throw_ref.wast:104");

// throw_ref.wast:106
assert_exception(() => call($1, "catchall-throw_ref-1", [0]), "throw_ref.wast:106");

// throw_ref.wast:107
assert_return(() => call($1, "catchall-throw_ref-1", [1]), "throw_ref.wast:107", 23);

// throw_ref.wast:108
assert_exception(() => call($1, "throw_ref-nested", [0]), "throw_ref.wast:108");

// throw_ref.wast:109
assert_exception(() => call($1, "throw_ref-nested", [1]), "throw_ref.wast:109");

// throw_ref.wast:110
assert_return(() => call($1, "throw_ref-nested", [2]), "throw_ref.wast:110", 23);

// throw_ref.wast:112
assert_return(() => call($1, "throw_ref-recatch", [0]), "throw_ref.wast:112", 23);

// throw_ref.wast:113
assert_return(() => call($1, "throw_ref-recatch", [1]), "throw_ref.wast:113", 42);

// throw_ref.wast:115
assert_exception(() => call($1, "throw_ref-stack-polymorphism", []), "throw_ref.wast:115");

// throw_ref.wast:117
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x89\x80\x80\x80\x00\x01\x83\x80\x80\x80\x00\x00\x0a\x0b", "throw_ref.wast:117");

// throw_ref.wast:118
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8c\x80\x80\x80\x00\x01\x86\x80\x80\x80\x00\x00\x02\x40\x0a\x0b\x0b", "throw_ref.wast:118");
reinitializeRegistry();
})();

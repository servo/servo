(function simd_load_wast_js() {

// simd_load.wast:3
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x8d\x80\x80\x80\x00\x01\x09\x76\x31\x32\x38\x2e\x6c\x6f\x61\x64\x00\x00\x0a\x8e\x80\x80\x80\x00\x01\x88\x80\x80\x80\x00\x00\x41\x00\xfd\x00\x04\x00\x0b\x0b\x9a\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x14\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03", "simd_load.wast:3");

// simd_load.wast:3
let $1 = instance($$1);

// simd_load.wast:11
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7b\x02\xb9\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x09\x76\x31\x32\x38\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xbc\x80\x80\x80\x00\x01\xb6\x80\x80\x80\x00\x00\x02\x40\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "simd_load.wast:11");  // assert_return(() => call($1, "v128.load", []), "simd_load.wast:11", v128("0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15"))

// simd_load.wast:12
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7b\x02\xb9\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x09\x76\x31\x32\x38\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xbc\x80\x80\x80\x00\x01\xb6\x80\x80\x80\x00\x00\x02\x40\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "simd_load.wast:12");  // assert_return(() => call($1, "v128.load", []), "simd_load.wast:12", v128("256 770 1_284 1_798 2_312 2_826 3_340 3_854"))

// simd_load.wast:13
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7b\x02\xb9\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x09\x76\x31\x32\x38\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xbc\x80\x80\x80\x00\x01\xb6\x80\x80\x80\x00\x00\x02\x40\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "simd_load.wast:13");  // assert_return(() => call($1, "v128.load", []), "simd_load.wast:13", v128("50_462_976 117_835_012 185_207_048 252_579_084"))

// simd_load.wast:18
let $$2 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\xa3\x80\x80\x80\x00\x01\x1f\x61\x73\x2d\x69\x38\x78\x31\x36\x5f\x65\x78\x74\x72\x61\x63\x74\x5f\x6c\x61\x6e\x65\x5f\x73\x2d\x76\x61\x6c\x75\x65\x2f\x30\x00\x00\x0a\x91\x80\x80\x80\x00\x01\x8b\x80\x80\x80\x00\x00\x41\x00\xfd\x00\x04\x00\xfd\x15\x00\x0b\x0b\x9a\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x14\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03", "simd_load.wast:18");

// simd_load.wast:18
let $2 = instance($$2);

// simd_load.wast:24
assert_return(() => call($2, "as-i8x16_extract_lane_s-value/0", []), "simd_load.wast:24", 0);

// simd_load.wast:26
let $$3 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x97\x80\x80\x80\x00\x01\x13\x61\x73\x2d\x69\x38\x78\x31\x36\x2e\x65\x71\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x00\x0a\x96\x80\x80\x80\x00\x01\x90\x80\x80\x80\x00\x00\x41\x00\xfd\x00\x04\x00\x41\x00\xfd\x00\x04\x10\xfd\x23\x0b\x0b\x9a\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x14\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03", "simd_load.wast:26");

// simd_load.wast:26
let $3 = instance($$3);

// simd_load.wast:32
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7b\x02\xc3\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x13\x61\x73\x2d\x69\x38\x78\x31\x36\x2e\x65\x71\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xbc\x80\x80\x80\x00\x01\xb6\x80\x80\x80\x00\x00\x02\x40\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "simd_load.wast:32");  // assert_return(() => call($3, "as-i8x16.eq-operand", []), "simd_load.wast:32", v128("-1 0 0 0"))

// simd_load.wast:34
let $$4 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x01\x7b\x60\x00\x01\x7f\x03\x83\x80\x80\x80\x00\x02\x00\x01\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\xb3\x80\x80\x80\x00\x02\x13\x61\x73\x2d\x76\x31\x32\x38\x2e\x6e\x6f\x74\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x00\x19\x61\x73\x2d\x69\x38\x78\x31\x36\x2e\x61\x6c\x6c\x5f\x74\x72\x75\x65\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x0a\x9f\x80\x80\x80\x00\x02\x8a\x80\x80\x80\x00\x00\x41\x00\xfd\x00\x04\x00\xfd\x4d\x0b\x8a\x80\x80\x80\x00\x00\x41\x00\xfd\x00\x04\x00\xfd\x63\x0b\x0b\x9a\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x14\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03", "simd_load.wast:34");

// simd_load.wast:34
let $4 = instance($$4);

// simd_load.wast:43
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7b\x02\xc3\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x13\x61\x73\x2d\x76\x31\x32\x38\x2e\x6e\x6f\x74\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xbc\x80\x80\x80\x00\x01\xb6\x80\x80\x80\x00\x00\x02\x40\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\xff\xfe\xfd\xfc\xfb\xfa\xf9\xf8\xf7\xf6\xf5\xf4\xf3\xf2\xf1\xf0\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "simd_load.wast:43");  // assert_return(() => call($4, "as-v128.not-operand", []), "simd_load.wast:43", v128("-50_462_977 -117_835_013 -185_207_049 -252_579_085"))

// simd_load.wast:44
assert_return(() => call($4, "as-i8x16.all_true-operand", []), "simd_load.wast:44", 0);

// simd_load.wast:46
let $$5 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x9d\x80\x80\x80\x00\x01\x19\x61\x73\x2d\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x00\x0a\x9c\x80\x80\x80\x00\x01\x96\x80\x80\x80\x00\x00\x41\x00\xfd\x00\x04\x00\x41\x10\xfd\x00\x04\x00\x41\x20\xfd\x00\x04\x00\xfd\x52\x0b\x0b\xc0\x80\x80\x80\x00\x03\x00\x41\x00\x0b\x10\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\x00\x41\x10\x0b\x10\xbb\xbb\xbb\xbb\xbb\xbb\xbb\xbb\xbb\xbb\xbb\xbb\xbb\xbb\xbb\xbb\x00\x41\x20\x0b\x10\xf0\xf0\xf0\xf0\xff\xff\xff\xff\x00\x00\x00\x00\xff\x00\xff\x00", "simd_load.wast:46");

// simd_load.wast:46
let $5 = instance($$5);

// simd_load.wast:54
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7b\x02\xc9\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x19\x61\x73\x2d\x76\x31\x32\x38\x2e\x62\x69\x74\x73\x65\x6c\x65\x63\x74\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xbc\x80\x80\x80\x00\x01\xb6\x80\x80\x80\x00\x00\x02\x40\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\xab\xab\xab\xab\xaa\xaa\xaa\xaa\xbb\xbb\xbb\xbb\xaa\xbb\xaa\xbb\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($5)),  "run", []), "simd_load.wast:54");  // assert_return(() => call($5, "as-v128.bitselect-operand", []), "simd_load.wast:54", v128("-1_414_812_757 -1_431_655_766 -1_145_324_613 -1_146_438_742"))

// simd_load.wast:56
let $$6 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x98\x80\x80\x80\x00\x01\x14\x61\x73\x2d\x69\x38\x78\x31\x36\x2e\x73\x68\x6c\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x00\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x00\xfd\x00\x04\x00\x41\x01\xfd\x6b\x0b\x0b\x96\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x10\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa", "simd_load.wast:56");

// simd_load.wast:56
let $6 = instance($$6);

// simd_load.wast:62
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7b\x02\xc4\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x14\x61\x73\x2d\x69\x38\x78\x31\x36\x2e\x73\x68\x6c\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xbc\x80\x80\x80\x00\x01\xb6\x80\x80\x80\x00\x00\x02\x40\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\x54\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($6)),  "run", []), "simd_load.wast:62");  // assert_return(() => call($6, "as-i8x16.shl-operand", []), "simd_load.wast:62", v128("1_414_812_756 1_414_812_756 1_414_812_756 1_414_812_756"))

// simd_load.wast:64
let $$7 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x96\x80\x80\x80\x00\x01\x12\x61\x73\x2d\x61\x64\x64\x2f\x73\x75\x62\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x00\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x41\x00\xfd\x00\x04\x00\x41\x10\xfd\x00\x04\x00\xfd\x6e\x41\x10\xfd\x00\x04\x00\xfd\x71\x0b\x0b\xab\x80\x80\x80\x00\x02\x00\x41\x00\x0b\x10\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x00\x41\x10\x0b\x10\x03\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00", "simd_load.wast:64");

// simd_load.wast:64
let $7 = instance($$7);

// simd_load.wast:76
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7b\x02\xc2\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x12\x61\x73\x2d\x61\x64\x64\x2f\x73\x75\x62\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xbc\x80\x80\x80\x00\x01\xb6\x80\x80\x80\x00\x00\x02\x40\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($7)),  "run", []), "simd_load.wast:76");  // assert_return(() => call($7, "as-add/sub-operand", []), "simd_load.wast:76", v128("2 2 2 2"))

// simd_load.wast:78
let $$8 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x98\x80\x80\x80\x00\x01\x14\x61\x73\x2d\x66\x33\x32\x78\x34\x2e\x6d\x75\x6c\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x00\x0a\x97\x80\x80\x80\x00\x01\x91\x80\x80\x80\x00\x00\x41\x00\xfd\x00\x04\x00\x41\x10\xfd\x00\x04\x00\xfd\xe6\x01\x0b\x0b\xab\x80\x80\x80\x00\x02\x00\x41\x00\x0b\x10\x00\x00\x00\x43\x00\x00\x80\x3f\x66\x66\xe6\x3f\x00\x00\x80\xbf\x00\x41\x10\x0b\x10\x00\x00\x00\x40\x00\x00\x00\x40\x00\x00\x00\x40\x00\x00\x00\x40", "simd_load.wast:78");

// simd_load.wast:78
let $8 = instance($$8);

// simd_load.wast:85
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7b\x02\xc4\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x14\x61\x73\x2d\x66\x33\x32\x78\x34\x2e\x6d\x75\x6c\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xbc\x80\x80\x80\x00\x01\xb6\x80\x80\x80\x00\x00\x02\x40\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x00\x80\x43\x00\x00\x00\x40\x66\x66\x66\x40\x00\x00\x00\xc0\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($8)),  "run", []), "simd_load.wast:85");  // assert_return(() => call($8, "as-f32x4.mul-operand", []), "simd_load.wast:85", v128("256. 2. 3.59999990463 -2."))

// simd_load.wast:87
let $$9 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x98\x80\x80\x80\x00\x01\x14\x61\x73\x2d\x66\x33\x32\x78\x34\x2e\x61\x62\x73\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x00\x0a\x91\x80\x80\x80\x00\x01\x8b\x80\x80\x80\x00\x00\x41\x00\xfd\x00\x04\x00\xfd\xe0\x01\x0b\x0b\x96\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff", "simd_load.wast:87");

// simd_load.wast:87
let $9 = instance($$9);

// simd_load.wast:93
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7b\x02\xc4\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x14\x61\x73\x2d\x66\x33\x32\x78\x34\x2e\x61\x62\x73\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xbc\x80\x80\x80\x00\x01\xb6\x80\x80\x80\x00\x00\x02\x40\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\xff\xff\xff\x7f\xff\xff\xff\x7f\xff\xff\xff\x7f\xff\xff\xff\x7f\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($9)),  "run", []), "simd_load.wast:93");  // assert_return(() => call($9, "as-f32x4.abs-operand", []), "simd_load.wast:93", v128("2_147_483_647 2_147_483_647 2_147_483_647 2_147_483_647"))

// simd_load.wast:95
let $$10 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x98\x80\x80\x80\x00\x01\x14\x61\x73\x2d\x66\x33\x32\x78\x34\x2e\x6d\x69\x6e\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x00\x0a\x97\x80\x80\x80\x00\x01\x91\x80\x80\x80\x00\x00\x41\x00\xfd\x00\x04\x00\x41\x01\xfd\x00\x04\x10\xfd\xe8\x01\x0b\x0b\xab\x80\x80\x80\x00\x02\x00\x41\x00\x0b\x10\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\x00\x41\x10\x0b\x10\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00", "simd_load.wast:95");

// simd_load.wast:95
let $10 = instance($$10);

// simd_load.wast:102
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7b\x02\xc4\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x14\x61\x73\x2d\x66\x33\x32\x78\x34\x2e\x6d\x69\x6e\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xbc\x80\x80\x80\x00\x01\xb6\x80\x80\x80\x00\x00\x02\x40\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($10)),  "run", []), "simd_load.wast:102");  // assert_return(() => call($10, "as-f32x4.min-operand", []), "simd_load.wast:102", v128("-1_431_655_766 -1_431_655_766 -1_431_655_766 -1_431_655_766"))

// simd_load.wast:104
let $$11 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\xa6\x80\x80\x80\x00\x01\x22\x61\x73\x2d\x69\x33\x32\x78\x34\x2e\x74\x72\x75\x6e\x63\x5f\x73\x61\x74\x5f\x66\x33\x32\x78\x34\x5f\x73\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x00\x0a\x91\x80\x80\x80\x00\x01\x8b\x80\x80\x80\x00\x00\x41\x00\xfd\x00\x04\x00\xfd\xf8\x01\x0b\x0b\x96\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x10\x00\x00\x00\x43\x00\x00\x80\x3f\x66\x66\xe6\x3f\x00\x00\x80\xbf", "simd_load.wast:104");

// simd_load.wast:104
let $11 = instance($$11);

// simd_load.wast:110
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7b\x02\xd2\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x22\x61\x73\x2d\x69\x33\x32\x78\x34\x2e\x74\x72\x75\x6e\x63\x5f\x73\x61\x74\x5f\x66\x33\x32\x78\x34\x5f\x73\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xbc\x80\x80\x80\x00\x01\xb6\x80\x80\x80\x00\x00\x02\x40\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x80\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\xff\xff\xff\xff\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($11)),  "run", []), "simd_load.wast:110");  // assert_return(() => call($11, "as-i32x4.trunc_sat_f32x4_s-operand", []), "simd_load.wast:110", v128("128 1 1 -1"))

// simd_load.wast:112
let $$12 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\xa4\x80\x80\x80\x00\x01\x20\x61\x73\x2d\x66\x33\x32\x78\x34\x2e\x63\x6f\x6e\x76\x65\x72\x74\x5f\x69\x33\x32\x78\x34\x5f\x75\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x00\x0a\x91\x80\x80\x80\x00\x01\x8b\x80\x80\x80\x00\x00\x41\x00\xfd\x00\x04\x00\xfd\xfb\x01\x0b\x0b\x96\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x10\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00", "simd_load.wast:112");

// simd_load.wast:112
let $12 = instance($$12);

// simd_load.wast:118
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7b\x02\xd0\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x20\x61\x73\x2d\x66\x33\x32\x78\x34\x2e\x63\x6f\x6e\x76\x65\x72\x74\x5f\x69\x33\x32\x78\x34\x5f\x75\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xbc\x80\x80\x80\x00\x01\xb6\x80\x80\x80\x00\x00\x02\x40\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x00\x00\x40\x00\x00\x00\x40\x00\x00\x00\x40\x00\x00\x00\x40\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($12)),  "run", []), "simd_load.wast:118");  // assert_return(() => call($12, "as-f32x4.convert_i32x4_u-operand", []), "simd_load.wast:118", v128("2. 2. 2. 2."))

// simd_load.wast:120
let $$13 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x9c\x80\x80\x80\x00\x01\x18\x61\x73\x2d\x69\x38\x78\x31\x36\x2e\x73\x77\x69\x7a\x7a\x6c\x65\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x00\x0a\x96\x80\x80\x80\x00\x01\x90\x80\x80\x80\x00\x00\x41\x00\xfd\x00\x04\x00\x41\x01\xfd\x00\x04\x0f\xfd\x0e\x0b\x0b\xab\x80\x80\x80\x00\x02\x00\x41\x00\x0b\x10\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x00\x41\x10\x0b\x10\x0f\x0e\x0d\x0c\x0b\x0a\x09\x08\x07\x06\x05\x04\x03\x02\x01\x00", "simd_load.wast:120");

// simd_load.wast:120
let $13 = instance($$13);

// simd_load.wast:127
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7b\x02\xc8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x18\x61\x73\x2d\x69\x38\x78\x31\x36\x2e\x73\x77\x69\x7a\x7a\x6c\x65\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xbc\x80\x80\x80\x00\x01\xb6\x80\x80\x80\x00\x00\x02\x40\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x73\x72\x71\x70\x6f\x6e\x6d\x6c\x6b\x6a\x69\x68\x67\x66\x65\x64\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($13)),  "run", []), "simd_load.wast:127");  // assert_return(() => call($13, "as-i8x16.swizzle-operand", []), "simd_load.wast:127", v128("115 114 113 112 111 110 109 108 107 106 105 104 103 102 101 100"))

// simd_load.wast:129
let $$14 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7b\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x8f\x80\x80\x80\x00\x01\x0b\x61\x73\x2d\x62\x72\x2d\x76\x61\x6c\x75\x65\x00\x00\x0a\x93\x80\x80\x80\x00\x01\x8d\x80\x80\x80\x00\x00\x02\x7b\x41\x00\xfd\x00\x04\x00\x0c\x00\x0b\x0b\x0b\x9a\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x14\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03", "simd_load.wast:129");

// simd_load.wast:129
let $14 = instance($$14);

// simd_load.wast:135
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7b\x02\xbb\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0b\x61\x73\x2d\x62\x72\x2d\x76\x61\x6c\x75\x65\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xbc\x80\x80\x80\x00\x01\xb6\x80\x80\x80\x00\x00\x02\x40\x10\x00\xfd\x0c\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4e\xfd\x0c\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\xfd\x23\xfd\x63\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($14)),  "run", []), "simd_load.wast:135");  // assert_return(() => call($14, "as-br-value", []), "simd_load.wast:135", v128("50_462_976 117_835_012 185_207_048 252_579_084"))

// simd_load.wast:140
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e", "simd_load.wast:140");

// simd_load.wast:147
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e", "simd_load.wast:147");

// simd_load.wast:154
assert_malformed("\x3c\x6d\x61\x6c\x66\x6f\x72\x6d\x65\x64\x20\x71\x75\x6f\x74\x65\x3e", "simd_load.wast:154");

// simd_load.wast:165
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x94\x80\x80\x80\x00\x01\x8e\x80\x80\x80\x00\x01\x01\x7b\x43\x00\x00\x00\x00\xfd\x00\x04\x00\x1a\x0b", "simd_load.wast:165");

// simd_load.wast:169
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x01\x01\x7b\x02\x40\x41\x00\xfd\x00\x04\x00\x0d\x00\x0b\x0b", "simd_load.wast:169");

// simd_load.wast:173
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x90\x80\x80\x80\x00\x01\x8a\x80\x80\x80\x00\x01\x01\x7b\x41\x00\xfd\x00\x04\x00\x0b", "simd_load.wast:173");

// simd_load.wast:181
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x20\x02\xfd\x00\x04\x00\x1a\x0b", "simd_load.wast:181");

// simd_load.wast:185
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x05\x83\x80\x80\x80\x00\x01\x00\x01\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\xfd\x00\x04\x00\x1a\x0b", "simd_load.wast:185");
reinitializeRegistry();
})();

(function return_call_wast_js() {

// return_call.wast:3
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xd4\x80\x80\x80\x00\x10\x60\x02\x7f\x7d\x00\x60\x00\x01\x7f\x60\x00\x01\x7e\x60\x00\x01\x7d\x60\x00\x01\x7c\x60\x01\x7f\x01\x7f\x60\x01\x7e\x01\x7e\x60\x01\x7d\x01\x7d\x60\x01\x7c\x01\x7c\x60\x02\x7d\x7f\x01\x7f\x60\x02\x7f\x7e\x01\x7e\x60\x02\x7c\x7d\x01\x7d\x60\x02\x7e\x7c\x01\x7c\x60\x02\x7e\x7e\x01\x7e\x60\x01\x7e\x01\x7f\x60\x02\x7c\x7e\x02\x7f\x7d\x02\x9a\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0d\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x5f\x66\x33\x32\x00\x00\x03\xa0\x80\x80\x80\x00\x1f\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x01\x02\x03\x04\x01\x02\x03\x04\x01\x02\x03\x04\x0d\x06\x0e\x0e\x00\x0f\x0f\x07\x86\x82\x80\x80\x00\x12\x08\x74\x79\x70\x65\x2d\x69\x33\x32\x00\x0d\x08\x74\x79\x70\x65\x2d\x69\x36\x34\x00\x0e\x08\x74\x79\x70\x65\x2d\x66\x33\x32\x00\x0f\x08\x74\x79\x70\x65\x2d\x66\x36\x34\x00\x10\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x69\x33\x32\x00\x11\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x69\x36\x34\x00\x12\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x66\x33\x32\x00\x13\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x66\x36\x34\x00\x14\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x69\x33\x32\x00\x15\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x69\x36\x34\x00\x16\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x66\x33\x32\x00\x17\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x66\x36\x34\x00\x18\x07\x66\x61\x63\x2d\x61\x63\x63\x00\x19\x05\x63\x6f\x75\x6e\x74\x00\x1a\x04\x65\x76\x65\x6e\x00\x1b\x03\x6f\x64\x64\x00\x1c\x11\x74\x61\x69\x6c\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x5f\x66\x33\x32\x00\x1d\x17\x74\x79\x70\x65\x2d\x66\x36\x34\x2d\x69\x36\x34\x2d\x74\x6f\x2d\x69\x33\x32\x2d\x66\x33\x32\x00\x1f\x0a\xa7\x83\x80\x80\x00\x1f\x85\x80\x80\x80\x00\x00\x41\xb2\x02\x0b\x85\x80\x80\x80\x00\x00\x42\xe4\x02\x0b\x87\x80\x80\x80\x00\x00\x43\x00\x20\x73\x45\x0b\x8b\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\xc8\xae\x40\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x01\x0b\x84\x80\x80\x80\x00\x00\x20\x01\x0b\x84\x80\x80\x80\x00\x00\x20\x01\x0b\x84\x80\x80\x80\x00\x00\x20\x01\x0b\x84\x80\x80\x80\x00\x00\x12\x01\x0b\x84\x80\x80\x80\x00\x00\x12\x02\x0b\x84\x80\x80\x80\x00\x00\x12\x03\x0b\x84\x80\x80\x80\x00\x00\x12\x04\x0b\x86\x80\x80\x80\x00\x00\x41\x20\x12\x05\x0b\x87\x80\x80\x80\x00\x00\x42\xc0\x00\x12\x06\x0b\x89\x80\x80\x80\x00\x00\x43\xc3\xf5\xa8\x3f\x12\x07\x0b\x8d\x80\x80\x80\x00\x00\x44\x3d\x0a\xd7\xa3\x70\x3d\xfa\x3f\x12\x08\x0b\x8b\x80\x80\x80\x00\x00\x43\x66\x66\x00\x42\x41\x20\x12\x09\x0b\x89\x80\x80\x80\x00\x00\x41\x20\x42\xc0\x00\x12\x0a\x0b\x92\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\x50\x40\x43\x00\x00\x00\x42\x12\x0b\x0b\x90\x80\x80\x80\x00\x00\x42\xc0\x00\x44\x66\x66\x66\x66\x66\x06\x50\x40\x12\x0c\x0b\x97\x80\x80\x80\x00\x00\x20\x00\x50\x04\x7e\x20\x01\x05\x20\x00\x42\x01\x7d\x20\x00\x20\x01\x7e\x12\x19\x0b\x0b\x92\x80\x80\x80\x00\x00\x20\x00\x50\x04\x7e\x20\x00\x05\x20\x00\x42\x01\x7d\x12\x1a\x0b\x0b\x92\x80\x80\x80\x00\x00\x20\x00\x50\x04\x7f\x41\x2c\x05\x20\x00\x42\x01\x7d\x12\x1c\x0b\x0b\x93\x80\x80\x80\x00\x00\x20\x00\x50\x04\x7f\x41\xe3\x00\x05\x20\x00\x42\x01\x7d\x12\x1b\x0b\x0b\x88\x80\x80\x80\x00\x00\x20\x00\x20\x01\x12\x00\x0b\x88\x80\x80\x80\x00\x00\x20\x01\xa7\x20\x00\xb6\x0b\x88\x80\x80\x80\x00\x00\x20\x00\x20\x01\x12\x1e\x0b", "return_call.wast:3");

// return_call.wast:3
let $1 = instance($$1);

// return_call.wast:96
assert_return(() => call($1, "type-i32", []), "return_call.wast:96", 306);

// return_call.wast:97
assert_return(() => call($1, "type-i64", []), "return_call.wast:97", 356n);

// return_call.wast:98
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x74\x79\x70\x65\x2d\x66\x33\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x20\x73\x45\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call.wast:98");  // assert_return(() => call($1, "type-f32", []), "return_call.wast:98", 3890.)

// return_call.wast:99
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x74\x79\x70\x65\x2d\x66\x36\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\xc8\xae\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call.wast:99");  // assert_return(() => call($1, "type-f64", []), "return_call.wast:99", 3940.)

// return_call.wast:101
assert_return(() => call($1, "type-first-i32", []), "return_call.wast:101", 32);

// return_call.wast:102
assert_return(() => call($1, "type-first-i64", []), "return_call.wast:102", 64n);

// return_call.wast:103
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xbe\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x66\x33\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\xc3\xf5\xa8\x3f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call.wast:103");  // assert_return(() => call($1, "type-first-f32", []), "return_call.wast:103", 1.32000005245)

// return_call.wast:104
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xbe\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0e\x74\x79\x70\x65\x2d\x66\x69\x72\x73\x74\x2d\x66\x36\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x3d\x0a\xd7\xa3\x70\x3d\xfa\x3f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call.wast:104");  // assert_return(() => call($1, "type-first-f64", []), "return_call.wast:104", 1.64)

// return_call.wast:106
assert_return(() => call($1, "type-second-i32", []), "return_call.wast:106", 32);

// return_call.wast:107
assert_return(() => call($1, "type-second-i64", []), "return_call.wast:107", 64n);

// return_call.wast:108
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xbf\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x66\x33\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x00\x00\x42\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call.wast:108");  // assert_return(() => call($1, "type-second-f32", []), "return_call.wast:108", 32.)

// return_call.wast:109
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xbf\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x0f\x74\x79\x70\x65\x2d\x73\x65\x63\x6f\x6e\x64\x2d\x66\x36\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x66\x66\x66\x66\x66\x06\x50\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call.wast:109");  // assert_return(() => call($1, "type-second-f64", []), "return_call.wast:109", 64.1)

// return_call.wast:111
assert_return(() => call($1, "fac-acc", [0n, 1n]), "return_call.wast:111", 1n);

// return_call.wast:112
assert_return(() => call($1, "fac-acc", [1n, 1n]), "return_call.wast:112", 1n);

// return_call.wast:113
assert_return(() => call($1, "fac-acc", [5n, 1n]), "return_call.wast:113", 120n);

// return_call.wast:114
assert_return(() => call($1, "fac-acc", [25n, 1n]), "return_call.wast:114", 7_034_535_277_573_963_776n);

// return_call.wast:119
assert_return(() => call($1, "count", [0n]), "return_call.wast:119", 0n);

// return_call.wast:120
assert_return(() => call($1, "count", [1_000n]), "return_call.wast:120", 0n);

// return_call.wast:121
assert_return(() => call($1, "count", [1_000_000n]), "return_call.wast:121", 0n);

// return_call.wast:123
assert_return(() => call($1, "even", [0n]), "return_call.wast:123", 44);

// return_call.wast:124
assert_return(() => call($1, "even", [1n]), "return_call.wast:124", 99);

// return_call.wast:125
assert_return(() => call($1, "even", [100n]), "return_call.wast:125", 44);

// return_call.wast:126
assert_return(() => call($1, "even", [77n]), "return_call.wast:126", 99);

// return_call.wast:127
assert_return(() => call($1, "even", [1_000_000n]), "return_call.wast:127", 44);

// return_call.wast:128
assert_return(() => call($1, "even", [1_000_001n]), "return_call.wast:128", 99);

// return_call.wast:129
assert_return(() => call($1, "odd", [0n]), "return_call.wast:129", 99);

// return_call.wast:130
assert_return(() => call($1, "odd", [1n]), "return_call.wast:130", 44);

// return_call.wast:131
assert_return(() => call($1, "odd", [200n]), "return_call.wast:131", 99);

// return_call.wast:132
assert_return(() => call($1, "odd", [77n]), "return_call.wast:132", 44);

// return_call.wast:133
assert_return(() => call($1, "odd", [1_000_000n]), "return_call.wast:133", 99);

// return_call.wast:134
assert_return(() => call($1, "odd", [999_999n]), "return_call.wast:134", 44);

// return_call.wast:135
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x02\x7f\x7d\x00\x02\xc1\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x11\x74\x61\x69\x6c\x70\x72\x69\x6e\x74\x5f\x69\x33\x32\x5f\x66\x33\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x96\x80\x80\x80\x00\x01\x90\x80\x80\x80\x00\x00\x02\x40\x41\x05\x43\x00\x00\xb6\x42\x10\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call.wast:135");  // assert_return(() => call($1, "tailprint_i32_f32", [5, 91.]), "return_call.wast:135")

// return_call.wast:136
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x96\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x02\x7c\x7e\x02\x7f\x7d\x02\xc7\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x17\x74\x79\x70\x65\x2d\x66\x36\x34\x2d\x69\x36\x34\x2d\x74\x6f\x2d\x69\x33\x32\x2d\x66\x33\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xaf\x80\x80\x80\x00\x01\xa9\x80\x80\x80\x00\x00\x02\x40\x44\xcd\xcc\xcc\xcc\xcc\xcc\x10\x40\x42\xe3\x00\x10\x00\xbc\x43\x66\x66\x86\x40\xbc\x46\x45\x0d\x00\x01\x41\xe3\x00\x01\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "return_call.wast:136");  // assert_return(() => call($1, "type-f64-i64-to-i32-f32", [4.2, 99n]), "return_call.wast:136", 99, 4.19999980927)

// return_call.wast:140
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x01\x0a\x93\x80\x80\x80\x00\x02\x86\x80\x80\x80\x00\x00\x12\x01\x41\x00\x0b\x82\x80\x80\x80\x00\x00\x0b", "return_call.wast:140");

// return_call.wast:147
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x01\x7e\x03\x83\x80\x80\x80\x00\x02\x00\x01\x0a\x95\x80\x80\x80\x00\x02\x86\x80\x80\x80\x00\x00\x12\x01\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x42\x01\x0b", "return_call.wast:147");

// return_call.wast:155
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x00\x60\x01\x7f\x00\x03\x83\x80\x80\x80\x00\x02\x00\x01\x0a\x91\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x12\x01\x0b\x82\x80\x80\x80\x00\x00\x0b", "return_call.wast:155");

// return_call.wast:162
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7c\x7f\x00\x03\x83\x80\x80\x80\x00\x02\x00\x01\x0a\x91\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x12\x01\x0b\x82\x80\x80\x80\x00\x00\x0b", "return_call.wast:162");

// return_call.wast:170
let $$2 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x0a\x93\x80\x80\x80\x00\x02\x86\x80\x80\x80\x00\x00\x41\x01\x12\x01\x0b\x82\x80\x80\x80\x00\x00\x0b", "return_call.wast:170");

// return_call.wast:170
let $2 = instance($$2);

// return_call.wast:175
let $$3 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x0a\x9c\x80\x80\x80\x00\x02\x8f\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\x00\x40\x41\x01\x12\x01\x0b\x82\x80\x80\x80\x00\x00\x0b", "return_call.wast:175");

// return_call.wast:175
let $3 = instance($$3);

// return_call.wast:180
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7f\x7f\x00\x03\x83\x80\x80\x80\x00\x02\x00\x01\x0a\x94\x80\x80\x80\x00\x02\x87\x80\x80\x80\x00\x00\x01\x41\x01\x12\x01\x0b\x82\x80\x80\x80\x00\x00\x0b", "return_call.wast:180");

// return_call.wast:187
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7f\x7f\x00\x03\x83\x80\x80\x80\x00\x02\x00\x01\x0a\x94\x80\x80\x80\x00\x02\x87\x80\x80\x80\x00\x00\x41\x01\x01\x12\x01\x0b\x82\x80\x80\x80\x00\x00\x0b", "return_call.wast:187");

// return_call.wast:194
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7f\x7c\x00\x03\x83\x80\x80\x80\x00\x02\x00\x01\x0a\x9c\x80\x80\x80\x00\x02\x8f\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\x12\x01\x0b\x82\x80\x80\x80\x00\x00\x0b", "return_call.wast:194");

// return_call.wast:201
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x60\x00\x00\x60\x02\x7c\x7f\x00\x03\x83\x80\x80\x80\x00\x02\x00\x01\x0a\x9c\x80\x80\x80\x00\x02\x8f\x80\x80\x80\x00\x00\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x12\x01\x0b\x82\x80\x80\x80\x00\x00\x0b", "return_call.wast:201");

// return_call.wast:208
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x00\x02\x7f\x7f\x60\x00\x01\x7f\x03\x83\x80\x80\x80\x00\x02\x00\x01\x0a\x92\x80\x80\x80\x00\x02\x83\x80\x80\x80\x00\x00\x00\x0b\x84\x80\x80\x80\x00\x00\x12\x00\x0b", "return_call.wast:208");

// return_call.wast:220
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8a\x80\x80\x80\x00\x01\x84\x80\x80\x80\x00\x00\x12\x01\x0b", "return_call.wast:220");

// return_call.wast:224
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8e\x80\x80\x80\x00\x01\x88\x80\x80\x80\x00\x00\x12\x94\x98\xdb\xe2\x03\x0b", "return_call.wast:224");
reinitializeRegistry();
})();

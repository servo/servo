(function address64_wast_js() {

// address64.wast:3
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x01\x7e\x01\x7f\x60\x01\x7e\x00\x03\x9f\x80\x80\x80\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x05\x83\x80\x80\x80\x00\x01\x04\x01\x07\xcd\x82\x80\x80\x00\x1e\x08\x38\x75\x5f\x67\x6f\x6f\x64\x31\x00\x00\x08\x38\x75\x5f\x67\x6f\x6f\x64\x32\x00\x01\x08\x38\x75\x5f\x67\x6f\x6f\x64\x33\x00\x02\x08\x38\x75\x5f\x67\x6f\x6f\x64\x34\x00\x03\x08\x38\x75\x5f\x67\x6f\x6f\x64\x35\x00\x04\x08\x38\x73\x5f\x67\x6f\x6f\x64\x31\x00\x05\x08\x38\x73\x5f\x67\x6f\x6f\x64\x32\x00\x06\x08\x38\x73\x5f\x67\x6f\x6f\x64\x33\x00\x07\x08\x38\x73\x5f\x67\x6f\x6f\x64\x34\x00\x08\x08\x38\x73\x5f\x67\x6f\x6f\x64\x35\x00\x09\x09\x31\x36\x75\x5f\x67\x6f\x6f\x64\x31\x00\x0a\x09\x31\x36\x75\x5f\x67\x6f\x6f\x64\x32\x00\x0b\x09\x31\x36\x75\x5f\x67\x6f\x6f\x64\x33\x00\x0c\x09\x31\x36\x75\x5f\x67\x6f\x6f\x64\x34\x00\x0d\x09\x31\x36\x75\x5f\x67\x6f\x6f\x64\x35\x00\x0e\x09\x31\x36\x73\x5f\x67\x6f\x6f\x64\x31\x00\x0f\x09\x31\x36\x73\x5f\x67\x6f\x6f\x64\x32\x00\x10\x09\x31\x36\x73\x5f\x67\x6f\x6f\x64\x33\x00\x11\x09\x31\x36\x73\x5f\x67\x6f\x6f\x64\x34\x00\x12\x09\x31\x36\x73\x5f\x67\x6f\x6f\x64\x35\x00\x13\x08\x33\x32\x5f\x67\x6f\x6f\x64\x31\x00\x14\x08\x33\x32\x5f\x67\x6f\x6f\x64\x32\x00\x15\x08\x33\x32\x5f\x67\x6f\x6f\x64\x33\x00\x16\x08\x33\x32\x5f\x67\x6f\x6f\x64\x34\x00\x17\x08\x33\x32\x5f\x67\x6f\x6f\x64\x35\x00\x18\x06\x38\x75\x5f\x62\x61\x64\x00\x19\x06\x38\x73\x5f\x62\x61\x64\x00\x1a\x07\x31\x36\x75\x5f\x62\x61\x64\x00\x1b\x07\x31\x36\x73\x5f\x62\x61\x64\x00\x1c\x06\x33\x32\x5f\x62\x61\x64\x00\x1d\x0a\x82\x83\x80\x80\x00\x1e\x87\x80\x80\x80\x00\x00\x20\x00\x2d\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2d\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2d\x00\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2d\x00\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2d\x00\x19\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2c\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2c\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2c\x00\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2c\x00\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2c\x00\x19\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2f\x01\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2f\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2f\x00\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2f\x01\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2f\x01\x19\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2e\x01\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2e\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2e\x00\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2e\x01\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2e\x01\x19\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x28\x02\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x28\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x28\x00\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x28\x01\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x28\x02\x19\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x2d\x00\xff\xff\xff\xff\x0f\x1a\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x2c\x00\xff\xff\xff\xff\x0f\x1a\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x2f\x01\xff\xff\xff\xff\x0f\x1a\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x2e\x01\xff\xff\xff\xff\x0f\x1a\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x28\x02\xff\xff\xff\xff\x0f\x1a\x0b\x0b\xa0\x80\x80\x80\x00\x01\x00\x42\x00\x0b\x1a\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a", "address64.wast:3");

// address64.wast:3
let $1 = instance($$1);

// address64.wast:104
assert_return(() => call($1, "8u_good1", [0n]), "address64.wast:104", 97);

// address64.wast:105
assert_return(() => call($1, "8u_good2", [0n]), "address64.wast:105", 97);

// address64.wast:106
assert_return(() => call($1, "8u_good3", [0n]), "address64.wast:106", 98);

// address64.wast:107
assert_return(() => call($1, "8u_good4", [0n]), "address64.wast:107", 99);

// address64.wast:108
assert_return(() => call($1, "8u_good5", [0n]), "address64.wast:108", 122);

// address64.wast:110
assert_return(() => call($1, "8s_good1", [0n]), "address64.wast:110", 97);

// address64.wast:111
assert_return(() => call($1, "8s_good2", [0n]), "address64.wast:111", 97);

// address64.wast:112
assert_return(() => call($1, "8s_good3", [0n]), "address64.wast:112", 98);

// address64.wast:113
assert_return(() => call($1, "8s_good4", [0n]), "address64.wast:113", 99);

// address64.wast:114
assert_return(() => call($1, "8s_good5", [0n]), "address64.wast:114", 122);

// address64.wast:116
assert_return(() => call($1, "16u_good1", [0n]), "address64.wast:116", 25_185);

// address64.wast:117
assert_return(() => call($1, "16u_good2", [0n]), "address64.wast:117", 25_185);

// address64.wast:118
assert_return(() => call($1, "16u_good3", [0n]), "address64.wast:118", 25_442);

// address64.wast:119
assert_return(() => call($1, "16u_good4", [0n]), "address64.wast:119", 25_699);

// address64.wast:120
assert_return(() => call($1, "16u_good5", [0n]), "address64.wast:120", 122);

// address64.wast:122
assert_return(() => call($1, "16s_good1", [0n]), "address64.wast:122", 25_185);

// address64.wast:123
assert_return(() => call($1, "16s_good2", [0n]), "address64.wast:123", 25_185);

// address64.wast:124
assert_return(() => call($1, "16s_good3", [0n]), "address64.wast:124", 25_442);

// address64.wast:125
assert_return(() => call($1, "16s_good4", [0n]), "address64.wast:125", 25_699);

// address64.wast:126
assert_return(() => call($1, "16s_good5", [0n]), "address64.wast:126", 122);

// address64.wast:128
assert_return(() => call($1, "32_good1", [0n]), "address64.wast:128", 1_684_234_849);

// address64.wast:129
assert_return(() => call($1, "32_good2", [0n]), "address64.wast:129", 1_684_234_849);

// address64.wast:130
assert_return(() => call($1, "32_good3", [0n]), "address64.wast:130", 1_701_077_858);

// address64.wast:131
assert_return(() => call($1, "32_good4", [0n]), "address64.wast:131", 1_717_920_867);

// address64.wast:132
assert_return(() => call($1, "32_good5", [0n]), "address64.wast:132", 122);

// address64.wast:134
assert_return(() => call($1, "8u_good1", [65_507n]), "address64.wast:134", 0);

// address64.wast:135
assert_return(() => call($1, "8u_good2", [65_507n]), "address64.wast:135", 0);

// address64.wast:136
assert_return(() => call($1, "8u_good3", [65_507n]), "address64.wast:136", 0);

// address64.wast:137
assert_return(() => call($1, "8u_good4", [65_507n]), "address64.wast:137", 0);

// address64.wast:138
assert_return(() => call($1, "8u_good5", [65_507n]), "address64.wast:138", 0);

// address64.wast:140
assert_return(() => call($1, "8s_good1", [65_507n]), "address64.wast:140", 0);

// address64.wast:141
assert_return(() => call($1, "8s_good2", [65_507n]), "address64.wast:141", 0);

// address64.wast:142
assert_return(() => call($1, "8s_good3", [65_507n]), "address64.wast:142", 0);

// address64.wast:143
assert_return(() => call($1, "8s_good4", [65_507n]), "address64.wast:143", 0);

// address64.wast:144
assert_return(() => call($1, "8s_good5", [65_507n]), "address64.wast:144", 0);

// address64.wast:146
assert_return(() => call($1, "16u_good1", [65_507n]), "address64.wast:146", 0);

// address64.wast:147
assert_return(() => call($1, "16u_good2", [65_507n]), "address64.wast:147", 0);

// address64.wast:148
assert_return(() => call($1, "16u_good3", [65_507n]), "address64.wast:148", 0);

// address64.wast:149
assert_return(() => call($1, "16u_good4", [65_507n]), "address64.wast:149", 0);

// address64.wast:150
assert_return(() => call($1, "16u_good5", [65_507n]), "address64.wast:150", 0);

// address64.wast:152
assert_return(() => call($1, "16s_good1", [65_507n]), "address64.wast:152", 0);

// address64.wast:153
assert_return(() => call($1, "16s_good2", [65_507n]), "address64.wast:153", 0);

// address64.wast:154
assert_return(() => call($1, "16s_good3", [65_507n]), "address64.wast:154", 0);

// address64.wast:155
assert_return(() => call($1, "16s_good4", [65_507n]), "address64.wast:155", 0);

// address64.wast:156
assert_return(() => call($1, "16s_good5", [65_507n]), "address64.wast:156", 0);

// address64.wast:158
assert_return(() => call($1, "32_good1", [65_507n]), "address64.wast:158", 0);

// address64.wast:159
assert_return(() => call($1, "32_good2", [65_507n]), "address64.wast:159", 0);

// address64.wast:160
assert_return(() => call($1, "32_good3", [65_507n]), "address64.wast:160", 0);

// address64.wast:161
assert_return(() => call($1, "32_good4", [65_507n]), "address64.wast:161", 0);

// address64.wast:162
assert_return(() => call($1, "32_good5", [65_507n]), "address64.wast:162", 0);

// address64.wast:164
assert_return(() => call($1, "8u_good1", [65_508n]), "address64.wast:164", 0);

// address64.wast:165
assert_return(() => call($1, "8u_good2", [65_508n]), "address64.wast:165", 0);

// address64.wast:166
assert_return(() => call($1, "8u_good3", [65_508n]), "address64.wast:166", 0);

// address64.wast:167
assert_return(() => call($1, "8u_good4", [65_508n]), "address64.wast:167", 0);

// address64.wast:168
assert_return(() => call($1, "8u_good5", [65_508n]), "address64.wast:168", 0);

// address64.wast:170
assert_return(() => call($1, "8s_good1", [65_508n]), "address64.wast:170", 0);

// address64.wast:171
assert_return(() => call($1, "8s_good2", [65_508n]), "address64.wast:171", 0);

// address64.wast:172
assert_return(() => call($1, "8s_good3", [65_508n]), "address64.wast:172", 0);

// address64.wast:173
assert_return(() => call($1, "8s_good4", [65_508n]), "address64.wast:173", 0);

// address64.wast:174
assert_return(() => call($1, "8s_good5", [65_508n]), "address64.wast:174", 0);

// address64.wast:176
assert_return(() => call($1, "16u_good1", [65_508n]), "address64.wast:176", 0);

// address64.wast:177
assert_return(() => call($1, "16u_good2", [65_508n]), "address64.wast:177", 0);

// address64.wast:178
assert_return(() => call($1, "16u_good3", [65_508n]), "address64.wast:178", 0);

// address64.wast:179
assert_return(() => call($1, "16u_good4", [65_508n]), "address64.wast:179", 0);

// address64.wast:180
assert_return(() => call($1, "16u_good5", [65_508n]), "address64.wast:180", 0);

// address64.wast:182
assert_return(() => call($1, "16s_good1", [65_508n]), "address64.wast:182", 0);

// address64.wast:183
assert_return(() => call($1, "16s_good2", [65_508n]), "address64.wast:183", 0);

// address64.wast:184
assert_return(() => call($1, "16s_good3", [65_508n]), "address64.wast:184", 0);

// address64.wast:185
assert_return(() => call($1, "16s_good4", [65_508n]), "address64.wast:185", 0);

// address64.wast:186
assert_return(() => call($1, "16s_good5", [65_508n]), "address64.wast:186", 0);

// address64.wast:188
assert_return(() => call($1, "32_good1", [65_508n]), "address64.wast:188", 0);

// address64.wast:189
assert_return(() => call($1, "32_good2", [65_508n]), "address64.wast:189", 0);

// address64.wast:190
assert_return(() => call($1, "32_good3", [65_508n]), "address64.wast:190", 0);

// address64.wast:191
assert_return(() => call($1, "32_good4", [65_508n]), "address64.wast:191", 0);

// address64.wast:192
assert_trap(() => call($1, "32_good5", [65_508n]), "address64.wast:192");

// address64.wast:194
assert_trap(() => call($1, "8u_bad", [0n]), "address64.wast:194");

// address64.wast:195
assert_trap(() => call($1, "8s_bad", [0n]), "address64.wast:195");

// address64.wast:196
assert_trap(() => call($1, "16u_bad", [0n]), "address64.wast:196");

// address64.wast:197
assert_trap(() => call($1, "16s_bad", [0n]), "address64.wast:197");

// address64.wast:198
assert_trap(() => call($1, "32_bad", [0n]), "address64.wast:198");

// address64.wast:200
assert_trap(() => call($1, "8u_bad", [1n]), "address64.wast:200");

// address64.wast:201
assert_trap(() => call($1, "8s_bad", [1n]), "address64.wast:201");

// address64.wast:202
assert_trap(() => call($1, "16u_bad", [1n]), "address64.wast:202");

// address64.wast:203
assert_trap(() => call($1, "16s_bad", [1n]), "address64.wast:203");

// address64.wast:204
assert_trap(() => call($1, "32_bad", [1n]), "address64.wast:204");

// address64.wast:209
let $$2 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x01\x7e\x01\x7e\x60\x01\x7e\x00\x03\xab\x80\x80\x80\x00\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x05\x83\x80\x80\x80\x00\x01\x04\x01\x07\xd9\x83\x80\x80\x00\x2a\x08\x38\x75\x5f\x67\x6f\x6f\x64\x31\x00\x00\x08\x38\x75\x5f\x67\x6f\x6f\x64\x32\x00\x01\x08\x38\x75\x5f\x67\x6f\x6f\x64\x33\x00\x02\x08\x38\x75\x5f\x67\x6f\x6f\x64\x34\x00\x03\x08\x38\x75\x5f\x67\x6f\x6f\x64\x35\x00\x04\x08\x38\x73\x5f\x67\x6f\x6f\x64\x31\x00\x05\x08\x38\x73\x5f\x67\x6f\x6f\x64\x32\x00\x06\x08\x38\x73\x5f\x67\x6f\x6f\x64\x33\x00\x07\x08\x38\x73\x5f\x67\x6f\x6f\x64\x34\x00\x08\x08\x38\x73\x5f\x67\x6f\x6f\x64\x35\x00\x09\x09\x31\x36\x75\x5f\x67\x6f\x6f\x64\x31\x00\x0a\x09\x31\x36\x75\x5f\x67\x6f\x6f\x64\x32\x00\x0b\x09\x31\x36\x75\x5f\x67\x6f\x6f\x64\x33\x00\x0c\x09\x31\x36\x75\x5f\x67\x6f\x6f\x64\x34\x00\x0d\x09\x31\x36\x75\x5f\x67\x6f\x6f\x64\x35\x00\x0e\x09\x31\x36\x73\x5f\x67\x6f\x6f\x64\x31\x00\x0f\x09\x31\x36\x73\x5f\x67\x6f\x6f\x64\x32\x00\x10\x09\x31\x36\x73\x5f\x67\x6f\x6f\x64\x33\x00\x11\x09\x31\x36\x73\x5f\x67\x6f\x6f\x64\x34\x00\x12\x09\x31\x36\x73\x5f\x67\x6f\x6f\x64\x35\x00\x13\x09\x33\x32\x75\x5f\x67\x6f\x6f\x64\x31\x00\x14\x09\x33\x32\x75\x5f\x67\x6f\x6f\x64\x32\x00\x15\x09\x33\x32\x75\x5f\x67\x6f\x6f\x64\x33\x00\x16\x09\x33\x32\x75\x5f\x67\x6f\x6f\x64\x34\x00\x17\x09\x33\x32\x75\x5f\x67\x6f\x6f\x64\x35\x00\x18\x09\x33\x32\x73\x5f\x67\x6f\x6f\x64\x31\x00\x19\x09\x33\x32\x73\x5f\x67\x6f\x6f\x64\x32\x00\x1a\x09\x33\x32\x73\x5f\x67\x6f\x6f\x64\x33\x00\x1b\x09\x33\x32\x73\x5f\x67\x6f\x6f\x64\x34\x00\x1c\x09\x33\x32\x73\x5f\x67\x6f\x6f\x64\x35\x00\x1d\x08\x36\x34\x5f\x67\x6f\x6f\x64\x31\x00\x1e\x08\x36\x34\x5f\x67\x6f\x6f\x64\x32\x00\x1f\x08\x36\x34\x5f\x67\x6f\x6f\x64\x33\x00\x20\x08\x36\x34\x5f\x67\x6f\x6f\x64\x34\x00\x21\x08\x36\x34\x5f\x67\x6f\x6f\x64\x35\x00\x22\x06\x38\x75\x5f\x62\x61\x64\x00\x23\x06\x38\x73\x5f\x62\x61\x64\x00\x24\x07\x31\x36\x75\x5f\x62\x61\x64\x00\x25\x07\x31\x36\x73\x5f\x62\x61\x64\x00\x26\x07\x33\x32\x75\x5f\x62\x61\x64\x00\x27\x07\x33\x32\x73\x5f\x62\x61\x64\x00\x28\x06\x36\x34\x5f\x62\x61\x64\x00\x29\x0a\x9c\x84\x80\x80\x00\x2a\x87\x80\x80\x80\x00\x00\x20\x00\x31\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x31\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x31\x00\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x31\x00\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x31\x00\x19\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x30\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x30\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x30\x00\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x30\x00\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x30\x00\x19\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x33\x01\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x33\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x33\x00\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x33\x01\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x33\x01\x19\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x32\x01\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x32\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x32\x00\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x32\x01\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x32\x01\x19\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x35\x02\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x35\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x35\x00\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x35\x01\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x35\x02\x19\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x34\x02\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x34\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x34\x00\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x34\x01\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x34\x02\x19\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x29\x03\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x29\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x29\x00\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x29\x01\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x29\x03\x19\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x31\x00\xff\xff\xff\xff\x0f\x1a\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x30\x00\xff\xff\xff\xff\x0f\x1a\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x33\x01\xff\xff\xff\xff\x0f\x1a\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x32\x01\xff\xff\xff\xff\x0f\x1a\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x35\x02\xff\xff\xff\xff\x0f\x1a\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x34\x02\xff\xff\xff\xff\x0f\x1a\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x29\x03\xff\xff\xff\xff\x0f\x1a\x0b\x0b\xa0\x80\x80\x80\x00\x01\x00\x42\x00\x0b\x1a\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a", "address64.wast:209");

// address64.wast:209
let $2 = instance($$2);

// address64.wast:348
assert_return(() => call($2, "8u_good1", [0n]), "address64.wast:348", 97n);

// address64.wast:349
assert_return(() => call($2, "8u_good2", [0n]), "address64.wast:349", 97n);

// address64.wast:350
assert_return(() => call($2, "8u_good3", [0n]), "address64.wast:350", 98n);

// address64.wast:351
assert_return(() => call($2, "8u_good4", [0n]), "address64.wast:351", 99n);

// address64.wast:352
assert_return(() => call($2, "8u_good5", [0n]), "address64.wast:352", 122n);

// address64.wast:354
assert_return(() => call($2, "8s_good1", [0n]), "address64.wast:354", 97n);

// address64.wast:355
assert_return(() => call($2, "8s_good2", [0n]), "address64.wast:355", 97n);

// address64.wast:356
assert_return(() => call($2, "8s_good3", [0n]), "address64.wast:356", 98n);

// address64.wast:357
assert_return(() => call($2, "8s_good4", [0n]), "address64.wast:357", 99n);

// address64.wast:358
assert_return(() => call($2, "8s_good5", [0n]), "address64.wast:358", 122n);

// address64.wast:360
assert_return(() => call($2, "16u_good1", [0n]), "address64.wast:360", 25_185n);

// address64.wast:361
assert_return(() => call($2, "16u_good2", [0n]), "address64.wast:361", 25_185n);

// address64.wast:362
assert_return(() => call($2, "16u_good3", [0n]), "address64.wast:362", 25_442n);

// address64.wast:363
assert_return(() => call($2, "16u_good4", [0n]), "address64.wast:363", 25_699n);

// address64.wast:364
assert_return(() => call($2, "16u_good5", [0n]), "address64.wast:364", 122n);

// address64.wast:366
assert_return(() => call($2, "16s_good1", [0n]), "address64.wast:366", 25_185n);

// address64.wast:367
assert_return(() => call($2, "16s_good2", [0n]), "address64.wast:367", 25_185n);

// address64.wast:368
assert_return(() => call($2, "16s_good3", [0n]), "address64.wast:368", 25_442n);

// address64.wast:369
assert_return(() => call($2, "16s_good4", [0n]), "address64.wast:369", 25_699n);

// address64.wast:370
assert_return(() => call($2, "16s_good5", [0n]), "address64.wast:370", 122n);

// address64.wast:372
assert_return(() => call($2, "32u_good1", [0n]), "address64.wast:372", 1_684_234_849n);

// address64.wast:373
assert_return(() => call($2, "32u_good2", [0n]), "address64.wast:373", 1_684_234_849n);

// address64.wast:374
assert_return(() => call($2, "32u_good3", [0n]), "address64.wast:374", 1_701_077_858n);

// address64.wast:375
assert_return(() => call($2, "32u_good4", [0n]), "address64.wast:375", 1_717_920_867n);

// address64.wast:376
assert_return(() => call($2, "32u_good5", [0n]), "address64.wast:376", 122n);

// address64.wast:378
assert_return(() => call($2, "32s_good1", [0n]), "address64.wast:378", 1_684_234_849n);

// address64.wast:379
assert_return(() => call($2, "32s_good2", [0n]), "address64.wast:379", 1_684_234_849n);

// address64.wast:380
assert_return(() => call($2, "32s_good3", [0n]), "address64.wast:380", 1_701_077_858n);

// address64.wast:381
assert_return(() => call($2, "32s_good4", [0n]), "address64.wast:381", 1_717_920_867n);

// address64.wast:382
assert_return(() => call($2, "32s_good5", [0n]), "address64.wast:382", 122n);

// address64.wast:384
assert_return(() => call($2, "64_good1", [0n]), "address64.wast:384", 7_523_094_288_207_667_809n);

// address64.wast:385
assert_return(() => call($2, "64_good2", [0n]), "address64.wast:385", 7_523_094_288_207_667_809n);

// address64.wast:386
assert_return(() => call($2, "64_good3", [0n]), "address64.wast:386", 7_595_434_461_045_744_482n);

// address64.wast:387
assert_return(() => call($2, "64_good4", [0n]), "address64.wast:387", 7_667_774_633_883_821_155n);

// address64.wast:388
assert_return(() => call($2, "64_good5", [0n]), "address64.wast:388", 122n);

// address64.wast:390
assert_return(() => call($2, "8u_good1", [65_503n]), "address64.wast:390", 0n);

// address64.wast:391
assert_return(() => call($2, "8u_good2", [65_503n]), "address64.wast:391", 0n);

// address64.wast:392
assert_return(() => call($2, "8u_good3", [65_503n]), "address64.wast:392", 0n);

// address64.wast:393
assert_return(() => call($2, "8u_good4", [65_503n]), "address64.wast:393", 0n);

// address64.wast:394
assert_return(() => call($2, "8u_good5", [65_503n]), "address64.wast:394", 0n);

// address64.wast:396
assert_return(() => call($2, "8s_good1", [65_503n]), "address64.wast:396", 0n);

// address64.wast:397
assert_return(() => call($2, "8s_good2", [65_503n]), "address64.wast:397", 0n);

// address64.wast:398
assert_return(() => call($2, "8s_good3", [65_503n]), "address64.wast:398", 0n);

// address64.wast:399
assert_return(() => call($2, "8s_good4", [65_503n]), "address64.wast:399", 0n);

// address64.wast:400
assert_return(() => call($2, "8s_good5", [65_503n]), "address64.wast:400", 0n);

// address64.wast:402
assert_return(() => call($2, "16u_good1", [65_503n]), "address64.wast:402", 0n);

// address64.wast:403
assert_return(() => call($2, "16u_good2", [65_503n]), "address64.wast:403", 0n);

// address64.wast:404
assert_return(() => call($2, "16u_good3", [65_503n]), "address64.wast:404", 0n);

// address64.wast:405
assert_return(() => call($2, "16u_good4", [65_503n]), "address64.wast:405", 0n);

// address64.wast:406
assert_return(() => call($2, "16u_good5", [65_503n]), "address64.wast:406", 0n);

// address64.wast:408
assert_return(() => call($2, "16s_good1", [65_503n]), "address64.wast:408", 0n);

// address64.wast:409
assert_return(() => call($2, "16s_good2", [65_503n]), "address64.wast:409", 0n);

// address64.wast:410
assert_return(() => call($2, "16s_good3", [65_503n]), "address64.wast:410", 0n);

// address64.wast:411
assert_return(() => call($2, "16s_good4", [65_503n]), "address64.wast:411", 0n);

// address64.wast:412
assert_return(() => call($2, "16s_good5", [65_503n]), "address64.wast:412", 0n);

// address64.wast:414
assert_return(() => call($2, "32u_good1", [65_503n]), "address64.wast:414", 0n);

// address64.wast:415
assert_return(() => call($2, "32u_good2", [65_503n]), "address64.wast:415", 0n);

// address64.wast:416
assert_return(() => call($2, "32u_good3", [65_503n]), "address64.wast:416", 0n);

// address64.wast:417
assert_return(() => call($2, "32u_good4", [65_503n]), "address64.wast:417", 0n);

// address64.wast:418
assert_return(() => call($2, "32u_good5", [65_503n]), "address64.wast:418", 0n);

// address64.wast:420
assert_return(() => call($2, "32s_good1", [65_503n]), "address64.wast:420", 0n);

// address64.wast:421
assert_return(() => call($2, "32s_good2", [65_503n]), "address64.wast:421", 0n);

// address64.wast:422
assert_return(() => call($2, "32s_good3", [65_503n]), "address64.wast:422", 0n);

// address64.wast:423
assert_return(() => call($2, "32s_good4", [65_503n]), "address64.wast:423", 0n);

// address64.wast:424
assert_return(() => call($2, "32s_good5", [65_503n]), "address64.wast:424", 0n);

// address64.wast:426
assert_return(() => call($2, "64_good1", [65_503n]), "address64.wast:426", 0n);

// address64.wast:427
assert_return(() => call($2, "64_good2", [65_503n]), "address64.wast:427", 0n);

// address64.wast:428
assert_return(() => call($2, "64_good3", [65_503n]), "address64.wast:428", 0n);

// address64.wast:429
assert_return(() => call($2, "64_good4", [65_503n]), "address64.wast:429", 0n);

// address64.wast:430
assert_return(() => call($2, "64_good5", [65_503n]), "address64.wast:430", 0n);

// address64.wast:432
assert_return(() => call($2, "8u_good1", [65_504n]), "address64.wast:432", 0n);

// address64.wast:433
assert_return(() => call($2, "8u_good2", [65_504n]), "address64.wast:433", 0n);

// address64.wast:434
assert_return(() => call($2, "8u_good3", [65_504n]), "address64.wast:434", 0n);

// address64.wast:435
assert_return(() => call($2, "8u_good4", [65_504n]), "address64.wast:435", 0n);

// address64.wast:436
assert_return(() => call($2, "8u_good5", [65_504n]), "address64.wast:436", 0n);

// address64.wast:438
assert_return(() => call($2, "8s_good1", [65_504n]), "address64.wast:438", 0n);

// address64.wast:439
assert_return(() => call($2, "8s_good2", [65_504n]), "address64.wast:439", 0n);

// address64.wast:440
assert_return(() => call($2, "8s_good3", [65_504n]), "address64.wast:440", 0n);

// address64.wast:441
assert_return(() => call($2, "8s_good4", [65_504n]), "address64.wast:441", 0n);

// address64.wast:442
assert_return(() => call($2, "8s_good5", [65_504n]), "address64.wast:442", 0n);

// address64.wast:444
assert_return(() => call($2, "16u_good1", [65_504n]), "address64.wast:444", 0n);

// address64.wast:445
assert_return(() => call($2, "16u_good2", [65_504n]), "address64.wast:445", 0n);

// address64.wast:446
assert_return(() => call($2, "16u_good3", [65_504n]), "address64.wast:446", 0n);

// address64.wast:447
assert_return(() => call($2, "16u_good4", [65_504n]), "address64.wast:447", 0n);

// address64.wast:448
assert_return(() => call($2, "16u_good5", [65_504n]), "address64.wast:448", 0n);

// address64.wast:450
assert_return(() => call($2, "16s_good1", [65_504n]), "address64.wast:450", 0n);

// address64.wast:451
assert_return(() => call($2, "16s_good2", [65_504n]), "address64.wast:451", 0n);

// address64.wast:452
assert_return(() => call($2, "16s_good3", [65_504n]), "address64.wast:452", 0n);

// address64.wast:453
assert_return(() => call($2, "16s_good4", [65_504n]), "address64.wast:453", 0n);

// address64.wast:454
assert_return(() => call($2, "16s_good5", [65_504n]), "address64.wast:454", 0n);

// address64.wast:456
assert_return(() => call($2, "32u_good1", [65_504n]), "address64.wast:456", 0n);

// address64.wast:457
assert_return(() => call($2, "32u_good2", [65_504n]), "address64.wast:457", 0n);

// address64.wast:458
assert_return(() => call($2, "32u_good3", [65_504n]), "address64.wast:458", 0n);

// address64.wast:459
assert_return(() => call($2, "32u_good4", [65_504n]), "address64.wast:459", 0n);

// address64.wast:460
assert_return(() => call($2, "32u_good5", [65_504n]), "address64.wast:460", 0n);

// address64.wast:462
assert_return(() => call($2, "32s_good1", [65_504n]), "address64.wast:462", 0n);

// address64.wast:463
assert_return(() => call($2, "32s_good2", [65_504n]), "address64.wast:463", 0n);

// address64.wast:464
assert_return(() => call($2, "32s_good3", [65_504n]), "address64.wast:464", 0n);

// address64.wast:465
assert_return(() => call($2, "32s_good4", [65_504n]), "address64.wast:465", 0n);

// address64.wast:466
assert_return(() => call($2, "32s_good5", [65_504n]), "address64.wast:466", 0n);

// address64.wast:468
assert_return(() => call($2, "64_good1", [65_504n]), "address64.wast:468", 0n);

// address64.wast:469
assert_return(() => call($2, "64_good2", [65_504n]), "address64.wast:469", 0n);

// address64.wast:470
assert_return(() => call($2, "64_good3", [65_504n]), "address64.wast:470", 0n);

// address64.wast:471
assert_return(() => call($2, "64_good4", [65_504n]), "address64.wast:471", 0n);

// address64.wast:472
assert_trap(() => call($2, "64_good5", [65_504n]), "address64.wast:472");

// address64.wast:474
assert_trap(() => call($2, "8u_bad", [0n]), "address64.wast:474");

// address64.wast:475
assert_trap(() => call($2, "8s_bad", [0n]), "address64.wast:475");

// address64.wast:476
assert_trap(() => call($2, "16u_bad", [0n]), "address64.wast:476");

// address64.wast:477
assert_trap(() => call($2, "16s_bad", [0n]), "address64.wast:477");

// address64.wast:478
assert_trap(() => call($2, "32u_bad", [0n]), "address64.wast:478");

// address64.wast:479
assert_trap(() => call($2, "32s_bad", [0n]), "address64.wast:479");

// address64.wast:480
assert_trap(() => call($2, "64_bad", [0n]), "address64.wast:480");

// address64.wast:482
assert_trap(() => call($2, "8u_bad", [1n]), "address64.wast:482");

// address64.wast:483
assert_trap(() => call($2, "8s_bad", [1n]), "address64.wast:483");

// address64.wast:484
assert_trap(() => call($2, "16u_bad", [1n]), "address64.wast:484");

// address64.wast:485
assert_trap(() => call($2, "16s_bad", [1n]), "address64.wast:485");

// address64.wast:486
assert_trap(() => call($2, "32u_bad", [0n]), "address64.wast:486");

// address64.wast:487
assert_trap(() => call($2, "32s_bad", [0n]), "address64.wast:487");

// address64.wast:488
assert_trap(() => call($2, "64_bad", [1n]), "address64.wast:488");

// address64.wast:492
let $$3 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x01\x7e\x01\x7d\x60\x01\x7e\x00\x03\x87\x80\x80\x80\x00\x06\x00\x00\x00\x00\x00\x01\x05\x83\x80\x80\x80\x00\x01\x04\x01\x07\xc1\x80\x80\x80\x00\x06\x08\x33\x32\x5f\x67\x6f\x6f\x64\x31\x00\x00\x08\x33\x32\x5f\x67\x6f\x6f\x64\x32\x00\x01\x08\x33\x32\x5f\x67\x6f\x6f\x64\x33\x00\x02\x08\x33\x32\x5f\x67\x6f\x6f\x64\x34\x00\x03\x08\x33\x32\x5f\x67\x6f\x6f\x64\x35\x00\x04\x06\x33\x32\x5f\x62\x61\x64\x00\x05\x0a\xce\x80\x80\x80\x00\x06\x87\x80\x80\x80\x00\x00\x20\x00\x2a\x02\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2a\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2a\x00\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2a\x01\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2a\x02\x08\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x2a\x02\xff\xff\xff\xff\x0f\x1a\x0b\x0b\x92\x80\x80\x80\x00\x01\x00\x42\x00\x0b\x0c\x00\x00\x00\x00\x00\x00\xa0\x7f\x01\x00\xd0\x7f", "address64.wast:492");

// address64.wast:492
let $3 = instance($$3);

// address64.wast:516
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x33\x32\x5f\x67\x6f\x6f\x64\x31\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9c\x80\x80\x80\x00\x01\x96\x80\x80\x80\x00\x00\x02\x40\x42\x00\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "address64.wast:516");  // assert_return(() => call($3, "32_good1", [0n]), "address64.wast:516", 0.)

// address64.wast:517
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x33\x32\x5f\x67\x6f\x6f\x64\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9c\x80\x80\x80\x00\x01\x96\x80\x80\x80\x00\x00\x02\x40\x42\x00\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "address64.wast:517");  // assert_return(() => call($3, "32_good2", [0n]), "address64.wast:517", 0.)

// address64.wast:518
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x33\x32\x5f\x67\x6f\x6f\x64\x33\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9c\x80\x80\x80\x00\x01\x96\x80\x80\x80\x00\x00\x02\x40\x42\x00\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "address64.wast:518");  // assert_return(() => call($3, "32_good3", [0n]), "address64.wast:518", 0.)

// address64.wast:519
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x33\x32\x5f\x67\x6f\x6f\x64\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9c\x80\x80\x80\x00\x01\x96\x80\x80\x80\x00\x00\x02\x40\x42\x00\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "address64.wast:519");  // assert_return(() => call($3, "32_good4", [0n]), "address64.wast:519", 0.)

// address64.wast:520
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x33\x32\x5f\x67\x6f\x6f\x64\x35\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9c\x80\x80\x80\x00\x01\x96\x80\x80\x80\x00\x00\x02\x40\x42\x00\x10\x00\xbc\x43\x01\x00\xd0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "address64.wast:520");  // assert_return(() => call($3, "32_good5", [0n]), "address64.wast:520", NaN)

// address64.wast:522
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x33\x32\x5f\x67\x6f\x6f\x64\x31\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x42\xf4\xff\x03\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "address64.wast:522");  // assert_return(() => call($3, "32_good1", [65_524n]), "address64.wast:522", 0.)

// address64.wast:523
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x33\x32\x5f\x67\x6f\x6f\x64\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x42\xf4\xff\x03\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "address64.wast:523");  // assert_return(() => call($3, "32_good2", [65_524n]), "address64.wast:523", 0.)

// address64.wast:524
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x33\x32\x5f\x67\x6f\x6f\x64\x33\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x42\xf4\xff\x03\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "address64.wast:524");  // assert_return(() => call($3, "32_good3", [65_524n]), "address64.wast:524", 0.)

// address64.wast:525
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x33\x32\x5f\x67\x6f\x6f\x64\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x42\xf4\xff\x03\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "address64.wast:525");  // assert_return(() => call($3, "32_good4", [65_524n]), "address64.wast:525", 0.)

// address64.wast:526
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x33\x32\x5f\x67\x6f\x6f\x64\x35\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x42\xf4\xff\x03\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "address64.wast:526");  // assert_return(() => call($3, "32_good5", [65_524n]), "address64.wast:526", 0.)

// address64.wast:528
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x33\x32\x5f\x67\x6f\x6f\x64\x31\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x42\xf5\xff\x03\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "address64.wast:528");  // assert_return(() => call($3, "32_good1", [65_525n]), "address64.wast:528", 0.)

// address64.wast:529
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x33\x32\x5f\x67\x6f\x6f\x64\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x42\xf5\xff\x03\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "address64.wast:529");  // assert_return(() => call($3, "32_good2", [65_525n]), "address64.wast:529", 0.)

// address64.wast:530
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x33\x32\x5f\x67\x6f\x6f\x64\x33\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x42\xf5\xff\x03\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "address64.wast:530");  // assert_return(() => call($3, "32_good3", [65_525n]), "address64.wast:530", 0.)

// address64.wast:531
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x33\x32\x5f\x67\x6f\x6f\x64\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x42\xf5\xff\x03\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "address64.wast:531");  // assert_return(() => call($3, "32_good4", [65_525n]), "address64.wast:531", 0.)

// address64.wast:532
assert_trap(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x33\x32\x5f\x67\x6f\x6f\x64\x35\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x93\x80\x80\x80\x00\x01\x8d\x80\x80\x80\x00\x00\x02\x40\x42\xf5\xff\x03\x10\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "address64.wast:532");  // assert_trap(() => call($3, "32_good5", [65_525n]), "address64.wast:532")

// address64.wast:534
assert_trap(() => call($3, "32_bad", [0n]), "address64.wast:534");

// address64.wast:535
assert_trap(() => call($3, "32_bad", [1n]), "address64.wast:535");

// address64.wast:539
let $$4 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8a\x80\x80\x80\x00\x02\x60\x01\x7e\x01\x7c\x60\x01\x7e\x00\x03\x87\x80\x80\x80\x00\x06\x00\x00\x00\x00\x00\x01\x05\x83\x80\x80\x80\x00\x01\x04\x01\x07\xc1\x80\x80\x80\x00\x06\x08\x36\x34\x5f\x67\x6f\x6f\x64\x31\x00\x00\x08\x36\x34\x5f\x67\x6f\x6f\x64\x32\x00\x01\x08\x36\x34\x5f\x67\x6f\x6f\x64\x33\x00\x02\x08\x36\x34\x5f\x67\x6f\x6f\x64\x34\x00\x03\x08\x36\x34\x5f\x67\x6f\x6f\x64\x35\x00\x04\x06\x36\x34\x5f\x62\x61\x64\x00\x05\x0a\xce\x80\x80\x80\x00\x06\x87\x80\x80\x80\x00\x00\x20\x00\x2b\x03\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2b\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2b\x00\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2b\x01\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x2b\x03\x12\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x2b\x03\xff\xff\xff\xff\x0f\x1a\x0b\x0b\xa0\x80\x80\x80\x00\x01\x00\x42\x00\x0b\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf4\x7f\x01\x00\x00\x00\x00\x00\xfc\x7f", "address64.wast:539");

// address64.wast:539
let $4 = instance($$4);

// address64.wast:563
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x36\x34\x5f\x67\x6f\x6f\x64\x31\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xa0\x80\x80\x80\x00\x01\x9a\x80\x80\x80\x00\x00\x02\x40\x42\x00\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "address64.wast:563");  // assert_return(() => call($4, "64_good1", [0n]), "address64.wast:563", 0.)

// address64.wast:564
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x36\x34\x5f\x67\x6f\x6f\x64\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xa0\x80\x80\x80\x00\x01\x9a\x80\x80\x80\x00\x00\x02\x40\x42\x00\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "address64.wast:564");  // assert_return(() => call($4, "64_good2", [0n]), "address64.wast:564", 0.)

// address64.wast:565
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x36\x34\x5f\x67\x6f\x6f\x64\x33\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xa0\x80\x80\x80\x00\x01\x9a\x80\x80\x80\x00\x00\x02\x40\x42\x00\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "address64.wast:565");  // assert_return(() => call($4, "64_good3", [0n]), "address64.wast:565", 0.)

// address64.wast:566
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x36\x34\x5f\x67\x6f\x6f\x64\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xa0\x80\x80\x80\x00\x01\x9a\x80\x80\x80\x00\x00\x02\x40\x42\x00\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "address64.wast:566");  // assert_return(() => call($4, "64_good4", [0n]), "address64.wast:566", 0.)

// address64.wast:567
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x36\x34\x5f\x67\x6f\x6f\x64\x35\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xa0\x80\x80\x80\x00\x01\x9a\x80\x80\x80\x00\x00\x02\x40\x42\x00\x10\x00\xbd\x44\x01\x00\x00\x00\x00\x00\xfc\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "address64.wast:567");  // assert_return(() => call($4, "64_good5", [0n]), "address64.wast:567", NaN)

// address64.wast:569
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x36\x34\x5f\x67\x6f\x6f\x64\x31\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xa2\x80\x80\x80\x00\x01\x9c\x80\x80\x80\x00\x00\x02\x40\x42\xe6\xff\x03\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "address64.wast:569");  // assert_return(() => call($4, "64_good1", [65_510n]), "address64.wast:569", 0.)

// address64.wast:570
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x36\x34\x5f\x67\x6f\x6f\x64\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xa2\x80\x80\x80\x00\x01\x9c\x80\x80\x80\x00\x00\x02\x40\x42\xe6\xff\x03\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "address64.wast:570");  // assert_return(() => call($4, "64_good2", [65_510n]), "address64.wast:570", 0.)

// address64.wast:571
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x36\x34\x5f\x67\x6f\x6f\x64\x33\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xa2\x80\x80\x80\x00\x01\x9c\x80\x80\x80\x00\x00\x02\x40\x42\xe6\xff\x03\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "address64.wast:571");  // assert_return(() => call($4, "64_good3", [65_510n]), "address64.wast:571", 0.)

// address64.wast:572
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x36\x34\x5f\x67\x6f\x6f\x64\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xa2\x80\x80\x80\x00\x01\x9c\x80\x80\x80\x00\x00\x02\x40\x42\xe6\xff\x03\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "address64.wast:572");  // assert_return(() => call($4, "64_good4", [65_510n]), "address64.wast:572", 0.)

// address64.wast:573
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x36\x34\x5f\x67\x6f\x6f\x64\x35\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xa2\x80\x80\x80\x00\x01\x9c\x80\x80\x80\x00\x00\x02\x40\x42\xe6\xff\x03\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "address64.wast:573");  // assert_return(() => call($4, "64_good5", [65_510n]), "address64.wast:573", 0.)

// address64.wast:575
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x36\x34\x5f\x67\x6f\x6f\x64\x31\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xa2\x80\x80\x80\x00\x01\x9c\x80\x80\x80\x00\x00\x02\x40\x42\xe7\xff\x03\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "address64.wast:575");  // assert_return(() => call($4, "64_good1", [65_511n]), "address64.wast:575", 0.)

// address64.wast:576
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x36\x34\x5f\x67\x6f\x6f\x64\x32\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xa2\x80\x80\x80\x00\x01\x9c\x80\x80\x80\x00\x00\x02\x40\x42\xe7\xff\x03\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "address64.wast:576");  // assert_return(() => call($4, "64_good2", [65_511n]), "address64.wast:576", 0.)

// address64.wast:577
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x36\x34\x5f\x67\x6f\x6f\x64\x33\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xa2\x80\x80\x80\x00\x01\x9c\x80\x80\x80\x00\x00\x02\x40\x42\xe7\xff\x03\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "address64.wast:577");  // assert_return(() => call($4, "64_good3", [65_511n]), "address64.wast:577", 0.)

// address64.wast:578
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x36\x34\x5f\x67\x6f\x6f\x64\x34\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\xa2\x80\x80\x80\x00\x01\x9c\x80\x80\x80\x00\x00\x02\x40\x42\xe7\xff\x03\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "address64.wast:578");  // assert_return(() => call($4, "64_good4", [65_511n]), "address64.wast:578", 0.)

// address64.wast:579
assert_trap(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x94\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x01\x7e\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x36\x34\x5f\x67\x6f\x6f\x64\x35\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x93\x80\x80\x80\x00\x01\x8d\x80\x80\x80\x00\x00\x02\x40\x42\xe7\xff\x03\x10\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "address64.wast:579");  // assert_trap(() => call($4, "64_good5", [65_511n]), "address64.wast:579")

// address64.wast:581
assert_trap(() => call($4, "64_bad", [0n]), "address64.wast:581");

// address64.wast:582
assert_trap(() => call($4, "64_bad", [1n]), "address64.wast:582");
reinitializeRegistry();
})();

(function table_init64_wast_js() {

// table_init64.wast:6
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x86\x80\x80\x80\x00\x05\x00\x00\x00\x00\x00\x07\x9f\x80\x80\x80\x00\x05\x03\x65\x66\x30\x00\x00\x03\x65\x66\x31\x00\x01\x03\x65\x66\x32\x00\x02\x03\x65\x66\x33\x00\x03\x03\x65\x66\x34\x00\x04\x0a\xae\x80\x80\x80\x00\x05\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b", "table_init64.wast:6");

// table_init64.wast:6
let $1 = instance($$1);

// table_init64.wast:13
register("a", $1)

// table_init64.wast:15
let $$2 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7f\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xcb\x80\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x07\x41\x00\x41\x04\xfc\x0c\x01\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b", "table_init64.wast:15");

// table_init64.wast:15
let $2 = instance($$2);

// table_init64.wast:42
run(() => call($2, "test", []), "table_init64.wast:42");

// table_init64.wast:43
assert_trap(() => call($2, "check", [0]), "table_init64.wast:43");

// table_init64.wast:44
assert_trap(() => call($2, "check", [1]), "table_init64.wast:44");

// table_init64.wast:45
assert_return(() => call($2, "check", [2]), "table_init64.wast:45", 3);

// table_init64.wast:46
assert_return(() => call($2, "check", [3]), "table_init64.wast:46", 1);

// table_init64.wast:47
assert_return(() => call($2, "check", [4]), "table_init64.wast:47", 4);

// table_init64.wast:48
assert_return(() => call($2, "check", [5]), "table_init64.wast:48", 1);

// table_init64.wast:49
assert_trap(() => call($2, "check", [6]), "table_init64.wast:49");

// table_init64.wast:50
assert_return(() => call($2, "check", [7]), "table_init64.wast:50", 2);

// table_init64.wast:51
assert_return(() => call($2, "check", [8]), "table_init64.wast:51", 7);

// table_init64.wast:52
assert_return(() => call($2, "check", [9]), "table_init64.wast:52", 1);

// table_init64.wast:53
assert_return(() => call($2, "check", [10]), "table_init64.wast:53", 8);

// table_init64.wast:54
assert_trap(() => call($2, "check", [11]), "table_init64.wast:54");

// table_init64.wast:55
assert_return(() => call($2, "check", [12]), "table_init64.wast:55", 7);

// table_init64.wast:56
assert_return(() => call($2, "check", [13]), "table_init64.wast:56", 5);

// table_init64.wast:57
assert_return(() => call($2, "check", [14]), "table_init64.wast:57", 2);

// table_init64.wast:58
assert_return(() => call($2, "check", [15]), "table_init64.wast:58", 3);

// table_init64.wast:59
assert_return(() => call($2, "check", [16]), "table_init64.wast:59", 6);

// table_init64.wast:60
assert_trap(() => call($2, "check", [17]), "table_init64.wast:60");

// table_init64.wast:61
assert_trap(() => call($2, "check", [18]), "table_init64.wast:61");

// table_init64.wast:62
assert_trap(() => call($2, "check", [19]), "table_init64.wast:62");

// table_init64.wast:63
assert_trap(() => call($2, "check", [20]), "table_init64.wast:63");

// table_init64.wast:64
assert_trap(() => call($2, "check", [21]), "table_init64.wast:64");

// table_init64.wast:65
assert_trap(() => call($2, "check", [22]), "table_init64.wast:65");

// table_init64.wast:66
assert_trap(() => call($2, "check", [23]), "table_init64.wast:66");

// table_init64.wast:67
assert_trap(() => call($2, "check", [24]), "table_init64.wast:67");

// table_init64.wast:68
assert_trap(() => call($2, "check", [25]), "table_init64.wast:68");

// table_init64.wast:69
assert_trap(() => call($2, "check", [26]), "table_init64.wast:69");

// table_init64.wast:70
assert_trap(() => call($2, "check", [27]), "table_init64.wast:70");

// table_init64.wast:71
assert_trap(() => call($2, "check", [28]), "table_init64.wast:71");

// table_init64.wast:72
assert_trap(() => call($2, "check", [29]), "table_init64.wast:72");

// table_init64.wast:74
let $$3 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7f\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xcb\x80\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0f\x41\x01\x41\x03\xfc\x0c\x03\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b", "table_init64.wast:74");

// table_init64.wast:74
let $3 = instance($$3);

// table_init64.wast:101
run(() => call($3, "test", []), "table_init64.wast:101");

// table_init64.wast:102
assert_trap(() => call($3, "check", [0]), "table_init64.wast:102");

// table_init64.wast:103
assert_trap(() => call($3, "check", [1]), "table_init64.wast:103");

// table_init64.wast:104
assert_return(() => call($3, "check", [2]), "table_init64.wast:104", 3);

// table_init64.wast:105
assert_return(() => call($3, "check", [3]), "table_init64.wast:105", 1);

// table_init64.wast:106
assert_return(() => call($3, "check", [4]), "table_init64.wast:106", 4);

// table_init64.wast:107
assert_return(() => call($3, "check", [5]), "table_init64.wast:107", 1);

// table_init64.wast:108
assert_trap(() => call($3, "check", [6]), "table_init64.wast:108");

// table_init64.wast:109
assert_trap(() => call($3, "check", [7]), "table_init64.wast:109");

// table_init64.wast:110
assert_trap(() => call($3, "check", [8]), "table_init64.wast:110");

// table_init64.wast:111
assert_trap(() => call($3, "check", [9]), "table_init64.wast:111");

// table_init64.wast:112
assert_trap(() => call($3, "check", [10]), "table_init64.wast:112");

// table_init64.wast:113
assert_trap(() => call($3, "check", [11]), "table_init64.wast:113");

// table_init64.wast:114
assert_return(() => call($3, "check", [12]), "table_init64.wast:114", 7);

// table_init64.wast:115
assert_return(() => call($3, "check", [13]), "table_init64.wast:115", 5);

// table_init64.wast:116
assert_return(() => call($3, "check", [14]), "table_init64.wast:116", 2);

// table_init64.wast:117
assert_return(() => call($3, "check", [15]), "table_init64.wast:117", 9);

// table_init64.wast:118
assert_return(() => call($3, "check", [16]), "table_init64.wast:118", 2);

// table_init64.wast:119
assert_return(() => call($3, "check", [17]), "table_init64.wast:119", 7);

// table_init64.wast:120
assert_trap(() => call($3, "check", [18]), "table_init64.wast:120");

// table_init64.wast:121
assert_trap(() => call($3, "check", [19]), "table_init64.wast:121");

// table_init64.wast:122
assert_trap(() => call($3, "check", [20]), "table_init64.wast:122");

// table_init64.wast:123
assert_trap(() => call($3, "check", [21]), "table_init64.wast:123");

// table_init64.wast:124
assert_trap(() => call($3, "check", [22]), "table_init64.wast:124");

// table_init64.wast:125
assert_trap(() => call($3, "check", [23]), "table_init64.wast:125");

// table_init64.wast:126
assert_trap(() => call($3, "check", [24]), "table_init64.wast:126");

// table_init64.wast:127
assert_trap(() => call($3, "check", [25]), "table_init64.wast:127");

// table_init64.wast:128
assert_trap(() => call($3, "check", [26]), "table_init64.wast:128");

// table_init64.wast:129
assert_trap(() => call($3, "check", [27]), "table_init64.wast:129");

// table_init64.wast:130
assert_trap(() => call($3, "check", [28]), "table_init64.wast:130");

// table_init64.wast:131
assert_trap(() => call($3, "check", [29]), "table_init64.wast:131");

// table_init64.wast:133
let $$4 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7f\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\x8d\x81\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\xce\x80\x80\x80\x00\x00\x41\x07\x41\x00\x41\x04\xfc\x0c\x01\x00\xfc\x0d\x01\x41\x0f\x41\x01\x41\x03\xfc\x0c\x03\x00\xfc\x0d\x03\x41\x14\x41\x0f\x41\x05\xfc\x0e\x00\x00\x41\x15\x41\x1d\x41\x01\xfc\x0e\x00\x00\x41\x18\x41\x0a\x41\x01\xfc\x0e\x00\x00\x41\x0d\x41\x0b\x41\x04\xfc\x0e\x00\x00\x41\x13\x41\x14\x41\x05\xfc\x0e\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b", "table_init64.wast:133");

// table_init64.wast:133
let $4 = instance($$4);

// table_init64.wast:168
run(() => call($4, "test", []), "table_init64.wast:168");

// table_init64.wast:169
assert_trap(() => call($4, "check", [0]), "table_init64.wast:169");

// table_init64.wast:170
assert_trap(() => call($4, "check", [1]), "table_init64.wast:170");

// table_init64.wast:171
assert_return(() => call($4, "check", [2]), "table_init64.wast:171", 3);

// table_init64.wast:172
assert_return(() => call($4, "check", [3]), "table_init64.wast:172", 1);

// table_init64.wast:173
assert_return(() => call($4, "check", [4]), "table_init64.wast:173", 4);

// table_init64.wast:174
assert_return(() => call($4, "check", [5]), "table_init64.wast:174", 1);

// table_init64.wast:175
assert_trap(() => call($4, "check", [6]), "table_init64.wast:175");

// table_init64.wast:176
assert_return(() => call($4, "check", [7]), "table_init64.wast:176", 2);

// table_init64.wast:177
assert_return(() => call($4, "check", [8]), "table_init64.wast:177", 7);

// table_init64.wast:178
assert_return(() => call($4, "check", [9]), "table_init64.wast:178", 1);

// table_init64.wast:179
assert_return(() => call($4, "check", [10]), "table_init64.wast:179", 8);

// table_init64.wast:180
assert_trap(() => call($4, "check", [11]), "table_init64.wast:180");

// table_init64.wast:181
assert_return(() => call($4, "check", [12]), "table_init64.wast:181", 7);

// table_init64.wast:182
assert_trap(() => call($4, "check", [13]), "table_init64.wast:182");

// table_init64.wast:183
assert_return(() => call($4, "check", [14]), "table_init64.wast:183", 7);

// table_init64.wast:184
assert_return(() => call($4, "check", [15]), "table_init64.wast:184", 5);

// table_init64.wast:185
assert_return(() => call($4, "check", [16]), "table_init64.wast:185", 2);

// table_init64.wast:186
assert_return(() => call($4, "check", [17]), "table_init64.wast:186", 7);

// table_init64.wast:187
assert_trap(() => call($4, "check", [18]), "table_init64.wast:187");

// table_init64.wast:188
assert_return(() => call($4, "check", [19]), "table_init64.wast:188", 9);

// table_init64.wast:189
assert_trap(() => call($4, "check", [20]), "table_init64.wast:189");

// table_init64.wast:190
assert_return(() => call($4, "check", [21]), "table_init64.wast:190", 7);

// table_init64.wast:191
assert_trap(() => call($4, "check", [22]), "table_init64.wast:191");

// table_init64.wast:192
assert_return(() => call($4, "check", [23]), "table_init64.wast:192", 8);

// table_init64.wast:193
assert_return(() => call($4, "check", [24]), "table_init64.wast:193", 8);

// table_init64.wast:194
assert_trap(() => call($4, "check", [25]), "table_init64.wast:194");

// table_init64.wast:195
assert_trap(() => call($4, "check", [26]), "table_init64.wast:195");

// table_init64.wast:196
assert_trap(() => call($4, "check", [27]), "table_init64.wast:196");

// table_init64.wast:197
assert_trap(() => call($4, "check", [28]), "table_init64.wast:197");

// table_init64.wast:198
assert_trap(() => call($4, "check", [29]), "table_init64.wast:198");

// table_init64.wast:200
let $$5 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7f\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xcb\x80\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x07\x41\x00\x41\x04\xfc\x0c\x01\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x01\x0b", "table_init64.wast:200");

// table_init64.wast:200
let $5 = instance($$5);

// table_init64.wast:227
run(() => call($5, "test", []), "table_init64.wast:227");

// table_init64.wast:228
assert_trap(() => call($5, "check", [0]), "table_init64.wast:228");

// table_init64.wast:229
assert_trap(() => call($5, "check", [1]), "table_init64.wast:229");

// table_init64.wast:230
assert_return(() => call($5, "check", [2]), "table_init64.wast:230", 3);

// table_init64.wast:231
assert_return(() => call($5, "check", [3]), "table_init64.wast:231", 1);

// table_init64.wast:232
assert_return(() => call($5, "check", [4]), "table_init64.wast:232", 4);

// table_init64.wast:233
assert_return(() => call($5, "check", [5]), "table_init64.wast:233", 1);

// table_init64.wast:234
assert_trap(() => call($5, "check", [6]), "table_init64.wast:234");

// table_init64.wast:235
assert_return(() => call($5, "check", [7]), "table_init64.wast:235", 2);

// table_init64.wast:236
assert_return(() => call($5, "check", [8]), "table_init64.wast:236", 7);

// table_init64.wast:237
assert_return(() => call($5, "check", [9]), "table_init64.wast:237", 1);

// table_init64.wast:238
assert_return(() => call($5, "check", [10]), "table_init64.wast:238", 8);

// table_init64.wast:239
assert_trap(() => call($5, "check", [11]), "table_init64.wast:239");

// table_init64.wast:240
assert_return(() => call($5, "check", [12]), "table_init64.wast:240", 7);

// table_init64.wast:241
assert_return(() => call($5, "check", [13]), "table_init64.wast:241", 5);

// table_init64.wast:242
assert_return(() => call($5, "check", [14]), "table_init64.wast:242", 2);

// table_init64.wast:243
assert_return(() => call($5, "check", [15]), "table_init64.wast:243", 3);

// table_init64.wast:244
assert_return(() => call($5, "check", [16]), "table_init64.wast:244", 6);

// table_init64.wast:245
assert_trap(() => call($5, "check", [17]), "table_init64.wast:245");

// table_init64.wast:246
assert_trap(() => call($5, "check", [18]), "table_init64.wast:246");

// table_init64.wast:247
assert_trap(() => call($5, "check", [19]), "table_init64.wast:247");

// table_init64.wast:248
assert_trap(() => call($5, "check", [20]), "table_init64.wast:248");

// table_init64.wast:249
assert_trap(() => call($5, "check", [21]), "table_init64.wast:249");

// table_init64.wast:250
assert_trap(() => call($5, "check", [22]), "table_init64.wast:250");

// table_init64.wast:251
assert_trap(() => call($5, "check", [23]), "table_init64.wast:251");

// table_init64.wast:252
assert_trap(() => call($5, "check", [24]), "table_init64.wast:252");

// table_init64.wast:253
assert_trap(() => call($5, "check", [25]), "table_init64.wast:253");

// table_init64.wast:254
assert_trap(() => call($5, "check", [26]), "table_init64.wast:254");

// table_init64.wast:255
assert_trap(() => call($5, "check", [27]), "table_init64.wast:255");

// table_init64.wast:256
assert_trap(() => call($5, "check", [28]), "table_init64.wast:256");

// table_init64.wast:257
assert_trap(() => call($5, "check", [29]), "table_init64.wast:257");

// table_init64.wast:259
let $$6 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7f\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xcb\x80\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0f\x41\x01\x41\x03\xfc\x0c\x03\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x01\x0b", "table_init64.wast:259");

// table_init64.wast:259
let $6 = instance($$6);

// table_init64.wast:286
run(() => call($6, "test", []), "table_init64.wast:286");

// table_init64.wast:287
assert_trap(() => call($6, "check", [0]), "table_init64.wast:287");

// table_init64.wast:288
assert_trap(() => call($6, "check", [1]), "table_init64.wast:288");

// table_init64.wast:289
assert_return(() => call($6, "check", [2]), "table_init64.wast:289", 3);

// table_init64.wast:290
assert_return(() => call($6, "check", [3]), "table_init64.wast:290", 1);

// table_init64.wast:291
assert_return(() => call($6, "check", [4]), "table_init64.wast:291", 4);

// table_init64.wast:292
assert_return(() => call($6, "check", [5]), "table_init64.wast:292", 1);

// table_init64.wast:293
assert_trap(() => call($6, "check", [6]), "table_init64.wast:293");

// table_init64.wast:294
assert_trap(() => call($6, "check", [7]), "table_init64.wast:294");

// table_init64.wast:295
assert_trap(() => call($6, "check", [8]), "table_init64.wast:295");

// table_init64.wast:296
assert_trap(() => call($6, "check", [9]), "table_init64.wast:296");

// table_init64.wast:297
assert_trap(() => call($6, "check", [10]), "table_init64.wast:297");

// table_init64.wast:298
assert_trap(() => call($6, "check", [11]), "table_init64.wast:298");

// table_init64.wast:299
assert_return(() => call($6, "check", [12]), "table_init64.wast:299", 7);

// table_init64.wast:300
assert_return(() => call($6, "check", [13]), "table_init64.wast:300", 5);

// table_init64.wast:301
assert_return(() => call($6, "check", [14]), "table_init64.wast:301", 2);

// table_init64.wast:302
assert_return(() => call($6, "check", [15]), "table_init64.wast:302", 9);

// table_init64.wast:303
assert_return(() => call($6, "check", [16]), "table_init64.wast:303", 2);

// table_init64.wast:304
assert_return(() => call($6, "check", [17]), "table_init64.wast:304", 7);

// table_init64.wast:305
assert_trap(() => call($6, "check", [18]), "table_init64.wast:305");

// table_init64.wast:306
assert_trap(() => call($6, "check", [19]), "table_init64.wast:306");

// table_init64.wast:307
assert_trap(() => call($6, "check", [20]), "table_init64.wast:307");

// table_init64.wast:308
assert_trap(() => call($6, "check", [21]), "table_init64.wast:308");

// table_init64.wast:309
assert_trap(() => call($6, "check", [22]), "table_init64.wast:309");

// table_init64.wast:310
assert_trap(() => call($6, "check", [23]), "table_init64.wast:310");

// table_init64.wast:311
assert_trap(() => call($6, "check", [24]), "table_init64.wast:311");

// table_init64.wast:312
assert_trap(() => call($6, "check", [25]), "table_init64.wast:312");

// table_init64.wast:313
assert_trap(() => call($6, "check", [26]), "table_init64.wast:313");

// table_init64.wast:314
assert_trap(() => call($6, "check", [27]), "table_init64.wast:314");

// table_init64.wast:315
assert_trap(() => call($6, "check", [28]), "table_init64.wast:315");

// table_init64.wast:316
assert_trap(() => call($6, "check", [29]), "table_init64.wast:316");

// table_init64.wast:318
let $$7 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7f\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\x8d\x81\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\xce\x80\x80\x80\x00\x00\x41\x07\x41\x00\x41\x04\xfc\x0c\x01\x01\xfc\x0d\x01\x41\x0f\x41\x01\x41\x03\xfc\x0c\x03\x01\xfc\x0d\x03\x41\x14\x41\x0f\x41\x05\xfc\x0e\x01\x01\x41\x15\x41\x1d\x41\x01\xfc\x0e\x01\x01\x41\x18\x41\x0a\x41\x01\xfc\x0e\x01\x01\x41\x0d\x41\x0b\x41\x04\xfc\x0e\x01\x01\x41\x13\x41\x14\x41\x05\xfc\x0e\x01\x01\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x01\x0b", "table_init64.wast:318");

// table_init64.wast:318
let $7 = instance($$7);

// table_init64.wast:353
run(() => call($7, "test", []), "table_init64.wast:353");

// table_init64.wast:354
assert_trap(() => call($7, "check", [0]), "table_init64.wast:354");

// table_init64.wast:355
assert_trap(() => call($7, "check", [1]), "table_init64.wast:355");

// table_init64.wast:356
assert_return(() => call($7, "check", [2]), "table_init64.wast:356", 3);

// table_init64.wast:357
assert_return(() => call($7, "check", [3]), "table_init64.wast:357", 1);

// table_init64.wast:358
assert_return(() => call($7, "check", [4]), "table_init64.wast:358", 4);

// table_init64.wast:359
assert_return(() => call($7, "check", [5]), "table_init64.wast:359", 1);

// table_init64.wast:360
assert_trap(() => call($7, "check", [6]), "table_init64.wast:360");

// table_init64.wast:361
assert_return(() => call($7, "check", [7]), "table_init64.wast:361", 2);

// table_init64.wast:362
assert_return(() => call($7, "check", [8]), "table_init64.wast:362", 7);

// table_init64.wast:363
assert_return(() => call($7, "check", [9]), "table_init64.wast:363", 1);

// table_init64.wast:364
assert_return(() => call($7, "check", [10]), "table_init64.wast:364", 8);

// table_init64.wast:365
assert_trap(() => call($7, "check", [11]), "table_init64.wast:365");

// table_init64.wast:366
assert_return(() => call($7, "check", [12]), "table_init64.wast:366", 7);

// table_init64.wast:367
assert_trap(() => call($7, "check", [13]), "table_init64.wast:367");

// table_init64.wast:368
assert_return(() => call($7, "check", [14]), "table_init64.wast:368", 7);

// table_init64.wast:369
assert_return(() => call($7, "check", [15]), "table_init64.wast:369", 5);

// table_init64.wast:370
assert_return(() => call($7, "check", [16]), "table_init64.wast:370", 2);

// table_init64.wast:371
assert_return(() => call($7, "check", [17]), "table_init64.wast:371", 7);

// table_init64.wast:372
assert_trap(() => call($7, "check", [18]), "table_init64.wast:372");

// table_init64.wast:373
assert_return(() => call($7, "check", [19]), "table_init64.wast:373", 9);

// table_init64.wast:374
assert_trap(() => call($7, "check", [20]), "table_init64.wast:374");

// table_init64.wast:375
assert_return(() => call($7, "check", [21]), "table_init64.wast:375", 7);

// table_init64.wast:376
assert_trap(() => call($7, "check", [22]), "table_init64.wast:376");

// table_init64.wast:377
assert_return(() => call($7, "check", [23]), "table_init64.wast:377", 8);

// table_init64.wast:378
assert_return(() => call($7, "check", [24]), "table_init64.wast:378", 8);

// table_init64.wast:379
assert_trap(() => call($7, "check", [25]), "table_init64.wast:379");

// table_init64.wast:380
assert_trap(() => call($7, "check", [26]), "table_init64.wast:380");

// table_init64.wast:381
assert_trap(() => call($7, "check", [27]), "table_init64.wast:381");

// table_init64.wast:382
assert_trap(() => call($7, "check", [28]), "table_init64.wast:382");

// table_init64.wast:383
assert_trap(() => call($7, "check", [29]), "table_init64.wast:383");

// table_init64.wast:385
let $$8 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7e\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x8d\x80\x80\x80\x00\x03\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x70\x05\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb9\x80\x80\x80\x00\x04\x02\x02\x42\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x02\x42\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xcb\x80\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x42\x07\x41\x00\x41\x04\xfc\x0c\x01\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x02\x0b", "table_init64.wast:385");

// table_init64.wast:385
let $8 = instance($$8);

// table_init64.wast:412
run(() => call($8, "test", []), "table_init64.wast:412");

// table_init64.wast:413
assert_trap(() => call($8, "check", [0n]), "table_init64.wast:413");

// table_init64.wast:414
assert_trap(() => call($8, "check", [1n]), "table_init64.wast:414");

// table_init64.wast:415
assert_return(() => call($8, "check", [2n]), "table_init64.wast:415", 3);

// table_init64.wast:416
assert_return(() => call($8, "check", [3n]), "table_init64.wast:416", 1);

// table_init64.wast:417
assert_return(() => call($8, "check", [4n]), "table_init64.wast:417", 4);

// table_init64.wast:418
assert_return(() => call($8, "check", [5n]), "table_init64.wast:418", 1);

// table_init64.wast:419
assert_trap(() => call($8, "check", [6n]), "table_init64.wast:419");

// table_init64.wast:420
assert_return(() => call($8, "check", [7n]), "table_init64.wast:420", 2);

// table_init64.wast:421
assert_return(() => call($8, "check", [8n]), "table_init64.wast:421", 7);

// table_init64.wast:422
assert_return(() => call($8, "check", [9n]), "table_init64.wast:422", 1);

// table_init64.wast:423
assert_return(() => call($8, "check", [10n]), "table_init64.wast:423", 8);

// table_init64.wast:424
assert_trap(() => call($8, "check", [11n]), "table_init64.wast:424");

// table_init64.wast:425
assert_return(() => call($8, "check", [12n]), "table_init64.wast:425", 7);

// table_init64.wast:426
assert_return(() => call($8, "check", [13n]), "table_init64.wast:426", 5);

// table_init64.wast:427
assert_return(() => call($8, "check", [14n]), "table_init64.wast:427", 2);

// table_init64.wast:428
assert_return(() => call($8, "check", [15n]), "table_init64.wast:428", 3);

// table_init64.wast:429
assert_return(() => call($8, "check", [16n]), "table_init64.wast:429", 6);

// table_init64.wast:430
assert_trap(() => call($8, "check", [17n]), "table_init64.wast:430");

// table_init64.wast:431
assert_trap(() => call($8, "check", [18n]), "table_init64.wast:431");

// table_init64.wast:432
assert_trap(() => call($8, "check", [19n]), "table_init64.wast:432");

// table_init64.wast:433
assert_trap(() => call($8, "check", [20n]), "table_init64.wast:433");

// table_init64.wast:434
assert_trap(() => call($8, "check", [21n]), "table_init64.wast:434");

// table_init64.wast:435
assert_trap(() => call($8, "check", [22n]), "table_init64.wast:435");

// table_init64.wast:436
assert_trap(() => call($8, "check", [23n]), "table_init64.wast:436");

// table_init64.wast:437
assert_trap(() => call($8, "check", [24n]), "table_init64.wast:437");

// table_init64.wast:438
assert_trap(() => call($8, "check", [25n]), "table_init64.wast:438");

// table_init64.wast:439
assert_trap(() => call($8, "check", [26n]), "table_init64.wast:439");

// table_init64.wast:440
assert_trap(() => call($8, "check", [27n]), "table_init64.wast:440");

// table_init64.wast:441
assert_trap(() => call($8, "check", [28n]), "table_init64.wast:441");

// table_init64.wast:442
assert_trap(() => call($8, "check", [29n]), "table_init64.wast:442");

// table_init64.wast:444
let $$9 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7e\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x8d\x80\x80\x80\x00\x03\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x70\x05\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb9\x80\x80\x80\x00\x04\x02\x02\x42\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x02\x42\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xcb\x80\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x42\x0f\x41\x01\x41\x03\xfc\x0c\x03\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x02\x0b", "table_init64.wast:444");

// table_init64.wast:444
let $9 = instance($$9);

// table_init64.wast:471
run(() => call($9, "test", []), "table_init64.wast:471");

// table_init64.wast:472
assert_trap(() => call($9, "check", [0n]), "table_init64.wast:472");

// table_init64.wast:473
assert_trap(() => call($9, "check", [1n]), "table_init64.wast:473");

// table_init64.wast:474
assert_return(() => call($9, "check", [2n]), "table_init64.wast:474", 3);

// table_init64.wast:475
assert_return(() => call($9, "check", [3n]), "table_init64.wast:475", 1);

// table_init64.wast:476
assert_return(() => call($9, "check", [4n]), "table_init64.wast:476", 4);

// table_init64.wast:477
assert_return(() => call($9, "check", [5n]), "table_init64.wast:477", 1);

// table_init64.wast:478
assert_trap(() => call($9, "check", [6n]), "table_init64.wast:478");

// table_init64.wast:479
assert_trap(() => call($9, "check", [7n]), "table_init64.wast:479");

// table_init64.wast:480
assert_trap(() => call($9, "check", [8n]), "table_init64.wast:480");

// table_init64.wast:481
assert_trap(() => call($9, "check", [9n]), "table_init64.wast:481");

// table_init64.wast:482
assert_trap(() => call($9, "check", [10n]), "table_init64.wast:482");

// table_init64.wast:483
assert_trap(() => call($9, "check", [11n]), "table_init64.wast:483");

// table_init64.wast:484
assert_return(() => call($9, "check", [12n]), "table_init64.wast:484", 7);

// table_init64.wast:485
assert_return(() => call($9, "check", [13n]), "table_init64.wast:485", 5);

// table_init64.wast:486
assert_return(() => call($9, "check", [14n]), "table_init64.wast:486", 2);

// table_init64.wast:487
assert_return(() => call($9, "check", [15n]), "table_init64.wast:487", 9);

// table_init64.wast:488
assert_return(() => call($9, "check", [16n]), "table_init64.wast:488", 2);

// table_init64.wast:489
assert_return(() => call($9, "check", [17n]), "table_init64.wast:489", 7);

// table_init64.wast:490
assert_trap(() => call($9, "check", [18n]), "table_init64.wast:490");

// table_init64.wast:491
assert_trap(() => call($9, "check", [19n]), "table_init64.wast:491");

// table_init64.wast:492
assert_trap(() => call($9, "check", [20n]), "table_init64.wast:492");

// table_init64.wast:493
assert_trap(() => call($9, "check", [21n]), "table_init64.wast:493");

// table_init64.wast:494
assert_trap(() => call($9, "check", [22n]), "table_init64.wast:494");

// table_init64.wast:495
assert_trap(() => call($9, "check", [23n]), "table_init64.wast:495");

// table_init64.wast:496
assert_trap(() => call($9, "check", [24n]), "table_init64.wast:496");

// table_init64.wast:497
assert_trap(() => call($9, "check", [25n]), "table_init64.wast:497");

// table_init64.wast:498
assert_trap(() => call($9, "check", [26n]), "table_init64.wast:498");

// table_init64.wast:499
assert_trap(() => call($9, "check", [27n]), "table_init64.wast:499");

// table_init64.wast:500
assert_trap(() => call($9, "check", [28n]), "table_init64.wast:500");

// table_init64.wast:501
assert_trap(() => call($9, "check", [29n]), "table_init64.wast:501");

// table_init64.wast:503
let $$10 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8d\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x00\x00\x60\x01\x7e\x01\x7f\x02\xa9\x80\x80\x80\x00\x05\x01\x61\x03\x65\x66\x30\x00\x00\x01\x61\x03\x65\x66\x31\x00\x00\x01\x61\x03\x65\x66\x32\x00\x00\x01\x61\x03\x65\x66\x33\x00\x00\x01\x61\x03\x65\x66\x34\x00\x00\x03\x88\x80\x80\x80\x00\x07\x00\x00\x00\x00\x00\x01\x02\x04\x8d\x80\x80\x80\x00\x03\x70\x01\x1e\x1e\x70\x01\x1e\x1e\x70\x05\x1e\x1e\x07\x90\x80\x80\x80\x00\x02\x04\x74\x65\x73\x74\x00\x0a\x05\x63\x68\x65\x63\x6b\x00\x0b\x09\xb9\x80\x80\x80\x00\x04\x02\x02\x42\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x02\x42\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\x8d\x81\x80\x80\x00\x07\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\xce\x80\x80\x80\x00\x00\x42\x07\x41\x00\x41\x04\xfc\x0c\x01\x02\xfc\x0d\x01\x42\x0f\x41\x01\x41\x03\xfc\x0c\x03\x02\xfc\x0d\x03\x42\x14\x42\x0f\x42\x05\xfc\x0e\x02\x02\x42\x15\x42\x1d\x42\x01\xfc\x0e\x02\x02\x42\x18\x42\x0a\x42\x01\xfc\x0e\x02\x02\x42\x0d\x42\x0b\x42\x04\xfc\x0e\x02\x02\x42\x13\x42\x14\x42\x05\xfc\x0e\x02\x02\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x02\x0b", "table_init64.wast:503");

// table_init64.wast:503
let $10 = instance($$10);

// table_init64.wast:538
run(() => call($10, "test", []), "table_init64.wast:538");

// table_init64.wast:539
assert_trap(() => call($10, "check", [0n]), "table_init64.wast:539");

// table_init64.wast:540
assert_trap(() => call($10, "check", [1n]), "table_init64.wast:540");

// table_init64.wast:541
assert_return(() => call($10, "check", [2n]), "table_init64.wast:541", 3);

// table_init64.wast:542
assert_return(() => call($10, "check", [3n]), "table_init64.wast:542", 1);

// table_init64.wast:543
assert_return(() => call($10, "check", [4n]), "table_init64.wast:543", 4);

// table_init64.wast:544
assert_return(() => call($10, "check", [5n]), "table_init64.wast:544", 1);

// table_init64.wast:545
assert_trap(() => call($10, "check", [6n]), "table_init64.wast:545");

// table_init64.wast:546
assert_return(() => call($10, "check", [7n]), "table_init64.wast:546", 2);

// table_init64.wast:547
assert_return(() => call($10, "check", [8n]), "table_init64.wast:547", 7);

// table_init64.wast:548
assert_return(() => call($10, "check", [9n]), "table_init64.wast:548", 1);

// table_init64.wast:549
assert_return(() => call($10, "check", [10n]), "table_init64.wast:549", 8);

// table_init64.wast:550
assert_trap(() => call($10, "check", [11n]), "table_init64.wast:550");

// table_init64.wast:551
assert_return(() => call($10, "check", [12n]), "table_init64.wast:551", 7);

// table_init64.wast:552
assert_trap(() => call($10, "check", [13n]), "table_init64.wast:552");

// table_init64.wast:553
assert_return(() => call($10, "check", [14n]), "table_init64.wast:553", 7);

// table_init64.wast:554
assert_return(() => call($10, "check", [15n]), "table_init64.wast:554", 5);

// table_init64.wast:555
assert_return(() => call($10, "check", [16n]), "table_init64.wast:555", 2);

// table_init64.wast:556
assert_return(() => call($10, "check", [17n]), "table_init64.wast:556", 7);

// table_init64.wast:557
assert_trap(() => call($10, "check", [18n]), "table_init64.wast:557");

// table_init64.wast:558
assert_return(() => call($10, "check", [19n]), "table_init64.wast:558", 9);

// table_init64.wast:559
assert_trap(() => call($10, "check", [20n]), "table_init64.wast:559");

// table_init64.wast:560
assert_return(() => call($10, "check", [21n]), "table_init64.wast:560", 7);

// table_init64.wast:561
assert_trap(() => call($10, "check", [22n]), "table_init64.wast:561");

// table_init64.wast:562
assert_return(() => call($10, "check", [23n]), "table_init64.wast:562", 8);

// table_init64.wast:563
assert_return(() => call($10, "check", [24n]), "table_init64.wast:563", 8);

// table_init64.wast:564
assert_trap(() => call($10, "check", [25n]), "table_init64.wast:564");

// table_init64.wast:565
assert_trap(() => call($10, "check", [26n]), "table_init64.wast:565");

// table_init64.wast:566
assert_trap(() => call($10, "check", [27n]), "table_init64.wast:566");

// table_init64.wast:567
assert_trap(() => call($10, "check", [28n]), "table_init64.wast:567");

// table_init64.wast:568
assert_trap(() => call($10, "check", [29n]), "table_init64.wast:568");

// table_init64.wast:569
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x00\x0a\x8b\x80\x80\x80\x00\x01\x85\x80\x80\x80\x00\x00\xfc\x0d\x00\x0b", "table_init64.wast:569");

// table_init64.wast:575
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x00\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x01\x41\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:575");

// table_init64.wast:581
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x01\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x87\x80\x80\x80\x00\x01\x05\x70\x01\xd2\x00\x0b\x0a\x94\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x85\x80\x80\x80\x00\x00\xfc\x0d\x04\x0b", "table_init64.wast:581");

// table_init64.wast:589
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x01\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x87\x80\x80\x80\x00\x01\x05\x70\x01\xd2\x00\x0b\x0a\x9b\x80\x80\x80\x00\x02\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x01\x41\x01\xfc\x0c\x04\x00\x0b", "table_init64.wast:589");

// table_init64.wast:598
let $$11 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xe5\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x85\x80\x80\x80\x00\x00\xfc\x0d\x02\x0b", "table_init64.wast:598");

// table_init64.wast:598
let $11 = instance($$11);

// table_init64.wast:620
run(() => call($11, "test", []), "table_init64.wast:620");

// table_init64.wast:622
let $$12 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x01\x41\x01\xfc\x0c\x02\x00\x0b", "table_init64.wast:622");

// table_init64.wast:622
let $12 = instance($$12);

// table_init64.wast:644
assert_trap(() => call($12, "test", []), "table_init64.wast:644");

// table_init64.wast:646
let $$13 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xf6\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x96\x80\x80\x80\x00\x00\x41\x0c\x41\x01\x41\x01\xfc\x0c\x01\x00\x41\x15\x41\x01\x41\x01\xfc\x0c\x01\x00\x0b", "table_init64.wast:646");

// table_init64.wast:646
let $13 = instance($$13);

// table_init64.wast:668
run(() => call($13, "test", []), "table_init64.wast:668");

// table_init64.wast:670
let $$14 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xe8\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x88\x80\x80\x80\x00\x00\xfc\x0d\x01\xfc\x0d\x01\x0b", "table_init64.wast:670");

// table_init64.wast:670
let $14 = instance($$14);

// table_init64.wast:692
run(() => call($14, "test", []), "table_init64.wast:692");

// table_init64.wast:694
let $$15 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xef\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8f\x80\x80\x80\x00\x00\xfc\x0d\x01\x41\x0c\x41\x01\x41\x01\xfc\x0c\x01\x00\x0b", "table_init64.wast:694");

// table_init64.wast:694
let $15 = instance($$15);

// table_init64.wast:716
assert_trap(() => call($15, "test", []), "table_init64.wast:716");

// table_init64.wast:718
let $$16 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x00\x41\x05\xfc\x0c\x01\x00\x0b", "table_init64.wast:718");

// table_init64.wast:718
let $16 = instance($$16);

// table_init64.wast:740
assert_trap(() => call($16, "test", []), "table_init64.wast:740");

// table_init64.wast:742
let $$17 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x02\x41\x03\xfc\x0c\x01\x00\x0b", "table_init64.wast:742");

// table_init64.wast:742
let $17 = instance($$17);

// table_init64.wast:764
assert_trap(() => call($17, "test", []), "table_init64.wast:764");

// table_init64.wast:766
let $$18 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1c\x41\x01\x41\x03\xfc\x0c\x01\x00\x0b", "table_init64.wast:766");

// table_init64.wast:766
let $18 = instance($$18);

// table_init64.wast:788
assert_trap(() => call($18, "test", []), "table_init64.wast:788");

// table_init64.wast:790
let $$19 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x04\x41\x00\xfc\x0c\x01\x00\x0b", "table_init64.wast:790");

// table_init64.wast:790
let $19 = instance($$19);

// table_init64.wast:812
run(() => call($19, "test", []), "table_init64.wast:812");

// table_init64.wast:814
let $$20 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x05\x41\x00\xfc\x0c\x01\x00\x0b", "table_init64.wast:814");

// table_init64.wast:814
let $20 = instance($$20);

// table_init64.wast:836
assert_trap(() => call($20, "test", []), "table_init64.wast:836");

// table_init64.wast:838
let $$21 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1e\x41\x02\x41\x00\xfc\x0c\x01\x00\x0b", "table_init64.wast:838");

// table_init64.wast:838
let $21 = instance($$21);

// table_init64.wast:860
run(() => call($21, "test", []), "table_init64.wast:860");

// table_init64.wast:862
let $$22 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1f\x41\x02\x41\x00\xfc\x0c\x01\x00\x0b", "table_init64.wast:862");

// table_init64.wast:862
let $22 = instance($$22);

// table_init64.wast:884
assert_trap(() => call($22, "test", []), "table_init64.wast:884");

// table_init64.wast:886
let $$23 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1e\x41\x04\x41\x00\xfc\x0c\x01\x00\x0b", "table_init64.wast:886");

// table_init64.wast:886
let $23 = instance($$23);

// table_init64.wast:908
run(() => call($23, "test", []), "table_init64.wast:908");

// table_init64.wast:910
let $$24 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb5\x80\x80\x80\x00\x04\x00\x41\x02\x0b\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x00\x41\x0c\x0b\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1f\x41\x05\x41\x00\xfc\x0c\x01\x00\x0b", "table_init64.wast:910");

// table_init64.wast:910
let $24 = instance($$24);

// table_init64.wast:932
assert_trap(() => call($24, "test", []), "table_init64.wast:932");

// table_init64.wast:934
let $$25 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1a\x41\x01\x41\x03\xfc\x0c\x01\x01\x0b", "table_init64.wast:934");

// table_init64.wast:934
let $25 = instance($$25);

// table_init64.wast:956
assert_trap(() => call($25, "test", []), "table_init64.wast:956");

// table_init64.wast:958
let $$26 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x04\x41\x00\xfc\x0c\x01\x01\x0b", "table_init64.wast:958");

// table_init64.wast:958
let $26 = instance($$26);

// table_init64.wast:980
run(() => call($26, "test", []), "table_init64.wast:980");

// table_init64.wast:982
let $$27 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x0c\x41\x05\x41\x00\xfc\x0c\x01\x01\x0b", "table_init64.wast:982");

// table_init64.wast:982
let $27 = instance($$27);

// table_init64.wast:1004
assert_trap(() => call($27, "test", []), "table_init64.wast:1004");

// table_init64.wast:1006
let $$28 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1c\x41\x02\x41\x00\xfc\x0c\x01\x01\x0b", "table_init64.wast:1006");

// table_init64.wast:1006
let $28 = instance($$28);

// table_init64.wast:1028
run(() => call($28, "test", []), "table_init64.wast:1028");

// table_init64.wast:1030
let $$29 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1d\x41\x02\x41\x00\xfc\x0c\x01\x01\x0b", "table_init64.wast:1030");

// table_init64.wast:1030
let $29 = instance($$29);

// table_init64.wast:1052
assert_trap(() => call($29, "test", []), "table_init64.wast:1052");

// table_init64.wast:1054
let $$30 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1c\x41\x04\x41\x00\xfc\x0c\x01\x01\x0b", "table_init64.wast:1054");

// table_init64.wast:1054
let $30 = instance($$30);

// table_init64.wast:1076
run(() => call($30, "test", []), "table_init64.wast:1076");

// table_init64.wast:1078
let $$31 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x60\x00\x01\x7f\x60\x00\x00\x03\x8c\x80\x80\x80\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x89\x80\x80\x80\x00\x02\x70\x01\x1e\x1e\x70\x01\x1c\x1c\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x0a\x09\xb9\x80\x80\x80\x00\x04\x02\x01\x41\x02\x0b\x00\x04\x03\x01\x04\x01\x05\x70\x04\xd2\x02\x0b\xd2\x07\x0b\xd2\x01\x0b\xd2\x08\x0b\x02\x01\x41\x0c\x0b\x00\x05\x07\x05\x02\x03\x06\x05\x70\x05\xd2\x05\x0b\xd2\x09\x0b\xd2\x02\x0b\xd2\x07\x0b\xd2\x06\x0b\x0a\xec\x80\x80\x80\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x8c\x80\x80\x80\x00\x00\x41\x1d\x41\x05\x41\x00\xfc\x0c\x01\x01\x0b", "table_init64.wast:1078");

// table_init64.wast:1078
let $31 = instance($$31);

// table_init64.wast:1100
assert_trap(() => call($31, "test", []), "table_init64.wast:1100");

// table_init64.wast:1102
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x41\x01\x41\x01\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1102");

// table_init64.wast:1111
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x99\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x41\x01\x41\x01\x42\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1111");

// table_init64.wast:1120
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x41\x01\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1120");

// table_init64.wast:1129
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x41\x01\x43\x00\x00\x80\x3f\x41\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1129");

// table_init64.wast:1138
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9f\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x92\x80\x80\x80\x00\x00\x41\x01\x43\x00\x00\x80\x3f\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1138");

// table_init64.wast:1147
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x41\x01\x43\x00\x00\x80\x3f\x42\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1147");

// table_init64.wast:1156
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x41\x01\x43\x00\x00\x80\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1156");

// table_init64.wast:1165
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x99\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x41\x01\x42\x01\x41\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1165");

// table_init64.wast:1174
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x41\x01\x42\x01\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1174");

// table_init64.wast:1183
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x99\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x41\x01\x42\x01\x42\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1183");

// table_init64.wast:1192
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x41\x01\x42\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1192");

// table_init64.wast:1201
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1201");

// table_init64.wast:1210
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1210");

// table_init64.wast:1219
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x42\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1219");

// table_init64.wast:1228
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa7\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9a\x80\x80\x80\x00\x00\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1228");

// table_init64.wast:1237
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x41\x01\x41\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1237");

// table_init64.wast:1246
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9f\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x92\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x41\x01\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1246");

// table_init64.wast:1255
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x41\x01\x42\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1255");

// table_init64.wast:1264
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1264");

// table_init64.wast:1273
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9f\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x92\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x43\x00\x00\x80\x3f\x41\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1273");

// table_init64.wast:1282
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa2\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x95\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x43\x00\x00\x80\x3f\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1282");

// table_init64.wast:1291
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9f\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x92\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x43\x00\x00\x80\x3f\x42\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1291");

// table_init64.wast:1300
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa6\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x99\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x43\x00\x00\x80\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1300");

// table_init64.wast:1309
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x42\x01\x41\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1309");

// table_init64.wast:1318
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9f\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x92\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x42\x01\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1318");

// table_init64.wast:1327
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x42\x01\x42\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1327");

// table_init64.wast:1336
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x42\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1336");

// table_init64.wast:1345
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1345");

// table_init64.wast:1354
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa6\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x99\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1354");

// table_init64.wast:1363
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x42\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1363");

// table_init64.wast:1372
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xaa\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9d\x80\x80\x80\x00\x00\x43\x00\x00\x80\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1372");

// table_init64.wast:1381
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x99\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x42\x01\x41\x01\x41\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1381");

// table_init64.wast:1390
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x42\x01\x41\x01\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1390");

// table_init64.wast:1399
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x99\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x42\x01\x41\x01\x42\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1399");

// table_init64.wast:1408
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x42\x01\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1408");

// table_init64.wast:1417
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x42\x01\x43\x00\x00\x80\x3f\x41\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1417");

// table_init64.wast:1426
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9f\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x92\x80\x80\x80\x00\x00\x42\x01\x43\x00\x00\x80\x3f\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1426");

// table_init64.wast:1435
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x42\x01\x43\x00\x00\x80\x3f\x42\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1435");

// table_init64.wast:1444
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x42\x01\x43\x00\x00\x80\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1444");

// table_init64.wast:1453
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x99\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x42\x01\x42\x01\x41\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1453");

// table_init64.wast:1462
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x9c\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8f\x80\x80\x80\x00\x00\x42\x01\x42\x01\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1462");

// table_init64.wast:1471
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\x99\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x42\x01\x42\x01\x42\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1471");

// table_init64.wast:1480
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x42\x01\x42\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1480");

// table_init64.wast:1489
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x42\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1489");

// table_init64.wast:1498
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x42\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1498");

// table_init64.wast:1507
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x42\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x42\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1507");

// table_init64.wast:1516
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa7\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9a\x80\x80\x80\x00\x00\x42\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1516");

// table_init64.wast:1525
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\x41\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1525");

// table_init64.wast:1534
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1534");

// table_init64.wast:1543
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\x42\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1543");

// table_init64.wast:1552
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa7\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9a\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1552");

// table_init64.wast:1561
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x43\x00\x00\x80\x3f\x41\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1561");

// table_init64.wast:1570
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa6\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x99\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x43\x00\x00\x80\x3f\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1570");

// table_init64.wast:1579
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x43\x00\x00\x80\x3f\x42\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1579");

// table_init64.wast:1588
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xaa\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9d\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x43\x00\x00\x80\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1588");

// table_init64.wast:1597
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x42\x01\x41\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1597");

// table_init64.wast:1606
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa3\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x96\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x42\x01\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1606");

// table_init64.wast:1615
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa0\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x93\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x42\x01\x42\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1615");

// table_init64.wast:1624
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa7\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9a\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x42\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1624");

// table_init64.wast:1633
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa7\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9a\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1633");

// table_init64.wast:1642
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xaa\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9d\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x43\x00\x00\x80\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1642");

// table_init64.wast:1651
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xa7\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x9a\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x42\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1651");

// table_init64.wast:1660
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x00\x01\x09\x8d\x80\x80\x80\x00\x01\x05\x70\x03\xd2\x00\x0b\xd2\x00\x0b\xd2\x00\x0b\x0a\xae\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\xa1\x80\x80\x80\x00\x00\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xfc\x0c\x00\x00\x0b", "table_init64.wast:1660");

// table_init64.wast:1669
let $$32 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x60\x02\x7f\x7f\x00\x03\x93\x80\x80\x80\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x04\x85\x80\x80\x80\x00\x01\x70\x01\x20\x40\x07\xe4\x80\x80\x80\x00\x12\x02\x66\x30\x00\x00\x02\x66\x31\x00\x01\x02\x66\x32\x00\x02\x02\x66\x33\x00\x03\x02\x66\x34\x00\x04\x02\x66\x35\x00\x05\x02\x66\x36\x00\x06\x02\x66\x37\x00\x07\x02\x66\x38\x00\x08\x02\x66\x39\x00\x09\x03\x66\x31\x30\x00\x0a\x03\x66\x31\x31\x00\x0b\x03\x66\x31\x32\x00\x0c\x03\x66\x31\x33\x00\x0d\x03\x66\x31\x34\x00\x0e\x03\x66\x31\x35\x00\x0f\x04\x74\x65\x73\x74\x00\x10\x03\x72\x75\x6e\x00\x11\x09\xb4\x80\x80\x80\x00\x01\x05\x70\x10\xd2\x00\x0b\xd2\x01\x0b\xd2\x02\x0b\xd2\x03\x0b\xd2\x04\x0b\xd2\x05\x0b\xd2\x06\x0b\xd2\x07\x0b\xd2\x08\x0b\xd2\x09\x0b\xd2\x0a\x0b\xd2\x0b\x0b\xd2\x0c\x0b\xd2\x0d\x0b\xd2\x0e\x0b\xd2\x0f\x0b\x0a\xae\x81\x80\x80\x00\x12\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x84\x80\x80\x80\x00\x00\x41\x0a\x0b\x84\x80\x80\x80\x00\x00\x41\x0b\x0b\x84\x80\x80\x80\x00\x00\x41\x0c\x0b\x84\x80\x80\x80\x00\x00\x41\x0d\x0b\x84\x80\x80\x80\x00\x00\x41\x0e\x0b\x84\x80\x80\x80\x00\x00\x41\x0f\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x41\x00\x20\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1669");

// table_init64.wast:1669
let $32 = instance($$32);

// table_init64.wast:1697
assert_trap(() => call($32, "run", [24, 16]), "table_init64.wast:1697");

// table_init64.wast:1698
assert_trap(() => call($32, "test", [0]), "table_init64.wast:1698");

// table_init64.wast:1699
assert_trap(() => call($32, "test", [1]), "table_init64.wast:1699");

// table_init64.wast:1700
assert_trap(() => call($32, "test", [2]), "table_init64.wast:1700");

// table_init64.wast:1701
assert_trap(() => call($32, "test", [3]), "table_init64.wast:1701");

// table_init64.wast:1702
assert_trap(() => call($32, "test", [4]), "table_init64.wast:1702");

// table_init64.wast:1703
assert_trap(() => call($32, "test", [5]), "table_init64.wast:1703");

// table_init64.wast:1704
assert_trap(() => call($32, "test", [6]), "table_init64.wast:1704");

// table_init64.wast:1705
assert_trap(() => call($32, "test", [7]), "table_init64.wast:1705");

// table_init64.wast:1706
assert_trap(() => call($32, "test", [8]), "table_init64.wast:1706");

// table_init64.wast:1707
assert_trap(() => call($32, "test", [9]), "table_init64.wast:1707");

// table_init64.wast:1708
assert_trap(() => call($32, "test", [10]), "table_init64.wast:1708");

// table_init64.wast:1709
assert_trap(() => call($32, "test", [11]), "table_init64.wast:1709");

// table_init64.wast:1710
assert_trap(() => call($32, "test", [12]), "table_init64.wast:1710");

// table_init64.wast:1711
assert_trap(() => call($32, "test", [13]), "table_init64.wast:1711");

// table_init64.wast:1712
assert_trap(() => call($32, "test", [14]), "table_init64.wast:1712");

// table_init64.wast:1713
assert_trap(() => call($32, "test", [15]), "table_init64.wast:1713");

// table_init64.wast:1714
assert_trap(() => call($32, "test", [16]), "table_init64.wast:1714");

// table_init64.wast:1715
assert_trap(() => call($32, "test", [17]), "table_init64.wast:1715");

// table_init64.wast:1716
assert_trap(() => call($32, "test", [18]), "table_init64.wast:1716");

// table_init64.wast:1717
assert_trap(() => call($32, "test", [19]), "table_init64.wast:1717");

// table_init64.wast:1718
assert_trap(() => call($32, "test", [20]), "table_init64.wast:1718");

// table_init64.wast:1719
assert_trap(() => call($32, "test", [21]), "table_init64.wast:1719");

// table_init64.wast:1720
assert_trap(() => call($32, "test", [22]), "table_init64.wast:1720");

// table_init64.wast:1721
assert_trap(() => call($32, "test", [23]), "table_init64.wast:1721");

// table_init64.wast:1722
assert_trap(() => call($32, "test", [24]), "table_init64.wast:1722");

// table_init64.wast:1723
assert_trap(() => call($32, "test", [25]), "table_init64.wast:1723");

// table_init64.wast:1724
assert_trap(() => call($32, "test", [26]), "table_init64.wast:1724");

// table_init64.wast:1725
assert_trap(() => call($32, "test", [27]), "table_init64.wast:1725");

// table_init64.wast:1726
assert_trap(() => call($32, "test", [28]), "table_init64.wast:1726");

// table_init64.wast:1727
assert_trap(() => call($32, "test", [29]), "table_init64.wast:1727");

// table_init64.wast:1728
assert_trap(() => call($32, "test", [30]), "table_init64.wast:1728");

// table_init64.wast:1729
assert_trap(() => call($32, "test", [31]), "table_init64.wast:1729");

// table_init64.wast:1731
let $$33 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x60\x02\x7f\x7f\x00\x03\x93\x80\x80\x80\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x04\x85\x80\x80\x80\x00\x01\x70\x01\x20\x40\x07\xe4\x80\x80\x80\x00\x12\x02\x66\x30\x00\x00\x02\x66\x31\x00\x01\x02\x66\x32\x00\x02\x02\x66\x33\x00\x03\x02\x66\x34\x00\x04\x02\x66\x35\x00\x05\x02\x66\x36\x00\x06\x02\x66\x37\x00\x07\x02\x66\x38\x00\x08\x02\x66\x39\x00\x09\x03\x66\x31\x30\x00\x0a\x03\x66\x31\x31\x00\x0b\x03\x66\x31\x32\x00\x0c\x03\x66\x31\x33\x00\x0d\x03\x66\x31\x34\x00\x0e\x03\x66\x31\x35\x00\x0f\x04\x74\x65\x73\x74\x00\x10\x03\x72\x75\x6e\x00\x11\x09\xb4\x80\x80\x80\x00\x01\x05\x70\x10\xd2\x00\x0b\xd2\x01\x0b\xd2\x02\x0b\xd2\x03\x0b\xd2\x04\x0b\xd2\x05\x0b\xd2\x06\x0b\xd2\x07\x0b\xd2\x08\x0b\xd2\x09\x0b\xd2\x0a\x0b\xd2\x0b\x0b\xd2\x0c\x0b\xd2\x0d\x0b\xd2\x0e\x0b\xd2\x0f\x0b\x0a\xae\x81\x80\x80\x00\x12\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x84\x80\x80\x80\x00\x00\x41\x0a\x0b\x84\x80\x80\x80\x00\x00\x41\x0b\x0b\x84\x80\x80\x80\x00\x00\x41\x0c\x0b\x84\x80\x80\x80\x00\x00\x41\x0d\x0b\x84\x80\x80\x80\x00\x00\x41\x0e\x0b\x84\x80\x80\x80\x00\x00\x41\x0f\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x41\x00\x20\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1731");

// table_init64.wast:1731
let $33 = instance($$33);

// table_init64.wast:1759
assert_trap(() => call($33, "run", [25, 16]), "table_init64.wast:1759");

// table_init64.wast:1760
assert_trap(() => call($33, "test", [0]), "table_init64.wast:1760");

// table_init64.wast:1761
assert_trap(() => call($33, "test", [1]), "table_init64.wast:1761");

// table_init64.wast:1762
assert_trap(() => call($33, "test", [2]), "table_init64.wast:1762");

// table_init64.wast:1763
assert_trap(() => call($33, "test", [3]), "table_init64.wast:1763");

// table_init64.wast:1764
assert_trap(() => call($33, "test", [4]), "table_init64.wast:1764");

// table_init64.wast:1765
assert_trap(() => call($33, "test", [5]), "table_init64.wast:1765");

// table_init64.wast:1766
assert_trap(() => call($33, "test", [6]), "table_init64.wast:1766");

// table_init64.wast:1767
assert_trap(() => call($33, "test", [7]), "table_init64.wast:1767");

// table_init64.wast:1768
assert_trap(() => call($33, "test", [8]), "table_init64.wast:1768");

// table_init64.wast:1769
assert_trap(() => call($33, "test", [9]), "table_init64.wast:1769");

// table_init64.wast:1770
assert_trap(() => call($33, "test", [10]), "table_init64.wast:1770");

// table_init64.wast:1771
assert_trap(() => call($33, "test", [11]), "table_init64.wast:1771");

// table_init64.wast:1772
assert_trap(() => call($33, "test", [12]), "table_init64.wast:1772");

// table_init64.wast:1773
assert_trap(() => call($33, "test", [13]), "table_init64.wast:1773");

// table_init64.wast:1774
assert_trap(() => call($33, "test", [14]), "table_init64.wast:1774");

// table_init64.wast:1775
assert_trap(() => call($33, "test", [15]), "table_init64.wast:1775");

// table_init64.wast:1776
assert_trap(() => call($33, "test", [16]), "table_init64.wast:1776");

// table_init64.wast:1777
assert_trap(() => call($33, "test", [17]), "table_init64.wast:1777");

// table_init64.wast:1778
assert_trap(() => call($33, "test", [18]), "table_init64.wast:1778");

// table_init64.wast:1779
assert_trap(() => call($33, "test", [19]), "table_init64.wast:1779");

// table_init64.wast:1780
assert_trap(() => call($33, "test", [20]), "table_init64.wast:1780");

// table_init64.wast:1781
assert_trap(() => call($33, "test", [21]), "table_init64.wast:1781");

// table_init64.wast:1782
assert_trap(() => call($33, "test", [22]), "table_init64.wast:1782");

// table_init64.wast:1783
assert_trap(() => call($33, "test", [23]), "table_init64.wast:1783");

// table_init64.wast:1784
assert_trap(() => call($33, "test", [24]), "table_init64.wast:1784");

// table_init64.wast:1785
assert_trap(() => call($33, "test", [25]), "table_init64.wast:1785");

// table_init64.wast:1786
assert_trap(() => call($33, "test", [26]), "table_init64.wast:1786");

// table_init64.wast:1787
assert_trap(() => call($33, "test", [27]), "table_init64.wast:1787");

// table_init64.wast:1788
assert_trap(() => call($33, "test", [28]), "table_init64.wast:1788");

// table_init64.wast:1789
assert_trap(() => call($33, "test", [29]), "table_init64.wast:1789");

// table_init64.wast:1790
assert_trap(() => call($33, "test", [30]), "table_init64.wast:1790");

// table_init64.wast:1791
assert_trap(() => call($33, "test", [31]), "table_init64.wast:1791");

// table_init64.wast:1793
let $$34 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x60\x02\x7f\x7f\x00\x03\x93\x80\x80\x80\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x04\x87\x80\x80\x80\x00\x01\x70\x01\xa0\x01\xc0\x02\x07\xe4\x80\x80\x80\x00\x12\x02\x66\x30\x00\x00\x02\x66\x31\x00\x01\x02\x66\x32\x00\x02\x02\x66\x33\x00\x03\x02\x66\x34\x00\x04\x02\x66\x35\x00\x05\x02\x66\x36\x00\x06\x02\x66\x37\x00\x07\x02\x66\x38\x00\x08\x02\x66\x39\x00\x09\x03\x66\x31\x30\x00\x0a\x03\x66\x31\x31\x00\x0b\x03\x66\x31\x32\x00\x0c\x03\x66\x31\x33\x00\x0d\x03\x66\x31\x34\x00\x0e\x03\x66\x31\x35\x00\x0f\x04\x74\x65\x73\x74\x00\x10\x03\x72\x75\x6e\x00\x11\x09\xb4\x80\x80\x80\x00\x01\x05\x70\x10\xd2\x00\x0b\xd2\x01\x0b\xd2\x02\x0b\xd2\x03\x0b\xd2\x04\x0b\xd2\x05\x0b\xd2\x06\x0b\xd2\x07\x0b\xd2\x08\x0b\xd2\x09\x0b\xd2\x0a\x0b\xd2\x0b\x0b\xd2\x0c\x0b\xd2\x0d\x0b\xd2\x0e\x0b\xd2\x0f\x0b\x0a\xae\x81\x80\x80\x00\x12\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x84\x80\x80\x80\x00\x00\x41\x0a\x0b\x84\x80\x80\x80\x00\x00\x41\x0b\x0b\x84\x80\x80\x80\x00\x00\x41\x0c\x0b\x84\x80\x80\x80\x00\x00\x41\x0d\x0b\x84\x80\x80\x80\x00\x00\x41\x0e\x0b\x84\x80\x80\x80\x00\x00\x41\x0f\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x41\x00\x20\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1793");

// table_init64.wast:1793
let $34 = instance($$34);

// table_init64.wast:1821
assert_trap(() => call($34, "run", [96, 32]), "table_init64.wast:1821");

// table_init64.wast:1822
assert_trap(() => call($34, "test", [0]), "table_init64.wast:1822");

// table_init64.wast:1823
assert_trap(() => call($34, "test", [1]), "table_init64.wast:1823");

// table_init64.wast:1824
assert_trap(() => call($34, "test", [2]), "table_init64.wast:1824");

// table_init64.wast:1825
assert_trap(() => call($34, "test", [3]), "table_init64.wast:1825");

// table_init64.wast:1826
assert_trap(() => call($34, "test", [4]), "table_init64.wast:1826");

// table_init64.wast:1827
assert_trap(() => call($34, "test", [5]), "table_init64.wast:1827");

// table_init64.wast:1828
assert_trap(() => call($34, "test", [6]), "table_init64.wast:1828");

// table_init64.wast:1829
assert_trap(() => call($34, "test", [7]), "table_init64.wast:1829");

// table_init64.wast:1830
assert_trap(() => call($34, "test", [8]), "table_init64.wast:1830");

// table_init64.wast:1831
assert_trap(() => call($34, "test", [9]), "table_init64.wast:1831");

// table_init64.wast:1832
assert_trap(() => call($34, "test", [10]), "table_init64.wast:1832");

// table_init64.wast:1833
assert_trap(() => call($34, "test", [11]), "table_init64.wast:1833");

// table_init64.wast:1834
assert_trap(() => call($34, "test", [12]), "table_init64.wast:1834");

// table_init64.wast:1835
assert_trap(() => call($34, "test", [13]), "table_init64.wast:1835");

// table_init64.wast:1836
assert_trap(() => call($34, "test", [14]), "table_init64.wast:1836");

// table_init64.wast:1837
assert_trap(() => call($34, "test", [15]), "table_init64.wast:1837");

// table_init64.wast:1838
assert_trap(() => call($34, "test", [16]), "table_init64.wast:1838");

// table_init64.wast:1839
assert_trap(() => call($34, "test", [17]), "table_init64.wast:1839");

// table_init64.wast:1840
assert_trap(() => call($34, "test", [18]), "table_init64.wast:1840");

// table_init64.wast:1841
assert_trap(() => call($34, "test", [19]), "table_init64.wast:1841");

// table_init64.wast:1842
assert_trap(() => call($34, "test", [20]), "table_init64.wast:1842");

// table_init64.wast:1843
assert_trap(() => call($34, "test", [21]), "table_init64.wast:1843");

// table_init64.wast:1844
assert_trap(() => call($34, "test", [22]), "table_init64.wast:1844");

// table_init64.wast:1845
assert_trap(() => call($34, "test", [23]), "table_init64.wast:1845");

// table_init64.wast:1846
assert_trap(() => call($34, "test", [24]), "table_init64.wast:1846");

// table_init64.wast:1847
assert_trap(() => call($34, "test", [25]), "table_init64.wast:1847");

// table_init64.wast:1848
assert_trap(() => call($34, "test", [26]), "table_init64.wast:1848");

// table_init64.wast:1849
assert_trap(() => call($34, "test", [27]), "table_init64.wast:1849");

// table_init64.wast:1850
assert_trap(() => call($34, "test", [28]), "table_init64.wast:1850");

// table_init64.wast:1851
assert_trap(() => call($34, "test", [29]), "table_init64.wast:1851");

// table_init64.wast:1852
assert_trap(() => call($34, "test", [30]), "table_init64.wast:1852");

// table_init64.wast:1853
assert_trap(() => call($34, "test", [31]), "table_init64.wast:1853");

// table_init64.wast:1854
assert_trap(() => call($34, "test", [32]), "table_init64.wast:1854");

// table_init64.wast:1855
assert_trap(() => call($34, "test", [33]), "table_init64.wast:1855");

// table_init64.wast:1856
assert_trap(() => call($34, "test", [34]), "table_init64.wast:1856");

// table_init64.wast:1857
assert_trap(() => call($34, "test", [35]), "table_init64.wast:1857");

// table_init64.wast:1858
assert_trap(() => call($34, "test", [36]), "table_init64.wast:1858");

// table_init64.wast:1859
assert_trap(() => call($34, "test", [37]), "table_init64.wast:1859");

// table_init64.wast:1860
assert_trap(() => call($34, "test", [38]), "table_init64.wast:1860");

// table_init64.wast:1861
assert_trap(() => call($34, "test", [39]), "table_init64.wast:1861");

// table_init64.wast:1862
assert_trap(() => call($34, "test", [40]), "table_init64.wast:1862");

// table_init64.wast:1863
assert_trap(() => call($34, "test", [41]), "table_init64.wast:1863");

// table_init64.wast:1864
assert_trap(() => call($34, "test", [42]), "table_init64.wast:1864");

// table_init64.wast:1865
assert_trap(() => call($34, "test", [43]), "table_init64.wast:1865");

// table_init64.wast:1866
assert_trap(() => call($34, "test", [44]), "table_init64.wast:1866");

// table_init64.wast:1867
assert_trap(() => call($34, "test", [45]), "table_init64.wast:1867");

// table_init64.wast:1868
assert_trap(() => call($34, "test", [46]), "table_init64.wast:1868");

// table_init64.wast:1869
assert_trap(() => call($34, "test", [47]), "table_init64.wast:1869");

// table_init64.wast:1870
assert_trap(() => call($34, "test", [48]), "table_init64.wast:1870");

// table_init64.wast:1871
assert_trap(() => call($34, "test", [49]), "table_init64.wast:1871");

// table_init64.wast:1872
assert_trap(() => call($34, "test", [50]), "table_init64.wast:1872");

// table_init64.wast:1873
assert_trap(() => call($34, "test", [51]), "table_init64.wast:1873");

// table_init64.wast:1874
assert_trap(() => call($34, "test", [52]), "table_init64.wast:1874");

// table_init64.wast:1875
assert_trap(() => call($34, "test", [53]), "table_init64.wast:1875");

// table_init64.wast:1876
assert_trap(() => call($34, "test", [54]), "table_init64.wast:1876");

// table_init64.wast:1877
assert_trap(() => call($34, "test", [55]), "table_init64.wast:1877");

// table_init64.wast:1878
assert_trap(() => call($34, "test", [56]), "table_init64.wast:1878");

// table_init64.wast:1879
assert_trap(() => call($34, "test", [57]), "table_init64.wast:1879");

// table_init64.wast:1880
assert_trap(() => call($34, "test", [58]), "table_init64.wast:1880");

// table_init64.wast:1881
assert_trap(() => call($34, "test", [59]), "table_init64.wast:1881");

// table_init64.wast:1882
assert_trap(() => call($34, "test", [60]), "table_init64.wast:1882");

// table_init64.wast:1883
assert_trap(() => call($34, "test", [61]), "table_init64.wast:1883");

// table_init64.wast:1884
assert_trap(() => call($34, "test", [62]), "table_init64.wast:1884");

// table_init64.wast:1885
assert_trap(() => call($34, "test", [63]), "table_init64.wast:1885");

// table_init64.wast:1886
assert_trap(() => call($34, "test", [64]), "table_init64.wast:1886");

// table_init64.wast:1887
assert_trap(() => call($34, "test", [65]), "table_init64.wast:1887");

// table_init64.wast:1888
assert_trap(() => call($34, "test", [66]), "table_init64.wast:1888");

// table_init64.wast:1889
assert_trap(() => call($34, "test", [67]), "table_init64.wast:1889");

// table_init64.wast:1890
assert_trap(() => call($34, "test", [68]), "table_init64.wast:1890");

// table_init64.wast:1891
assert_trap(() => call($34, "test", [69]), "table_init64.wast:1891");

// table_init64.wast:1892
assert_trap(() => call($34, "test", [70]), "table_init64.wast:1892");

// table_init64.wast:1893
assert_trap(() => call($34, "test", [71]), "table_init64.wast:1893");

// table_init64.wast:1894
assert_trap(() => call($34, "test", [72]), "table_init64.wast:1894");

// table_init64.wast:1895
assert_trap(() => call($34, "test", [73]), "table_init64.wast:1895");

// table_init64.wast:1896
assert_trap(() => call($34, "test", [74]), "table_init64.wast:1896");

// table_init64.wast:1897
assert_trap(() => call($34, "test", [75]), "table_init64.wast:1897");

// table_init64.wast:1898
assert_trap(() => call($34, "test", [76]), "table_init64.wast:1898");

// table_init64.wast:1899
assert_trap(() => call($34, "test", [77]), "table_init64.wast:1899");

// table_init64.wast:1900
assert_trap(() => call($34, "test", [78]), "table_init64.wast:1900");

// table_init64.wast:1901
assert_trap(() => call($34, "test", [79]), "table_init64.wast:1901");

// table_init64.wast:1902
assert_trap(() => call($34, "test", [80]), "table_init64.wast:1902");

// table_init64.wast:1903
assert_trap(() => call($34, "test", [81]), "table_init64.wast:1903");

// table_init64.wast:1904
assert_trap(() => call($34, "test", [82]), "table_init64.wast:1904");

// table_init64.wast:1905
assert_trap(() => call($34, "test", [83]), "table_init64.wast:1905");

// table_init64.wast:1906
assert_trap(() => call($34, "test", [84]), "table_init64.wast:1906");

// table_init64.wast:1907
assert_trap(() => call($34, "test", [85]), "table_init64.wast:1907");

// table_init64.wast:1908
assert_trap(() => call($34, "test", [86]), "table_init64.wast:1908");

// table_init64.wast:1909
assert_trap(() => call($34, "test", [87]), "table_init64.wast:1909");

// table_init64.wast:1910
assert_trap(() => call($34, "test", [88]), "table_init64.wast:1910");

// table_init64.wast:1911
assert_trap(() => call($34, "test", [89]), "table_init64.wast:1911");

// table_init64.wast:1912
assert_trap(() => call($34, "test", [90]), "table_init64.wast:1912");

// table_init64.wast:1913
assert_trap(() => call($34, "test", [91]), "table_init64.wast:1913");

// table_init64.wast:1914
assert_trap(() => call($34, "test", [92]), "table_init64.wast:1914");

// table_init64.wast:1915
assert_trap(() => call($34, "test", [93]), "table_init64.wast:1915");

// table_init64.wast:1916
assert_trap(() => call($34, "test", [94]), "table_init64.wast:1916");

// table_init64.wast:1917
assert_trap(() => call($34, "test", [95]), "table_init64.wast:1917");

// table_init64.wast:1918
assert_trap(() => call($34, "test", [96]), "table_init64.wast:1918");

// table_init64.wast:1919
assert_trap(() => call($34, "test", [97]), "table_init64.wast:1919");

// table_init64.wast:1920
assert_trap(() => call($34, "test", [98]), "table_init64.wast:1920");

// table_init64.wast:1921
assert_trap(() => call($34, "test", [99]), "table_init64.wast:1921");

// table_init64.wast:1922
assert_trap(() => call($34, "test", [100]), "table_init64.wast:1922");

// table_init64.wast:1923
assert_trap(() => call($34, "test", [101]), "table_init64.wast:1923");

// table_init64.wast:1924
assert_trap(() => call($34, "test", [102]), "table_init64.wast:1924");

// table_init64.wast:1925
assert_trap(() => call($34, "test", [103]), "table_init64.wast:1925");

// table_init64.wast:1926
assert_trap(() => call($34, "test", [104]), "table_init64.wast:1926");

// table_init64.wast:1927
assert_trap(() => call($34, "test", [105]), "table_init64.wast:1927");

// table_init64.wast:1928
assert_trap(() => call($34, "test", [106]), "table_init64.wast:1928");

// table_init64.wast:1929
assert_trap(() => call($34, "test", [107]), "table_init64.wast:1929");

// table_init64.wast:1930
assert_trap(() => call($34, "test", [108]), "table_init64.wast:1930");

// table_init64.wast:1931
assert_trap(() => call($34, "test", [109]), "table_init64.wast:1931");

// table_init64.wast:1932
assert_trap(() => call($34, "test", [110]), "table_init64.wast:1932");

// table_init64.wast:1933
assert_trap(() => call($34, "test", [111]), "table_init64.wast:1933");

// table_init64.wast:1934
assert_trap(() => call($34, "test", [112]), "table_init64.wast:1934");

// table_init64.wast:1935
assert_trap(() => call($34, "test", [113]), "table_init64.wast:1935");

// table_init64.wast:1936
assert_trap(() => call($34, "test", [114]), "table_init64.wast:1936");

// table_init64.wast:1937
assert_trap(() => call($34, "test", [115]), "table_init64.wast:1937");

// table_init64.wast:1938
assert_trap(() => call($34, "test", [116]), "table_init64.wast:1938");

// table_init64.wast:1939
assert_trap(() => call($34, "test", [117]), "table_init64.wast:1939");

// table_init64.wast:1940
assert_trap(() => call($34, "test", [118]), "table_init64.wast:1940");

// table_init64.wast:1941
assert_trap(() => call($34, "test", [119]), "table_init64.wast:1941");

// table_init64.wast:1942
assert_trap(() => call($34, "test", [120]), "table_init64.wast:1942");

// table_init64.wast:1943
assert_trap(() => call($34, "test", [121]), "table_init64.wast:1943");

// table_init64.wast:1944
assert_trap(() => call($34, "test", [122]), "table_init64.wast:1944");

// table_init64.wast:1945
assert_trap(() => call($34, "test", [123]), "table_init64.wast:1945");

// table_init64.wast:1946
assert_trap(() => call($34, "test", [124]), "table_init64.wast:1946");

// table_init64.wast:1947
assert_trap(() => call($34, "test", [125]), "table_init64.wast:1947");

// table_init64.wast:1948
assert_trap(() => call($34, "test", [126]), "table_init64.wast:1948");

// table_init64.wast:1949
assert_trap(() => call($34, "test", [127]), "table_init64.wast:1949");

// table_init64.wast:1950
assert_trap(() => call($34, "test", [128]), "table_init64.wast:1950");

// table_init64.wast:1951
assert_trap(() => call($34, "test", [129]), "table_init64.wast:1951");

// table_init64.wast:1952
assert_trap(() => call($34, "test", [130]), "table_init64.wast:1952");

// table_init64.wast:1953
assert_trap(() => call($34, "test", [131]), "table_init64.wast:1953");

// table_init64.wast:1954
assert_trap(() => call($34, "test", [132]), "table_init64.wast:1954");

// table_init64.wast:1955
assert_trap(() => call($34, "test", [133]), "table_init64.wast:1955");

// table_init64.wast:1956
assert_trap(() => call($34, "test", [134]), "table_init64.wast:1956");

// table_init64.wast:1957
assert_trap(() => call($34, "test", [135]), "table_init64.wast:1957");

// table_init64.wast:1958
assert_trap(() => call($34, "test", [136]), "table_init64.wast:1958");

// table_init64.wast:1959
assert_trap(() => call($34, "test", [137]), "table_init64.wast:1959");

// table_init64.wast:1960
assert_trap(() => call($34, "test", [138]), "table_init64.wast:1960");

// table_init64.wast:1961
assert_trap(() => call($34, "test", [139]), "table_init64.wast:1961");

// table_init64.wast:1962
assert_trap(() => call($34, "test", [140]), "table_init64.wast:1962");

// table_init64.wast:1963
assert_trap(() => call($34, "test", [141]), "table_init64.wast:1963");

// table_init64.wast:1964
assert_trap(() => call($34, "test", [142]), "table_init64.wast:1964");

// table_init64.wast:1965
assert_trap(() => call($34, "test", [143]), "table_init64.wast:1965");

// table_init64.wast:1966
assert_trap(() => call($34, "test", [144]), "table_init64.wast:1966");

// table_init64.wast:1967
assert_trap(() => call($34, "test", [145]), "table_init64.wast:1967");

// table_init64.wast:1968
assert_trap(() => call($34, "test", [146]), "table_init64.wast:1968");

// table_init64.wast:1969
assert_trap(() => call($34, "test", [147]), "table_init64.wast:1969");

// table_init64.wast:1970
assert_trap(() => call($34, "test", [148]), "table_init64.wast:1970");

// table_init64.wast:1971
assert_trap(() => call($34, "test", [149]), "table_init64.wast:1971");

// table_init64.wast:1972
assert_trap(() => call($34, "test", [150]), "table_init64.wast:1972");

// table_init64.wast:1973
assert_trap(() => call($34, "test", [151]), "table_init64.wast:1973");

// table_init64.wast:1974
assert_trap(() => call($34, "test", [152]), "table_init64.wast:1974");

// table_init64.wast:1975
assert_trap(() => call($34, "test", [153]), "table_init64.wast:1975");

// table_init64.wast:1976
assert_trap(() => call($34, "test", [154]), "table_init64.wast:1976");

// table_init64.wast:1977
assert_trap(() => call($34, "test", [155]), "table_init64.wast:1977");

// table_init64.wast:1978
assert_trap(() => call($34, "test", [156]), "table_init64.wast:1978");

// table_init64.wast:1979
assert_trap(() => call($34, "test", [157]), "table_init64.wast:1979");

// table_init64.wast:1980
assert_trap(() => call($34, "test", [158]), "table_init64.wast:1980");

// table_init64.wast:1981
assert_trap(() => call($34, "test", [159]), "table_init64.wast:1981");

// table_init64.wast:1983
let $$35 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x60\x02\x7f\x7f\x00\x03\x93\x80\x80\x80\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x04\x87\x80\x80\x80\x00\x01\x70\x01\xa0\x01\xc0\x02\x07\xe4\x80\x80\x80\x00\x12\x02\x66\x30\x00\x00\x02\x66\x31\x00\x01\x02\x66\x32\x00\x02\x02\x66\x33\x00\x03\x02\x66\x34\x00\x04\x02\x66\x35\x00\x05\x02\x66\x36\x00\x06\x02\x66\x37\x00\x07\x02\x66\x38\x00\x08\x02\x66\x39\x00\x09\x03\x66\x31\x30\x00\x0a\x03\x66\x31\x31\x00\x0b\x03\x66\x31\x32\x00\x0c\x03\x66\x31\x33\x00\x0d\x03\x66\x31\x34\x00\x0e\x03\x66\x31\x35\x00\x0f\x04\x74\x65\x73\x74\x00\x10\x03\x72\x75\x6e\x00\x11\x09\xb4\x80\x80\x80\x00\x01\x05\x70\x10\xd2\x00\x0b\xd2\x01\x0b\xd2\x02\x0b\xd2\x03\x0b\xd2\x04\x0b\xd2\x05\x0b\xd2\x06\x0b\xd2\x07\x0b\xd2\x08\x0b\xd2\x09\x0b\xd2\x0a\x0b\xd2\x0b\x0b\xd2\x0c\x0b\xd2\x0d\x0b\xd2\x0e\x0b\xd2\x0f\x0b\x0a\xae\x81\x80\x80\x00\x12\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x84\x80\x80\x80\x00\x00\x41\x0a\x0b\x84\x80\x80\x80\x00\x00\x41\x0b\x0b\x84\x80\x80\x80\x00\x00\x41\x0c\x0b\x84\x80\x80\x80\x00\x00\x41\x0d\x0b\x84\x80\x80\x80\x00\x00\x41\x0e\x0b\x84\x80\x80\x80\x00\x00\x41\x0f\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x41\x00\x20\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:1983");

// table_init64.wast:1983
let $35 = instance($$35);

// table_init64.wast:2011
assert_trap(() => call($35, "run", [97, 31]), "table_init64.wast:2011");

// table_init64.wast:2012
assert_trap(() => call($35, "test", [0]), "table_init64.wast:2012");

// table_init64.wast:2013
assert_trap(() => call($35, "test", [1]), "table_init64.wast:2013");

// table_init64.wast:2014
assert_trap(() => call($35, "test", [2]), "table_init64.wast:2014");

// table_init64.wast:2015
assert_trap(() => call($35, "test", [3]), "table_init64.wast:2015");

// table_init64.wast:2016
assert_trap(() => call($35, "test", [4]), "table_init64.wast:2016");

// table_init64.wast:2017
assert_trap(() => call($35, "test", [5]), "table_init64.wast:2017");

// table_init64.wast:2018
assert_trap(() => call($35, "test", [6]), "table_init64.wast:2018");

// table_init64.wast:2019
assert_trap(() => call($35, "test", [7]), "table_init64.wast:2019");

// table_init64.wast:2020
assert_trap(() => call($35, "test", [8]), "table_init64.wast:2020");

// table_init64.wast:2021
assert_trap(() => call($35, "test", [9]), "table_init64.wast:2021");

// table_init64.wast:2022
assert_trap(() => call($35, "test", [10]), "table_init64.wast:2022");

// table_init64.wast:2023
assert_trap(() => call($35, "test", [11]), "table_init64.wast:2023");

// table_init64.wast:2024
assert_trap(() => call($35, "test", [12]), "table_init64.wast:2024");

// table_init64.wast:2025
assert_trap(() => call($35, "test", [13]), "table_init64.wast:2025");

// table_init64.wast:2026
assert_trap(() => call($35, "test", [14]), "table_init64.wast:2026");

// table_init64.wast:2027
assert_trap(() => call($35, "test", [15]), "table_init64.wast:2027");

// table_init64.wast:2028
assert_trap(() => call($35, "test", [16]), "table_init64.wast:2028");

// table_init64.wast:2029
assert_trap(() => call($35, "test", [17]), "table_init64.wast:2029");

// table_init64.wast:2030
assert_trap(() => call($35, "test", [18]), "table_init64.wast:2030");

// table_init64.wast:2031
assert_trap(() => call($35, "test", [19]), "table_init64.wast:2031");

// table_init64.wast:2032
assert_trap(() => call($35, "test", [20]), "table_init64.wast:2032");

// table_init64.wast:2033
assert_trap(() => call($35, "test", [21]), "table_init64.wast:2033");

// table_init64.wast:2034
assert_trap(() => call($35, "test", [22]), "table_init64.wast:2034");

// table_init64.wast:2035
assert_trap(() => call($35, "test", [23]), "table_init64.wast:2035");

// table_init64.wast:2036
assert_trap(() => call($35, "test", [24]), "table_init64.wast:2036");

// table_init64.wast:2037
assert_trap(() => call($35, "test", [25]), "table_init64.wast:2037");

// table_init64.wast:2038
assert_trap(() => call($35, "test", [26]), "table_init64.wast:2038");

// table_init64.wast:2039
assert_trap(() => call($35, "test", [27]), "table_init64.wast:2039");

// table_init64.wast:2040
assert_trap(() => call($35, "test", [28]), "table_init64.wast:2040");

// table_init64.wast:2041
assert_trap(() => call($35, "test", [29]), "table_init64.wast:2041");

// table_init64.wast:2042
assert_trap(() => call($35, "test", [30]), "table_init64.wast:2042");

// table_init64.wast:2043
assert_trap(() => call($35, "test", [31]), "table_init64.wast:2043");

// table_init64.wast:2044
assert_trap(() => call($35, "test", [32]), "table_init64.wast:2044");

// table_init64.wast:2045
assert_trap(() => call($35, "test", [33]), "table_init64.wast:2045");

// table_init64.wast:2046
assert_trap(() => call($35, "test", [34]), "table_init64.wast:2046");

// table_init64.wast:2047
assert_trap(() => call($35, "test", [35]), "table_init64.wast:2047");

// table_init64.wast:2048
assert_trap(() => call($35, "test", [36]), "table_init64.wast:2048");

// table_init64.wast:2049
assert_trap(() => call($35, "test", [37]), "table_init64.wast:2049");

// table_init64.wast:2050
assert_trap(() => call($35, "test", [38]), "table_init64.wast:2050");

// table_init64.wast:2051
assert_trap(() => call($35, "test", [39]), "table_init64.wast:2051");

// table_init64.wast:2052
assert_trap(() => call($35, "test", [40]), "table_init64.wast:2052");

// table_init64.wast:2053
assert_trap(() => call($35, "test", [41]), "table_init64.wast:2053");

// table_init64.wast:2054
assert_trap(() => call($35, "test", [42]), "table_init64.wast:2054");

// table_init64.wast:2055
assert_trap(() => call($35, "test", [43]), "table_init64.wast:2055");

// table_init64.wast:2056
assert_trap(() => call($35, "test", [44]), "table_init64.wast:2056");

// table_init64.wast:2057
assert_trap(() => call($35, "test", [45]), "table_init64.wast:2057");

// table_init64.wast:2058
assert_trap(() => call($35, "test", [46]), "table_init64.wast:2058");

// table_init64.wast:2059
assert_trap(() => call($35, "test", [47]), "table_init64.wast:2059");

// table_init64.wast:2060
assert_trap(() => call($35, "test", [48]), "table_init64.wast:2060");

// table_init64.wast:2061
assert_trap(() => call($35, "test", [49]), "table_init64.wast:2061");

// table_init64.wast:2062
assert_trap(() => call($35, "test", [50]), "table_init64.wast:2062");

// table_init64.wast:2063
assert_trap(() => call($35, "test", [51]), "table_init64.wast:2063");

// table_init64.wast:2064
assert_trap(() => call($35, "test", [52]), "table_init64.wast:2064");

// table_init64.wast:2065
assert_trap(() => call($35, "test", [53]), "table_init64.wast:2065");

// table_init64.wast:2066
assert_trap(() => call($35, "test", [54]), "table_init64.wast:2066");

// table_init64.wast:2067
assert_trap(() => call($35, "test", [55]), "table_init64.wast:2067");

// table_init64.wast:2068
assert_trap(() => call($35, "test", [56]), "table_init64.wast:2068");

// table_init64.wast:2069
assert_trap(() => call($35, "test", [57]), "table_init64.wast:2069");

// table_init64.wast:2070
assert_trap(() => call($35, "test", [58]), "table_init64.wast:2070");

// table_init64.wast:2071
assert_trap(() => call($35, "test", [59]), "table_init64.wast:2071");

// table_init64.wast:2072
assert_trap(() => call($35, "test", [60]), "table_init64.wast:2072");

// table_init64.wast:2073
assert_trap(() => call($35, "test", [61]), "table_init64.wast:2073");

// table_init64.wast:2074
assert_trap(() => call($35, "test", [62]), "table_init64.wast:2074");

// table_init64.wast:2075
assert_trap(() => call($35, "test", [63]), "table_init64.wast:2075");

// table_init64.wast:2076
assert_trap(() => call($35, "test", [64]), "table_init64.wast:2076");

// table_init64.wast:2077
assert_trap(() => call($35, "test", [65]), "table_init64.wast:2077");

// table_init64.wast:2078
assert_trap(() => call($35, "test", [66]), "table_init64.wast:2078");

// table_init64.wast:2079
assert_trap(() => call($35, "test", [67]), "table_init64.wast:2079");

// table_init64.wast:2080
assert_trap(() => call($35, "test", [68]), "table_init64.wast:2080");

// table_init64.wast:2081
assert_trap(() => call($35, "test", [69]), "table_init64.wast:2081");

// table_init64.wast:2082
assert_trap(() => call($35, "test", [70]), "table_init64.wast:2082");

// table_init64.wast:2083
assert_trap(() => call($35, "test", [71]), "table_init64.wast:2083");

// table_init64.wast:2084
assert_trap(() => call($35, "test", [72]), "table_init64.wast:2084");

// table_init64.wast:2085
assert_trap(() => call($35, "test", [73]), "table_init64.wast:2085");

// table_init64.wast:2086
assert_trap(() => call($35, "test", [74]), "table_init64.wast:2086");

// table_init64.wast:2087
assert_trap(() => call($35, "test", [75]), "table_init64.wast:2087");

// table_init64.wast:2088
assert_trap(() => call($35, "test", [76]), "table_init64.wast:2088");

// table_init64.wast:2089
assert_trap(() => call($35, "test", [77]), "table_init64.wast:2089");

// table_init64.wast:2090
assert_trap(() => call($35, "test", [78]), "table_init64.wast:2090");

// table_init64.wast:2091
assert_trap(() => call($35, "test", [79]), "table_init64.wast:2091");

// table_init64.wast:2092
assert_trap(() => call($35, "test", [80]), "table_init64.wast:2092");

// table_init64.wast:2093
assert_trap(() => call($35, "test", [81]), "table_init64.wast:2093");

// table_init64.wast:2094
assert_trap(() => call($35, "test", [82]), "table_init64.wast:2094");

// table_init64.wast:2095
assert_trap(() => call($35, "test", [83]), "table_init64.wast:2095");

// table_init64.wast:2096
assert_trap(() => call($35, "test", [84]), "table_init64.wast:2096");

// table_init64.wast:2097
assert_trap(() => call($35, "test", [85]), "table_init64.wast:2097");

// table_init64.wast:2098
assert_trap(() => call($35, "test", [86]), "table_init64.wast:2098");

// table_init64.wast:2099
assert_trap(() => call($35, "test", [87]), "table_init64.wast:2099");

// table_init64.wast:2100
assert_trap(() => call($35, "test", [88]), "table_init64.wast:2100");

// table_init64.wast:2101
assert_trap(() => call($35, "test", [89]), "table_init64.wast:2101");

// table_init64.wast:2102
assert_trap(() => call($35, "test", [90]), "table_init64.wast:2102");

// table_init64.wast:2103
assert_trap(() => call($35, "test", [91]), "table_init64.wast:2103");

// table_init64.wast:2104
assert_trap(() => call($35, "test", [92]), "table_init64.wast:2104");

// table_init64.wast:2105
assert_trap(() => call($35, "test", [93]), "table_init64.wast:2105");

// table_init64.wast:2106
assert_trap(() => call($35, "test", [94]), "table_init64.wast:2106");

// table_init64.wast:2107
assert_trap(() => call($35, "test", [95]), "table_init64.wast:2107");

// table_init64.wast:2108
assert_trap(() => call($35, "test", [96]), "table_init64.wast:2108");

// table_init64.wast:2109
assert_trap(() => call($35, "test", [97]), "table_init64.wast:2109");

// table_init64.wast:2110
assert_trap(() => call($35, "test", [98]), "table_init64.wast:2110");

// table_init64.wast:2111
assert_trap(() => call($35, "test", [99]), "table_init64.wast:2111");

// table_init64.wast:2112
assert_trap(() => call($35, "test", [100]), "table_init64.wast:2112");

// table_init64.wast:2113
assert_trap(() => call($35, "test", [101]), "table_init64.wast:2113");

// table_init64.wast:2114
assert_trap(() => call($35, "test", [102]), "table_init64.wast:2114");

// table_init64.wast:2115
assert_trap(() => call($35, "test", [103]), "table_init64.wast:2115");

// table_init64.wast:2116
assert_trap(() => call($35, "test", [104]), "table_init64.wast:2116");

// table_init64.wast:2117
assert_trap(() => call($35, "test", [105]), "table_init64.wast:2117");

// table_init64.wast:2118
assert_trap(() => call($35, "test", [106]), "table_init64.wast:2118");

// table_init64.wast:2119
assert_trap(() => call($35, "test", [107]), "table_init64.wast:2119");

// table_init64.wast:2120
assert_trap(() => call($35, "test", [108]), "table_init64.wast:2120");

// table_init64.wast:2121
assert_trap(() => call($35, "test", [109]), "table_init64.wast:2121");

// table_init64.wast:2122
assert_trap(() => call($35, "test", [110]), "table_init64.wast:2122");

// table_init64.wast:2123
assert_trap(() => call($35, "test", [111]), "table_init64.wast:2123");

// table_init64.wast:2124
assert_trap(() => call($35, "test", [112]), "table_init64.wast:2124");

// table_init64.wast:2125
assert_trap(() => call($35, "test", [113]), "table_init64.wast:2125");

// table_init64.wast:2126
assert_trap(() => call($35, "test", [114]), "table_init64.wast:2126");

// table_init64.wast:2127
assert_trap(() => call($35, "test", [115]), "table_init64.wast:2127");

// table_init64.wast:2128
assert_trap(() => call($35, "test", [116]), "table_init64.wast:2128");

// table_init64.wast:2129
assert_trap(() => call($35, "test", [117]), "table_init64.wast:2129");

// table_init64.wast:2130
assert_trap(() => call($35, "test", [118]), "table_init64.wast:2130");

// table_init64.wast:2131
assert_trap(() => call($35, "test", [119]), "table_init64.wast:2131");

// table_init64.wast:2132
assert_trap(() => call($35, "test", [120]), "table_init64.wast:2132");

// table_init64.wast:2133
assert_trap(() => call($35, "test", [121]), "table_init64.wast:2133");

// table_init64.wast:2134
assert_trap(() => call($35, "test", [122]), "table_init64.wast:2134");

// table_init64.wast:2135
assert_trap(() => call($35, "test", [123]), "table_init64.wast:2135");

// table_init64.wast:2136
assert_trap(() => call($35, "test", [124]), "table_init64.wast:2136");

// table_init64.wast:2137
assert_trap(() => call($35, "test", [125]), "table_init64.wast:2137");

// table_init64.wast:2138
assert_trap(() => call($35, "test", [126]), "table_init64.wast:2138");

// table_init64.wast:2139
assert_trap(() => call($35, "test", [127]), "table_init64.wast:2139");

// table_init64.wast:2140
assert_trap(() => call($35, "test", [128]), "table_init64.wast:2140");

// table_init64.wast:2141
assert_trap(() => call($35, "test", [129]), "table_init64.wast:2141");

// table_init64.wast:2142
assert_trap(() => call($35, "test", [130]), "table_init64.wast:2142");

// table_init64.wast:2143
assert_trap(() => call($35, "test", [131]), "table_init64.wast:2143");

// table_init64.wast:2144
assert_trap(() => call($35, "test", [132]), "table_init64.wast:2144");

// table_init64.wast:2145
assert_trap(() => call($35, "test", [133]), "table_init64.wast:2145");

// table_init64.wast:2146
assert_trap(() => call($35, "test", [134]), "table_init64.wast:2146");

// table_init64.wast:2147
assert_trap(() => call($35, "test", [135]), "table_init64.wast:2147");

// table_init64.wast:2148
assert_trap(() => call($35, "test", [136]), "table_init64.wast:2148");

// table_init64.wast:2149
assert_trap(() => call($35, "test", [137]), "table_init64.wast:2149");

// table_init64.wast:2150
assert_trap(() => call($35, "test", [138]), "table_init64.wast:2150");

// table_init64.wast:2151
assert_trap(() => call($35, "test", [139]), "table_init64.wast:2151");

// table_init64.wast:2152
assert_trap(() => call($35, "test", [140]), "table_init64.wast:2152");

// table_init64.wast:2153
assert_trap(() => call($35, "test", [141]), "table_init64.wast:2153");

// table_init64.wast:2154
assert_trap(() => call($35, "test", [142]), "table_init64.wast:2154");

// table_init64.wast:2155
assert_trap(() => call($35, "test", [143]), "table_init64.wast:2155");

// table_init64.wast:2156
assert_trap(() => call($35, "test", [144]), "table_init64.wast:2156");

// table_init64.wast:2157
assert_trap(() => call($35, "test", [145]), "table_init64.wast:2157");

// table_init64.wast:2158
assert_trap(() => call($35, "test", [146]), "table_init64.wast:2158");

// table_init64.wast:2159
assert_trap(() => call($35, "test", [147]), "table_init64.wast:2159");

// table_init64.wast:2160
assert_trap(() => call($35, "test", [148]), "table_init64.wast:2160");

// table_init64.wast:2161
assert_trap(() => call($35, "test", [149]), "table_init64.wast:2161");

// table_init64.wast:2162
assert_trap(() => call($35, "test", [150]), "table_init64.wast:2162");

// table_init64.wast:2163
assert_trap(() => call($35, "test", [151]), "table_init64.wast:2163");

// table_init64.wast:2164
assert_trap(() => call($35, "test", [152]), "table_init64.wast:2164");

// table_init64.wast:2165
assert_trap(() => call($35, "test", [153]), "table_init64.wast:2165");

// table_init64.wast:2166
assert_trap(() => call($35, "test", [154]), "table_init64.wast:2166");

// table_init64.wast:2167
assert_trap(() => call($35, "test", [155]), "table_init64.wast:2167");

// table_init64.wast:2168
assert_trap(() => call($35, "test", [156]), "table_init64.wast:2168");

// table_init64.wast:2169
assert_trap(() => call($35, "test", [157]), "table_init64.wast:2169");

// table_init64.wast:2170
assert_trap(() => call($35, "test", [158]), "table_init64.wast:2170");

// table_init64.wast:2171
assert_trap(() => call($35, "test", [159]), "table_init64.wast:2171");

// table_init64.wast:2173
let $$36 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x60\x02\x7f\x7f\x00\x03\x93\x80\x80\x80\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x04\x85\x80\x80\x80\x00\x01\x70\x01\x40\x40\x07\xe4\x80\x80\x80\x00\x12\x02\x66\x30\x00\x00\x02\x66\x31\x00\x01\x02\x66\x32\x00\x02\x02\x66\x33\x00\x03\x02\x66\x34\x00\x04\x02\x66\x35\x00\x05\x02\x66\x36\x00\x06\x02\x66\x37\x00\x07\x02\x66\x38\x00\x08\x02\x66\x39\x00\x09\x03\x66\x31\x30\x00\x0a\x03\x66\x31\x31\x00\x0b\x03\x66\x31\x32\x00\x0c\x03\x66\x31\x33\x00\x0d\x03\x66\x31\x34\x00\x0e\x03\x66\x31\x35\x00\x0f\x04\x74\x65\x73\x74\x00\x10\x03\x72\x75\x6e\x00\x11\x09\xb4\x80\x80\x80\x00\x01\x05\x70\x10\xd2\x00\x0b\xd2\x01\x0b\xd2\x02\x0b\xd2\x03\x0b\xd2\x04\x0b\xd2\x05\x0b\xd2\x06\x0b\xd2\x07\x0b\xd2\x08\x0b\xd2\x09\x0b\xd2\x0a\x0b\xd2\x0b\x0b\xd2\x0c\x0b\xd2\x0d\x0b\xd2\x0e\x0b\xd2\x0f\x0b\x0a\xae\x81\x80\x80\x00\x12\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x84\x80\x80\x80\x00\x00\x41\x0a\x0b\x84\x80\x80\x80\x00\x00\x41\x0b\x0b\x84\x80\x80\x80\x00\x00\x41\x0c\x0b\x84\x80\x80\x80\x00\x00\x41\x0d\x0b\x84\x80\x80\x80\x00\x00\x41\x0e\x0b\x84\x80\x80\x80\x00\x00\x41\x0f\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x41\x00\x20\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:2173");

// table_init64.wast:2173
let $36 = instance($$36);

// table_init64.wast:2201
assert_trap(() => call($36, "run", [48, -16]), "table_init64.wast:2201");

// table_init64.wast:2202
assert_trap(() => call($36, "test", [0]), "table_init64.wast:2202");

// table_init64.wast:2203
assert_trap(() => call($36, "test", [1]), "table_init64.wast:2203");

// table_init64.wast:2204
assert_trap(() => call($36, "test", [2]), "table_init64.wast:2204");

// table_init64.wast:2205
assert_trap(() => call($36, "test", [3]), "table_init64.wast:2205");

// table_init64.wast:2206
assert_trap(() => call($36, "test", [4]), "table_init64.wast:2206");

// table_init64.wast:2207
assert_trap(() => call($36, "test", [5]), "table_init64.wast:2207");

// table_init64.wast:2208
assert_trap(() => call($36, "test", [6]), "table_init64.wast:2208");

// table_init64.wast:2209
assert_trap(() => call($36, "test", [7]), "table_init64.wast:2209");

// table_init64.wast:2210
assert_trap(() => call($36, "test", [8]), "table_init64.wast:2210");

// table_init64.wast:2211
assert_trap(() => call($36, "test", [9]), "table_init64.wast:2211");

// table_init64.wast:2212
assert_trap(() => call($36, "test", [10]), "table_init64.wast:2212");

// table_init64.wast:2213
assert_trap(() => call($36, "test", [11]), "table_init64.wast:2213");

// table_init64.wast:2214
assert_trap(() => call($36, "test", [12]), "table_init64.wast:2214");

// table_init64.wast:2215
assert_trap(() => call($36, "test", [13]), "table_init64.wast:2215");

// table_init64.wast:2216
assert_trap(() => call($36, "test", [14]), "table_init64.wast:2216");

// table_init64.wast:2217
assert_trap(() => call($36, "test", [15]), "table_init64.wast:2217");

// table_init64.wast:2218
assert_trap(() => call($36, "test", [16]), "table_init64.wast:2218");

// table_init64.wast:2219
assert_trap(() => call($36, "test", [17]), "table_init64.wast:2219");

// table_init64.wast:2220
assert_trap(() => call($36, "test", [18]), "table_init64.wast:2220");

// table_init64.wast:2221
assert_trap(() => call($36, "test", [19]), "table_init64.wast:2221");

// table_init64.wast:2222
assert_trap(() => call($36, "test", [20]), "table_init64.wast:2222");

// table_init64.wast:2223
assert_trap(() => call($36, "test", [21]), "table_init64.wast:2223");

// table_init64.wast:2224
assert_trap(() => call($36, "test", [22]), "table_init64.wast:2224");

// table_init64.wast:2225
assert_trap(() => call($36, "test", [23]), "table_init64.wast:2225");

// table_init64.wast:2226
assert_trap(() => call($36, "test", [24]), "table_init64.wast:2226");

// table_init64.wast:2227
assert_trap(() => call($36, "test", [25]), "table_init64.wast:2227");

// table_init64.wast:2228
assert_trap(() => call($36, "test", [26]), "table_init64.wast:2228");

// table_init64.wast:2229
assert_trap(() => call($36, "test", [27]), "table_init64.wast:2229");

// table_init64.wast:2230
assert_trap(() => call($36, "test", [28]), "table_init64.wast:2230");

// table_init64.wast:2231
assert_trap(() => call($36, "test", [29]), "table_init64.wast:2231");

// table_init64.wast:2232
assert_trap(() => call($36, "test", [30]), "table_init64.wast:2232");

// table_init64.wast:2233
assert_trap(() => call($36, "test", [31]), "table_init64.wast:2233");

// table_init64.wast:2234
assert_trap(() => call($36, "test", [32]), "table_init64.wast:2234");

// table_init64.wast:2235
assert_trap(() => call($36, "test", [33]), "table_init64.wast:2235");

// table_init64.wast:2236
assert_trap(() => call($36, "test", [34]), "table_init64.wast:2236");

// table_init64.wast:2237
assert_trap(() => call($36, "test", [35]), "table_init64.wast:2237");

// table_init64.wast:2238
assert_trap(() => call($36, "test", [36]), "table_init64.wast:2238");

// table_init64.wast:2239
assert_trap(() => call($36, "test", [37]), "table_init64.wast:2239");

// table_init64.wast:2240
assert_trap(() => call($36, "test", [38]), "table_init64.wast:2240");

// table_init64.wast:2241
assert_trap(() => call($36, "test", [39]), "table_init64.wast:2241");

// table_init64.wast:2242
assert_trap(() => call($36, "test", [40]), "table_init64.wast:2242");

// table_init64.wast:2243
assert_trap(() => call($36, "test", [41]), "table_init64.wast:2243");

// table_init64.wast:2244
assert_trap(() => call($36, "test", [42]), "table_init64.wast:2244");

// table_init64.wast:2245
assert_trap(() => call($36, "test", [43]), "table_init64.wast:2245");

// table_init64.wast:2246
assert_trap(() => call($36, "test", [44]), "table_init64.wast:2246");

// table_init64.wast:2247
assert_trap(() => call($36, "test", [45]), "table_init64.wast:2247");

// table_init64.wast:2248
assert_trap(() => call($36, "test", [46]), "table_init64.wast:2248");

// table_init64.wast:2249
assert_trap(() => call($36, "test", [47]), "table_init64.wast:2249");

// table_init64.wast:2250
assert_trap(() => call($36, "test", [48]), "table_init64.wast:2250");

// table_init64.wast:2251
assert_trap(() => call($36, "test", [49]), "table_init64.wast:2251");

// table_init64.wast:2252
assert_trap(() => call($36, "test", [50]), "table_init64.wast:2252");

// table_init64.wast:2253
assert_trap(() => call($36, "test", [51]), "table_init64.wast:2253");

// table_init64.wast:2254
assert_trap(() => call($36, "test", [52]), "table_init64.wast:2254");

// table_init64.wast:2255
assert_trap(() => call($36, "test", [53]), "table_init64.wast:2255");

// table_init64.wast:2256
assert_trap(() => call($36, "test", [54]), "table_init64.wast:2256");

// table_init64.wast:2257
assert_trap(() => call($36, "test", [55]), "table_init64.wast:2257");

// table_init64.wast:2258
assert_trap(() => call($36, "test", [56]), "table_init64.wast:2258");

// table_init64.wast:2259
assert_trap(() => call($36, "test", [57]), "table_init64.wast:2259");

// table_init64.wast:2260
assert_trap(() => call($36, "test", [58]), "table_init64.wast:2260");

// table_init64.wast:2261
assert_trap(() => call($36, "test", [59]), "table_init64.wast:2261");

// table_init64.wast:2262
assert_trap(() => call($36, "test", [60]), "table_init64.wast:2262");

// table_init64.wast:2263
assert_trap(() => call($36, "test", [61]), "table_init64.wast:2263");

// table_init64.wast:2264
assert_trap(() => call($36, "test", [62]), "table_init64.wast:2264");

// table_init64.wast:2265
assert_trap(() => call($36, "test", [63]), "table_init64.wast:2265");

// table_init64.wast:2267
let $$37 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8f\x80\x80\x80\x00\x03\x60\x00\x01\x7f\x60\x01\x7f\x01\x7f\x60\x02\x7f\x7f\x00\x03\x93\x80\x80\x80\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x04\x85\x80\x80\x80\x00\x01\x70\x01\x10\x10\x07\xe4\x80\x80\x80\x00\x12\x02\x66\x30\x00\x00\x02\x66\x31\x00\x01\x02\x66\x32\x00\x02\x02\x66\x33\x00\x03\x02\x66\x34\x00\x04\x02\x66\x35\x00\x05\x02\x66\x36\x00\x06\x02\x66\x37\x00\x07\x02\x66\x38\x00\x08\x02\x66\x39\x00\x09\x03\x66\x31\x30\x00\x0a\x03\x66\x31\x31\x00\x0b\x03\x66\x31\x32\x00\x0c\x03\x66\x31\x33\x00\x0d\x03\x66\x31\x34\x00\x0e\x03\x66\x31\x35\x00\x0f\x04\x74\x65\x73\x74\x00\x10\x03\x72\x75\x6e\x00\x11\x09\xb4\x80\x80\x80\x00\x01\x05\x70\x10\xd2\x00\x0b\xd2\x01\x0b\xd2\x02\x0b\xd2\x03\x0b\xd2\x04\x0b\xd2\x05\x0b\xd2\x06\x0b\xd2\x07\x0b\xd2\x08\x0b\xd2\x09\x0b\xd2\x0a\x0b\xd2\x0b\x0b\xd2\x0c\x0b\xd2\x0d\x0b\xd2\x0e\x0b\xd2\x0f\x0b\x0a\xae\x81\x80\x80\x00\x12\x84\x80\x80\x80\x00\x00\x41\x00\x0b\x84\x80\x80\x80\x00\x00\x41\x01\x0b\x84\x80\x80\x80\x00\x00\x41\x02\x0b\x84\x80\x80\x80\x00\x00\x41\x03\x0b\x84\x80\x80\x80\x00\x00\x41\x04\x0b\x84\x80\x80\x80\x00\x00\x41\x05\x0b\x84\x80\x80\x80\x00\x00\x41\x06\x0b\x84\x80\x80\x80\x00\x00\x41\x07\x0b\x84\x80\x80\x80\x00\x00\x41\x08\x0b\x84\x80\x80\x80\x00\x00\x41\x09\x0b\x84\x80\x80\x80\x00\x00\x41\x0a\x0b\x84\x80\x80\x80\x00\x00\x41\x0b\x0b\x84\x80\x80\x80\x00\x00\x41\x0c\x0b\x84\x80\x80\x80\x00\x00\x41\x0d\x0b\x84\x80\x80\x80\x00\x00\x41\x0e\x0b\x84\x80\x80\x80\x00\x00\x41\x0f\x0b\x87\x80\x80\x80\x00\x00\x20\x00\x11\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x20\x00\x41\x08\x20\x01\xfc\x0c\x00\x00\x0b", "table_init64.wast:2267");

// table_init64.wast:2267
let $37 = instance($$37);

// table_init64.wast:2295
assert_trap(() => call($37, "run", [0, -4]), "table_init64.wast:2295");

// table_init64.wast:2296
assert_trap(() => call($37, "test", [0]), "table_init64.wast:2296");

// table_init64.wast:2297
assert_trap(() => call($37, "test", [1]), "table_init64.wast:2297");

// table_init64.wast:2298
assert_trap(() => call($37, "test", [2]), "table_init64.wast:2298");

// table_init64.wast:2299
assert_trap(() => call($37, "test", [3]), "table_init64.wast:2299");

// table_init64.wast:2300
assert_trap(() => call($37, "test", [4]), "table_init64.wast:2300");

// table_init64.wast:2301
assert_trap(() => call($37, "test", [5]), "table_init64.wast:2301");

// table_init64.wast:2302
assert_trap(() => call($37, "test", [6]), "table_init64.wast:2302");

// table_init64.wast:2303
assert_trap(() => call($37, "test", [7]), "table_init64.wast:2303");

// table_init64.wast:2304
assert_trap(() => call($37, "test", [8]), "table_init64.wast:2304");

// table_init64.wast:2305
assert_trap(() => call($37, "test", [9]), "table_init64.wast:2305");

// table_init64.wast:2306
assert_trap(() => call($37, "test", [10]), "table_init64.wast:2306");

// table_init64.wast:2307
assert_trap(() => call($37, "test", [11]), "table_init64.wast:2307");

// table_init64.wast:2308
assert_trap(() => call($37, "test", [12]), "table_init64.wast:2308");

// table_init64.wast:2309
assert_trap(() => call($37, "test", [13]), "table_init64.wast:2309");

// table_init64.wast:2310
assert_trap(() => call($37, "test", [14]), "table_init64.wast:2310");

// table_init64.wast:2311
assert_trap(() => call($37, "test", [15]), "table_init64.wast:2311");

// table_init64.wast:2313
let $$38 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x01\x09\xc4\x81\x80\x80\x00\x41\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x05\x70\x00\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x00\x41\x00\x41\x00\xfc\x0c\x40\x00\x0b", "table_init64.wast:2313");

// table_init64.wast:2313
let $38 = instance($$38);
reinitializeRegistry();
})();

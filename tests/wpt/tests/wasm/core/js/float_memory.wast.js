(function float_memory_wast_js() {

// float_memory.wast:5
let $$1 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8c\x80\x80\x80\x00\x03\x60\x00\x01\x7d\x60\x00\x01\x7f\x60\x00\x00\x03\x86\x80\x80\x80\x00\x05\x00\x01\x02\x02\x02\x05\x84\x80\x80\x80\x00\x01\x01\x01\x01\x07\xb7\x80\x80\x80\x00\x05\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x00\x08\x69\x33\x32\x2e\x6c\x6f\x61\x64\x00\x01\x09\x66\x33\x32\x2e\x73\x74\x6f\x72\x65\x00\x02\x09\x69\x33\x32\x2e\x73\x74\x6f\x72\x65\x00\x03\x05\x72\x65\x73\x65\x74\x00\x04\x0a\xca\x80\x80\x80\x00\x05\x87\x80\x80\x80\x00\x00\x41\x00\x2a\x02\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x00\x28\x02\x00\x0b\x8c\x80\x80\x80\x00\x00\x41\x00\x43\x00\x00\xa0\x7f\x38\x02\x00\x0b\x8d\x80\x80\x80\x00\x00\x41\x00\x41\x80\x80\x80\xfd\x07\x36\x02\x00\x0b\x89\x80\x80\x80\x00\x00\x41\x00\x41\x00\x36\x02\x00\x0b\x0b\x8a\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x04\x00\x00\xa0\x7f", "float_memory.wast:5");

// float_memory.wast:5
let $1 = instance($$1);

// float_memory.wast:15
assert_return(() => call($1, "i32.load", []), "float_memory.wast:15", 2_141_192_192);

// float_memory.wast:16
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x00\xa0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "float_memory.wast:16");  // assert_return(() => call($1, "f32.load", []), "float_memory.wast:16", NaN)

// float_memory.wast:17
run(() => call($1, "reset", []), "float_memory.wast:17");

// float_memory.wast:18
assert_return(() => call($1, "i32.load", []), "float_memory.wast:18", 0);

// float_memory.wast:19
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "float_memory.wast:19");  // assert_return(() => call($1, "f32.load", []), "float_memory.wast:19", 0.)

// float_memory.wast:20
run(() => call($1, "f32.store", []), "float_memory.wast:20");

// float_memory.wast:21
assert_return(() => call($1, "i32.load", []), "float_memory.wast:21", 2_141_192_192);

// float_memory.wast:22
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x00\xa0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "float_memory.wast:22");  // assert_return(() => call($1, "f32.load", []), "float_memory.wast:22", NaN)

// float_memory.wast:23
run(() => call($1, "reset", []), "float_memory.wast:23");

// float_memory.wast:24
assert_return(() => call($1, "i32.load", []), "float_memory.wast:24", 0);

// float_memory.wast:25
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "float_memory.wast:25");  // assert_return(() => call($1, "f32.load", []), "float_memory.wast:25", 0.)

// float_memory.wast:26
run(() => call($1, "i32.store", []), "float_memory.wast:26");

// float_memory.wast:27
assert_return(() => call($1, "i32.load", []), "float_memory.wast:27", 2_141_192_192);

// float_memory.wast:28
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x00\xa0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($1)),  "run", []), "float_memory.wast:28");  // assert_return(() => call($1, "f32.load", []), "float_memory.wast:28", NaN)

// float_memory.wast:30
let $$2 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8c\x80\x80\x80\x00\x03\x60\x00\x01\x7c\x60\x00\x01\x7e\x60\x00\x00\x03\x86\x80\x80\x80\x00\x05\x00\x01\x02\x02\x02\x05\x84\x80\x80\x80\x00\x01\x01\x01\x01\x07\xb7\x80\x80\x80\x00\x05\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x00\x08\x69\x36\x34\x2e\x6c\x6f\x61\x64\x00\x01\x09\x66\x36\x34\x2e\x73\x74\x6f\x72\x65\x00\x02\x09\x69\x36\x34\x2e\x73\x74\x6f\x72\x65\x00\x03\x05\x72\x65\x73\x65\x74\x00\x04\x0a\xd3\x80\x80\x80\x00\x05\x87\x80\x80\x80\x00\x00\x41\x00\x2b\x03\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x00\x29\x03\x00\x0b\x90\x80\x80\x80\x00\x00\x41\x00\x44\x00\x00\x00\x00\x00\x00\xf4\x7f\x39\x03\x00\x0b\x92\x80\x80\x80\x00\x00\x41\x00\x42\x80\x80\x80\x80\x80\x80\x80\xfa\xff\x00\x37\x03\x00\x0b\x89\x80\x80\x80\x00\x00\x41\x00\x42\x00\x37\x03\x00\x0b\x0b\x8e\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x08\x00\x00\x00\x00\x00\x00\xf4\x7f", "float_memory.wast:30");

// float_memory.wast:30
let $2 = instance($$2);

// float_memory.wast:40
assert_return(() => call($2, "i64.load", []), "float_memory.wast:40", 9_219_994_337_134_247_936n);

// float_memory.wast:41
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf4\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($2)),  "run", []), "float_memory.wast:41");  // assert_return(() => call($2, "f64.load", []), "float_memory.wast:41", NaN)

// float_memory.wast:42
run(() => call($2, "reset", []), "float_memory.wast:42");

// float_memory.wast:43
assert_return(() => call($2, "i64.load", []), "float_memory.wast:43", 0n);

// float_memory.wast:44
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($2)),  "run", []), "float_memory.wast:44");  // assert_return(() => call($2, "f64.load", []), "float_memory.wast:44", 0.)

// float_memory.wast:45
run(() => call($2, "f64.store", []), "float_memory.wast:45");

// float_memory.wast:46
assert_return(() => call($2, "i64.load", []), "float_memory.wast:46", 9_219_994_337_134_247_936n);

// float_memory.wast:47
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf4\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($2)),  "run", []), "float_memory.wast:47");  // assert_return(() => call($2, "f64.load", []), "float_memory.wast:47", NaN)

// float_memory.wast:48
run(() => call($2, "reset", []), "float_memory.wast:48");

// float_memory.wast:49
assert_return(() => call($2, "i64.load", []), "float_memory.wast:49", 0n);

// float_memory.wast:50
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($2)),  "run", []), "float_memory.wast:50");  // assert_return(() => call($2, "f64.load", []), "float_memory.wast:50", 0.)

// float_memory.wast:51
run(() => call($2, "i64.store", []), "float_memory.wast:51");

// float_memory.wast:52
assert_return(() => call($2, "i64.load", []), "float_memory.wast:52", 9_219_994_337_134_247_936n);

// float_memory.wast:53
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf4\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($2)),  "run", []), "float_memory.wast:53");  // assert_return(() => call($2, "f64.load", []), "float_memory.wast:53", NaN)

// float_memory.wast:57
let $$3 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8c\x80\x80\x80\x00\x03\x60\x00\x01\x7d\x60\x00\x01\x7f\x60\x00\x00\x03\x86\x80\x80\x80\x00\x05\x00\x01\x02\x02\x02\x05\x84\x80\x80\x80\x00\x01\x01\x01\x01\x07\xb7\x80\x80\x80\x00\x05\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x00\x08\x69\x33\x32\x2e\x6c\x6f\x61\x64\x00\x01\x09\x66\x33\x32\x2e\x73\x74\x6f\x72\x65\x00\x02\x09\x69\x33\x32\x2e\x73\x74\x6f\x72\x65\x00\x03\x05\x72\x65\x73\x65\x74\x00\x04\x0a\xca\x80\x80\x80\x00\x05\x87\x80\x80\x80\x00\x00\x41\x01\x2a\x02\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x01\x28\x02\x00\x0b\x8c\x80\x80\x80\x00\x00\x41\x01\x43\x00\x00\xa0\x7f\x38\x02\x00\x0b\x8d\x80\x80\x80\x00\x00\x41\x01\x41\x80\x80\x80\xfd\x07\x36\x02\x00\x0b\x89\x80\x80\x80\x00\x00\x41\x01\x41\x00\x36\x02\x00\x0b\x0b\x8b\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x05\x00\x00\x00\xa0\x7f", "float_memory.wast:57");

// float_memory.wast:57
let $3 = instance($$3);

// float_memory.wast:67
assert_return(() => call($3, "i32.load", []), "float_memory.wast:67", 2_141_192_192);

// float_memory.wast:68
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x00\xa0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "float_memory.wast:68");  // assert_return(() => call($3, "f32.load", []), "float_memory.wast:68", NaN)

// float_memory.wast:69
run(() => call($3, "reset", []), "float_memory.wast:69");

// float_memory.wast:70
assert_return(() => call($3, "i32.load", []), "float_memory.wast:70", 0);

// float_memory.wast:71
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "float_memory.wast:71");  // assert_return(() => call($3, "f32.load", []), "float_memory.wast:71", 0.)

// float_memory.wast:72
run(() => call($3, "f32.store", []), "float_memory.wast:72");

// float_memory.wast:73
assert_return(() => call($3, "i32.load", []), "float_memory.wast:73", 2_141_192_192);

// float_memory.wast:74
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x00\xa0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "float_memory.wast:74");  // assert_return(() => call($3, "f32.load", []), "float_memory.wast:74", NaN)

// float_memory.wast:75
run(() => call($3, "reset", []), "float_memory.wast:75");

// float_memory.wast:76
assert_return(() => call($3, "i32.load", []), "float_memory.wast:76", 0);

// float_memory.wast:77
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "float_memory.wast:77");  // assert_return(() => call($3, "f32.load", []), "float_memory.wast:77", 0.)

// float_memory.wast:78
run(() => call($3, "i32.store", []), "float_memory.wast:78");

// float_memory.wast:79
assert_return(() => call($3, "i32.load", []), "float_memory.wast:79", 2_141_192_192);

// float_memory.wast:80
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x00\xa0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($3)),  "run", []), "float_memory.wast:80");  // assert_return(() => call($3, "f32.load", []), "float_memory.wast:80", NaN)

// float_memory.wast:82
let $$4 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8c\x80\x80\x80\x00\x03\x60\x00\x01\x7c\x60\x00\x01\x7e\x60\x00\x00\x03\x86\x80\x80\x80\x00\x05\x00\x01\x02\x02\x02\x05\x84\x80\x80\x80\x00\x01\x01\x01\x01\x07\xb7\x80\x80\x80\x00\x05\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x00\x08\x69\x36\x34\x2e\x6c\x6f\x61\x64\x00\x01\x09\x66\x36\x34\x2e\x73\x74\x6f\x72\x65\x00\x02\x09\x69\x36\x34\x2e\x73\x74\x6f\x72\x65\x00\x03\x05\x72\x65\x73\x65\x74\x00\x04\x0a\xd3\x80\x80\x80\x00\x05\x87\x80\x80\x80\x00\x00\x41\x01\x2b\x03\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x01\x29\x03\x00\x0b\x90\x80\x80\x80\x00\x00\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf4\x7f\x39\x03\x00\x0b\x92\x80\x80\x80\x00\x00\x41\x01\x42\x80\x80\x80\x80\x80\x80\x80\xfa\xff\x00\x37\x03\x00\x0b\x89\x80\x80\x80\x00\x00\x41\x01\x42\x00\x37\x03\x00\x0b\x0b\x8f\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x09\x00\x00\x00\x00\x00\x00\x00\xf4\x7f", "float_memory.wast:82");

// float_memory.wast:82
let $4 = instance($$4);

// float_memory.wast:92
assert_return(() => call($4, "i64.load", []), "float_memory.wast:92", 9_219_994_337_134_247_936n);

// float_memory.wast:93
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf4\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "float_memory.wast:93");  // assert_return(() => call($4, "f64.load", []), "float_memory.wast:93", NaN)

// float_memory.wast:94
run(() => call($4, "reset", []), "float_memory.wast:94");

// float_memory.wast:95
assert_return(() => call($4, "i64.load", []), "float_memory.wast:95", 0n);

// float_memory.wast:96
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "float_memory.wast:96");  // assert_return(() => call($4, "f64.load", []), "float_memory.wast:96", 0.)

// float_memory.wast:97
run(() => call($4, "f64.store", []), "float_memory.wast:97");

// float_memory.wast:98
assert_return(() => call($4, "i64.load", []), "float_memory.wast:98", 9_219_994_337_134_247_936n);

// float_memory.wast:99
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf4\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "float_memory.wast:99");  // assert_return(() => call($4, "f64.load", []), "float_memory.wast:99", NaN)

// float_memory.wast:100
run(() => call($4, "reset", []), "float_memory.wast:100");

// float_memory.wast:101
assert_return(() => call($4, "i64.load", []), "float_memory.wast:101", 0n);

// float_memory.wast:102
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "float_memory.wast:102");  // assert_return(() => call($4, "f64.load", []), "float_memory.wast:102", 0.)

// float_memory.wast:103
run(() => call($4, "i64.store", []), "float_memory.wast:103");

// float_memory.wast:104
assert_return(() => call($4, "i64.load", []), "float_memory.wast:104", 9_219_994_337_134_247_936n);

// float_memory.wast:105
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf4\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($4)),  "run", []), "float_memory.wast:105");  // assert_return(() => call($4, "f64.load", []), "float_memory.wast:105", NaN)

// float_memory.wast:109
let $$5 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8c\x80\x80\x80\x00\x03\x60\x00\x01\x7d\x60\x00\x01\x7f\x60\x00\x00\x03\x86\x80\x80\x80\x00\x05\x00\x01\x02\x02\x02\x05\x84\x80\x80\x80\x00\x01\x01\x01\x01\x07\xb7\x80\x80\x80\x00\x05\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x00\x08\x69\x33\x32\x2e\x6c\x6f\x61\x64\x00\x01\x09\x66\x33\x32\x2e\x73\x74\x6f\x72\x65\x00\x02\x09\x69\x33\x32\x2e\x73\x74\x6f\x72\x65\x00\x03\x05\x72\x65\x73\x65\x74\x00\x04\x0a\xca\x80\x80\x80\x00\x05\x87\x80\x80\x80\x00\x00\x41\x00\x2a\x02\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x00\x28\x02\x00\x0b\x8c\x80\x80\x80\x00\x00\x41\x00\x43\x01\x00\xd0\x7f\x38\x02\x00\x0b\x8d\x80\x80\x80\x00\x00\x41\x00\x41\x81\x80\xc0\xfe\x07\x36\x02\x00\x0b\x89\x80\x80\x80\x00\x00\x41\x00\x41\x00\x36\x02\x00\x0b\x0b\x8a\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x04\x01\x00\xd0\x7f", "float_memory.wast:109");

// float_memory.wast:109
let $5 = instance($$5);

// float_memory.wast:119
assert_return(() => call($5, "i32.load", []), "float_memory.wast:119", 2_144_337_921);

// float_memory.wast:120
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x01\x00\xd0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($5)),  "run", []), "float_memory.wast:120");  // assert_return(() => call($5, "f32.load", []), "float_memory.wast:120", NaN)

// float_memory.wast:121
run(() => call($5, "reset", []), "float_memory.wast:121");

// float_memory.wast:122
assert_return(() => call($5, "i32.load", []), "float_memory.wast:122", 0);

// float_memory.wast:123
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($5)),  "run", []), "float_memory.wast:123");  // assert_return(() => call($5, "f32.load", []), "float_memory.wast:123", 0.)

// float_memory.wast:124
run(() => call($5, "f32.store", []), "float_memory.wast:124");

// float_memory.wast:125
assert_return(() => call($5, "i32.load", []), "float_memory.wast:125", 2_144_337_921);

// float_memory.wast:126
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x01\x00\xd0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($5)),  "run", []), "float_memory.wast:126");  // assert_return(() => call($5, "f32.load", []), "float_memory.wast:126", NaN)

// float_memory.wast:127
run(() => call($5, "reset", []), "float_memory.wast:127");

// float_memory.wast:128
assert_return(() => call($5, "i32.load", []), "float_memory.wast:128", 0);

// float_memory.wast:129
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x00\x00\x00\x00\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($5)),  "run", []), "float_memory.wast:129");  // assert_return(() => call($5, "f32.load", []), "float_memory.wast:129", 0.)

// float_memory.wast:130
run(() => call($5, "i32.store", []), "float_memory.wast:130");

// float_memory.wast:131
assert_return(() => call($5, "i32.load", []), "float_memory.wast:131", 2_144_337_921);

// float_memory.wast:132
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7d\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9a\x80\x80\x80\x00\x01\x94\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbc\x43\x01\x00\xd0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($5)),  "run", []), "float_memory.wast:132");  // assert_return(() => call($5, "f32.load", []), "float_memory.wast:132", NaN)

// float_memory.wast:134
let $$6 = module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8c\x80\x80\x80\x00\x03\x60\x00\x01\x7c\x60\x00\x01\x7e\x60\x00\x00\x03\x86\x80\x80\x80\x00\x05\x00\x01\x02\x02\x02\x05\x84\x80\x80\x80\x00\x01\x01\x01\x01\x07\xb7\x80\x80\x80\x00\x05\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x00\x08\x69\x36\x34\x2e\x6c\x6f\x61\x64\x00\x01\x09\x66\x36\x34\x2e\x73\x74\x6f\x72\x65\x00\x02\x09\x69\x36\x34\x2e\x73\x74\x6f\x72\x65\x00\x03\x05\x72\x65\x73\x65\x74\x00\x04\x0a\xd3\x80\x80\x80\x00\x05\x87\x80\x80\x80\x00\x00\x41\x00\x2b\x03\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x00\x29\x03\x00\x0b\x90\x80\x80\x80\x00\x00\x41\x00\x44\x01\x00\x00\x00\x00\x00\xfc\x7f\x39\x03\x00\x0b\x92\x80\x80\x80\x00\x00\x41\x00\x42\x81\x80\x80\x80\x80\x80\x80\xfe\xff\x00\x37\x03\x00\x0b\x89\x80\x80\x80\x00\x00\x41\x00\x42\x00\x37\x03\x00\x0b\x0b\x8e\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x08\x01\x00\x00\x00\x00\x00\xfc\x7f", "float_memory.wast:134");

// float_memory.wast:134
let $6 = instance($$6);

// float_memory.wast:144
assert_return(() => call($6, "i64.load", []), "float_memory.wast:144", 9_222_246_136_947_933_185n);

// float_memory.wast:145
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x01\x00\x00\x00\x00\x00\xfc\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($6)),  "run", []), "float_memory.wast:145");  // assert_return(() => call($6, "f64.load", []), "float_memory.wast:145", NaN)

// float_memory.wast:146
run(() => call($6, "reset", []), "float_memory.wast:146");

// float_memory.wast:147
assert_return(() => call($6, "i64.load", []), "float_memory.wast:147", 0n);

// float_memory.wast:148
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($6)),  "run", []), "float_memory.wast:148");  // assert_return(() => call($6, "f64.load", []), "float_memory.wast:148", 0.)

// float_memory.wast:149
run(() => call($6, "f64.store", []), "float_memory.wast:149");

// float_memory.wast:150
assert_return(() => call($6, "i64.load", []), "float_memory.wast:150", 9_222_246_136_947_933_185n);

// float_memory.wast:151
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x01\x00\x00\x00\x00\x00\xfc\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($6)),  "run", []), "float_memory.wast:151");  // assert_return(() => call($6, "f64.load", []), "float_memory.wast:151", NaN)

// float_memory.wast:152
run(() => call($6, "reset", []), "float_memory.wast:152");

// float_memory.wast:153
assert_return(() => call($6, "i64.load", []), "float_memory.wast:153", 0n);

// float_memory.wast:154
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x00\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($6)),  "run", []), "float_memory.wast:154");  // assert_return(() => call($6, "f64.load", []), "float_memory.wast:154", 0.)

// float_memory.wast:155
run(() => call($6, "i64.store", []), "float_memory.wast:155");

// float_memory.wast:156
assert_return(() => call($6, "i64.load", []), "float_memory.wast:156", 9_222_246_136_947_933_185n);

// float_memory.wast:157
run(() => call(instance(module("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x93\x80\x80\x80\x00\x04\x60\x00\x00\x60\x01\x7f\x01\x6e\x60\x02\x6d\x6d\x01\x7f\x60\x00\x01\x7c\x02\xb8\x80\x80\x80\x00\x03\x06\x6d\x6f\x64\x75\x6c\x65\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x03\x08\x73\x70\x65\x63\x74\x65\x73\x74\x07\x68\x6f\x73\x74\x72\x65\x66\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x65\x71\x5f\x72\x65\x66\x00\x02\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x03\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x02\x40\x10\x00\xbd\x44\x01\x00\x00\x00\x00\x00\xfc\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", "wrapper"), exports($6)),  "run", []), "float_memory.wast:157");  // assert_return(() => call($6, "f64.load", []), "float_memory.wast:157", NaN)
reinitializeRegistry();
})();

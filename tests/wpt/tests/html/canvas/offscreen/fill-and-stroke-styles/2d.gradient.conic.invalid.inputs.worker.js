// DO NOT EDIT! This test has been generated by /html/canvas/tools/gentest.py.
// OffscreenCanvas test in a worker:2d.gradient.conic.invalid.inputs
// Description:Conic gradient function with invalid inputs
// Note:

importScripts("/resources/testharness.js");
importScripts("/html/canvas/resources/canvas-tests.js");

var t = async_test("Conic gradient function with invalid inputs");
var t_pass = t.done.bind(t);
var t_fail = t.step_func(function(reason) {
    throw reason;
});
t.step(function() {

  var canvas = new OffscreenCanvas(100, 50);
  var ctx = canvas.getContext('2d');

  assert_throws_js(TypeError, function() { ctx.createConicGradient(Infinity, 0, 1); });
  assert_throws_js(TypeError, function() { ctx.createConicGradient(-Infinity, 0, 1); });
  assert_throws_js(TypeError, function() { ctx.createConicGradient(NaN, 0, 1); });
  assert_throws_js(TypeError, function() { ctx.createConicGradient(0, Infinity, 1); });
  assert_throws_js(TypeError, function() { ctx.createConicGradient(0, -Infinity, 1); });
  assert_throws_js(TypeError, function() { ctx.createConicGradient(0, NaN, 1); });
  assert_throws_js(TypeError, function() { ctx.createConicGradient(0, 0, Infinity); });
  assert_throws_js(TypeError, function() { ctx.createConicGradient(0, 0, -Infinity); });
  assert_throws_js(TypeError, function() { ctx.createConicGradient(0, 0, NaN); });
  assert_throws_js(TypeError, function() { ctx.createConicGradient(Infinity, Infinity, 1); });
  assert_throws_js(TypeError, function() { ctx.createConicGradient(Infinity, Infinity, Infinity); });
  assert_throws_js(TypeError, function() { ctx.createConicGradient(Infinity, 0, Infinity); });
  assert_throws_js(TypeError, function() { ctx.createConicGradient(0, Infinity, Infinity); });

  const g = ctx.createConicGradient(0, 0, 25);
  assert_throws_js(TypeError, function() { g.addColorStop(-Infinity, '#f00'); });
  assert_throws_js(TypeError, function() { g.addColorStop(NaN, '#f00'); });
  assert_throws_dom("SYNTAX_ERR", function() { g.addColorStop(0, -Infinity); });
  assert_throws_dom("SYNTAX_ERR", function() { g.addColorStop(0, NaN); });
  t.done();
});
done();

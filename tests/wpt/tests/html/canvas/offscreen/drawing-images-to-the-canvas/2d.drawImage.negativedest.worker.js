// DO NOT EDIT! This test has been generated by /html/canvas/tools/gentest.py.
// OffscreenCanvas test in a worker:2d.drawImage.negativedest
// Description:Negative destination width/height represents the correct rectangle
// Note:

importScripts("/resources/testharness.js");
importScripts("/html/canvas/resources/canvas-tests.js");

promise_test(async t => {

  var canvas = new OffscreenCanvas(100, 50);
  var ctx = canvas.getContext('2d');

  ctx.fillStyle = '#f00';
  ctx.fillRect(0, 0, 100, 50);
  const response = await fetch('/images/ggrr-256x256.png');
  const blob = await response.blob();
  const bitmap = await createImageBitmap(blob);
  ctx.drawImage(bitmap, 100, 78, 50, 50, 0, 50, 50, -50);
  ctx.drawImage(bitmap, 100, 128, 50, -50, 100, 50, -50, -50);
  _assertPixelApprox(canvas, 1,1, 0,255,0,255, 2);
  _assertPixelApprox(canvas, 1,48, 0,255,0,255, 2);
  _assertPixelApprox(canvas, 98,1, 0,255,0,255, 2);
  _assertPixelApprox(canvas, 98,48, 0,255,0,255, 2);
  _assertPixelApprox(canvas, 48,1, 0,255,0,255, 2);
  _assertPixelApprox(canvas, 48,48, 0,255,0,255, 2);
  _assertPixelApprox(canvas, 51,1, 0,255,0,255, 2);
  _assertPixelApprox(canvas, 51,48, 0,255,0,255, 2);
  _assertPixelApprox(canvas, 25,25, 0,255,0,255, 2);
  _assertPixelApprox(canvas, 75,25, 0,255,0,255, 2);
  t.done();
}, "Negative destination width/height represents the correct rectangle");
done();

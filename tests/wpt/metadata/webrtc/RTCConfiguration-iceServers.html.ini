[RTCConfiguration-iceServers.html]
  [setConfiguration(config) - { iceServers: undefined } should succeed]
    expected: FAIL

  [new RTCPeerConnection(config) - with turn server, username, credential should succeed]
    expected: FAIL

  [setConfiguration(config) - with turns server and no credentials should throw InvalidAccessError]
    expected: FAIL

  [new RTCPeerConnection(config) - with 2 stun servers should succeed]
    expected: FAIL

  [setConfiguration(config) - with url field should throw TypeError]
    expected: FAIL

  [setConfiguration(config) - with invalid credentialType should throw TypeError]
    expected: FAIL

  [new RTCPeerConnection(config) - with ["stun:stun1.example.net", ""\] url should throw SyntaxError]
    expected: FAIL

  [new RTCPeerConnection(config) - with turns server and only credential should throw InvalidAccessError]
    expected: FAIL

  [new RTCPeerConnection(config) - with stun server, credentialType oauth, and string credential should succeed]
    expected: FAIL

  [setConfiguration(config) - with one turns server, one turn server, username, credential should succeed]
    expected: FAIL

  [new RTCPeerConnection(config) - with "" url should throw SyntaxError]
    expected: FAIL

  [new RTCPeerConnection(config) - with stun server, credentialType password, and RTCOAuthCredential credential should succeed]
    expected: FAIL

  [new RTCPeerConnection() should have default configuration.iceServers of undefined]
    expected: FAIL

  [setConfiguration(config) - with turns server, credentialType oauth and RTCOAuthCredential credential should succeed]
    expected: FAIL

  [setConfiguration(config) - { iceServers: null } should throw TypeError]
    expected: FAIL

  [new RTCPeerConnection(config) - { iceServers: undefined } should succeed]
    expected: FAIL

  [new RTCPeerConnection(config) - with turns server and only username should throw InvalidAccessError]
    expected: FAIL

  [setConfiguration(config) - with stun server should succeed]
    expected: FAIL

  [new RTCPeerConnection(config) - with turns server, credentialType oauth and RTCOAuthCredential credential should succeed]
    expected: FAIL

  [new RTCPeerConnection(config) - with stun server array should succeed]
    expected: FAIL

  [setConfiguration(config) - with stun server, credentialType oauth, and string credential should succeed]
    expected: FAIL

  [setConfiguration(config) - with invalid stun url should throw SyntaxError]
    expected: FAIL

  [setConfiguration(config) - with turn server, username, credential should succeed]
    expected: FAIL

  [setConfiguration(config) - with turns server and only credential should throw InvalidAccessError]
    expected: FAIL

  [setConfiguration(config) - with turns server, credentialType oauth, and string credential should throw InvalidAccessError]
    expected: FAIL

  [setConfiguration(config) - with turn server and only credential should throw InvalidAccessError]
    expected: FAIL

  [new RTCPeerConnection(config) - with http url should throw SyntaxError]
    expected: FAIL

  [setConfiguration(config) - with turns server and only username should throw InvalidAccessError]
    expected: FAIL

  [new RTCPeerConnection(config) - with turn server and only username should throw InvalidAccessError]
    expected: FAIL

  [new RTCPeerConnection(config) - with stun server should succeed]
    expected: FAIL

  [new RTCPeerConnection(config) - with turns server, credentialType oauth, and string credential should throw InvalidAccessError]
    expected: FAIL

  [new RTCPeerConnection(config) - with turn server and only credential should throw InvalidAccessError]
    expected: FAIL

  [setConfiguration(config) - with turns server and empty string username, credential should succeed]
    expected: FAIL

  [new RTCPeerConnection(config) - with both turns and stun server, credentialType oauth and RTCOAuthCredential credential should succeed]
    expected: FAIL

  [setConfiguration(config) - {} should succeed]
    expected: FAIL

  [setConfiguration(config) - with stun server and credentialType password should succeed]
    expected: FAIL

  [setConfiguration(config) - { iceServers: [{}\] } should throw TypeError]
    expected: FAIL

  [new RTCPeerConnection(config) - with turn server and no credentials should throw InvalidAccessError]
    expected: FAIL

  [new RTCPeerConnection(config) - with stun server and credentialType password should succeed]
    expected: FAIL

  [setConfiguration(config) - with empty urls should throw SyntaxError]
    expected: FAIL

  [setConfiguration(config) - with turn server and empty string username, credential should succeed]
    expected: FAIL

  [setConfiguration(config) - with 2 stun servers should succeed]
    expected: FAIL

  [setConfiguration(config) - with stun server array should succeed]
    expected: FAIL

  [setConfiguration(config) - with relative url should throw SyntaxError]
    expected: FAIL

  [new RTCPeerConnection(config) - with turns server, credentialType password, and RTCOauthCredential credential should throw InvalidAccessError]
    expected: FAIL

  [new RTCPeerConnection(config) - with invalid turn url should throw SyntaxError]
    expected: FAIL

  [setConfiguration(config) - { iceServers: [undefined\] } should throw TypeError]
    expected: FAIL

  [new RTCPeerConnection(config) - with turns server and empty string username, credential should succeed]
    expected: FAIL

  [setConfiguration(config) - with "" url should throw SyntaxError]
    expected: FAIL

  [setConfiguration(config) - with credentialType token should throw TypeError]
    expected: FAIL

  [setConfiguration(config) - { iceServers: [\] } should succeed]
    expected: FAIL

  [setConfiguration(config) - { iceServers: [null\] } should throw TypeError]
    expected: FAIL

  [setConfiguration(config) - with turn server and no credentials should throw InvalidAccessError]
    expected: FAIL

  [setConfiguration(config) - with stun server, credentialType password, and RTCOAuthCredential credential should succeed]
    expected: FAIL

  [setConfiguration(config) - with ["stun:stun1.example.net", ""\] url should throw SyntaxError]
    expected: FAIL

  [setConfiguration(config) - with turn server and only username should throw InvalidAccessError]
    expected: FAIL

  [new RTCPeerConnection(config) - { iceServers: [\] } should succeed]
    expected: FAIL

  [setConfiguration(config) - with both turns and stun server, credentialType oauth and RTCOAuthCredential credential should succeed]
    expected: FAIL

  [new RTCPeerConnection(config) - with relative url should throw SyntaxError]
    expected: FAIL

  [setConfiguration(config) - with invalid turn url should throw SyntaxError]
    expected: FAIL

  [new RTCPeerConnection(config) - with turn server and empty string username, credential should succeed]
    expected: FAIL

  [setConfiguration(config) - with http url should throw SyntaxError]
    expected: FAIL

  [new RTCPeerConnection(config) - with invalid stun url should throw SyntaxError]
    expected: FAIL

  [new RTCPeerConnection(config) - with empty urls should throw SyntaxError]
    expected: FAIL

  [setConfiguration(config) - with turns server, credentialType password, and RTCOauthCredential credential should throw InvalidAccessError]
    expected: FAIL

  [new RTCPeerConnection(config) - with one turns server, one turn server, username, credential should succeed]
    expected: FAIL

  [new RTCPeerConnection(config) - with turns server and no credentials should throw InvalidAccessError]
    expected: FAIL


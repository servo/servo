[RTCConfiguration-rtcpMuxPolicy.html]
  [setConfiguration(config) - with { rtcpMuxPolicy: 'invalid' } should throw TypeError]
    expected: FAIL

  [setRemoteDescription throws InvalidAccessError when called with an answer without rtcp-mux and rtcpMuxPolicy is set to require]
    expected: FAIL

  [new RTCPeerConnection({ rtcpMuxPolicy: undefined }) should have default rtcpMuxPolicy require]
    expected: FAIL

  [new RTCPeerConnection({ rtcpMuxPolicy: 'require' }) should succeed]
    expected: FAIL

  [new RTCPeerConnection({ rtcpMuxPolicy: 'negotiate' }) may succeed or throw NotSupportedError]
    expected: FAIL

  [new RTCPeerConnection(config) - with { rtcpMuxPolicy: 'invalid' } should throw TypeError]
    expected: FAIL

  [setConfiguration({ rtcpMuxPolicy: 'require' }) with initial rtcpMuxPolicy negotiate should throw InvalidModificationError]
    expected: FAIL

  [setConfiguration(config) - with { rtcpMuxPolicy: null } should throw TypeError]
    expected: FAIL

  [setRemoteDescription throws InvalidAccessError when called with an offer without rtcp-mux and rtcpMuxPolicy is set to require]
    expected: FAIL

  [setConfiguration({}) with initial rtcpMuxPolicy negotiate should throw InvalidModificationError]
    expected: FAIL

  [setConfiguration({ rtcpMuxPolicy: 'negotiate' }) with initial rtcpMuxPolicy require should throw InvalidModificationError]
    expected: FAIL

  [new RTCPeerConnection() should have default rtcpMuxPolicy require]
    expected: FAIL

  [new RTCPeerConnection(config) - with { rtcpMuxPolicy: null } should throw TypeError]
    expected: FAIL


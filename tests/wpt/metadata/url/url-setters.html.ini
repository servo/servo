[url-setters.html]
  type: testharness
  [Setting <http://example.net>.protocol = 'b' Can’t switch from special scheme to non-special. Note: this may change, see https://github.com/whatwg/url/issues/104]
    expected: FAIL

  [Setting <ssh://me@example.net>.protocol = 'http' Can’t switch from non-special scheme to special. Note: this may change, see https://github.com/whatwg/url/issues/104]
    expected: FAIL

  [Setting <a:/>.pathname = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' UTF-8 percent encoding with the default encode set. Tabs and newlines are removed.]
    expected: FAIL

  [Setting <a:/>.search = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' UTF-8 percent encoding with the query encode set. Tabs and newlines are removed.]
    expected: FAIL

  [Setting <a:/>.hash = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' No percent-encoding at all (!); nuls, tabs, and newlines are removed]
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = '' The empty string is not a valid scheme. Setter leaves the URL unchanged.]
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = 'b']
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = 'B' Upper-case ASCII is lower-cased]
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = 'é' Non-ASCII is rejected]
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = '0b' No leading digit]
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = '+b' No leading punctuation]
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = 'bC0+-.']
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = 'b,c' Only some punctuation is acceptable]
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = 'bé' Non-ASCII is rejected]
    expected: FAIL

  [URL: Setting <http://example.net>.protocol = 'b' Can’t switch from special scheme to non-special. Note: this may change, see https://github.com/whatwg/url/issues/104]
    expected: FAIL

  [<a>: Setting <http://example.net>.protocol = 'b' Can’t switch from special scheme to non-special. Note: this may change, see https://github.com/whatwg/url/issues/104]
    expected: FAIL

  [<area>: Setting <http://example.net>.protocol = 'b' Can’t switch from special scheme to non-special. Note: this may change, see https://github.com/whatwg/url/issues/104]
    expected: FAIL

  [<area>: Setting <mailto:me@example.net>.protocol = 'http' Cannot-be-a-base URL doesn’t have a host, but URL in a special scheme must.]
    expected: FAIL

  [URL: Setting <ssh://me@example.net>.protocol = 'http' Can’t switch from non-special scheme to special. Note: this may change, see https://github.com/whatwg/url/issues/104]
    expected: FAIL

  [<a>: Setting <ssh://me@example.net>.protocol = 'http' Can’t switch from non-special scheme to special. Note: this may change, see https://github.com/whatwg/url/issues/104]
    expected: FAIL

  [<area>: Setting <ssh://me@example.net>.protocol = 'http' Can’t switch from non-special scheme to special. Note: this may change, see https://github.com/whatwg/url/issues/104]
    expected: FAIL

  [<area>: Setting <http://example.net>.protocol = 'https:foo : bar' Stuff after the first ':' is ignored]
    expected: FAIL

  [<area>: Setting <data:text/html,<p>Test>.protocol = 'view-source+data:foo : bar' Stuff after the first ':' is ignored]
    expected: FAIL

  [<area>: Setting <file:///home/you/index.html>.username = 'me' No host means no username]
    expected: FAIL

  [<area>: Setting <unix:/run/foo.socket>.username = 'me' No host means no username]
    expected: FAIL

  [<area>: Setting <mailto:you@example.net>.username = 'me' Cannot-be-a-base means no username]
    expected: FAIL

  [<area>: Setting <http://example.net>.username = 'me']
    expected: FAIL

  [<area>: Setting <http://:secret@example.net>.username = 'me']
    expected: FAIL

  [<area>: Setting <http://me@example.net>.username = '']
    expected: FAIL

  [<area>: Setting <http://me:secret@example.net>.username = '']
    expected: FAIL

  [<area>: Setting <http://example.net>.username = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' UTF-8 percent encoding with the userinfo encode set.]
    expected: FAIL

  [<area>: Setting <http://example.net>.username = '%c3%89té' Bytes already percent-encoded are left as-is.]
    expected: FAIL

  [<area>: Setting <file:///home/me/index.html>.password = 'secret' No host means no password]
    expected: FAIL

  [<area>: Setting <unix:/run/foo.socket>.password = 'secret' No host means no password]
    expected: FAIL

  [<area>: Setting <mailto:me@example.net>.password = 'secret' Cannot-be-a-base means no password]
    expected: FAIL

  [<area>: Setting <http://example.net>.password = 'secret']
    expected: FAIL

  [<area>: Setting <http://me@example.net>.password = 'secret']
    expected: FAIL

  [<area>: Setting <http://:secret@example.net>.password = '']
    expected: FAIL

  [<area>: Setting <http://me:secret@example.net>.password = '']
    expected: FAIL

  [<area>: Setting <http://example.net>.password = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' UTF-8 percent encoding with the userinfo encode set.]
    expected: FAIL

  [<area>: Setting <http://example.net>.password = '%c3%89té' Bytes already percent-encoded are left as-is.]
    expected: FAIL

  [<area>: Setting <mailto:me@example.net>.host = 'example.com' Cannot-be-a-base means no host]
    expected: FAIL

  [<area>: Setting <data:text/plain,Stuff>.host = 'example.net' Cannot-be-a-base means no password]
    expected: FAIL

  [<area>: Setting <http://example.net>.host = 'example.com:8080']
    expected: FAIL

  [<area>: Setting <http://example.net:8080>.host = 'example.com' Port number is unchanged if not specified in the new value]
    expected: FAIL

  [URL: Setting <http://example.net:8080>.host = 'example.com:' Port number is unchanged if not specified]
    expected: FAIL

  [<a>: Setting <http://example.net:8080>.host = 'example.com:' Port number is unchanged if not specified]
    expected: FAIL

  [<area>: Setting <http://example.net:8080>.host = 'example.com:' Port number is unchanged if not specified]
    expected: FAIL

  [<area>: Setting <http://example.net>.host = '' The empty host is not valid for special schemes]
    expected: FAIL

  [<area>: Setting <view-source+http://example.net/foo>.host = '' The empty host is OK for non-special schemes]
    expected: FAIL

  [<area>: Setting <a:/foo>.host = 'example.net' Path-only URLs can gain a host]
    expected: FAIL

  [<area>: Setting <http://example.net>.host = '0x7F000001:8080' IPv4 address syntax is normalized]
    expected: FAIL

  [<area>: Setting <http://example.net>.host = '[::0:01\]:2' IPv6 address syntax is normalized]
    expected: FAIL

  [<area>: Setting <http://example.net>.host = 'example.com:80' Default port number is removed]
    expected: FAIL

  [<area>: Setting <https://example.net>.host = 'example.com:443' Default port number is removed]
    expected: FAIL

  [<area>: Setting <https://example.net>.host = 'example.com:80' Default port number is only removed for the relevant scheme]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com/stuff' Stuff after a / delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com:8080/stuff' Stuff after a / delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com?stuff' Stuff after a ? delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com:8080?stuff' Stuff after a ? delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com#stuff' Stuff after a # delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com:8080#stuff' Stuff after a # delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com\\stuff' Stuff after a \\ delimiter is ignored for special schemes]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com:8080\\stuff' Stuff after a \\ delimiter is ignored for special schemes]
    expected: FAIL

  [<area>: Setting <view-source+http://example.net/path>.host = 'example.com\\stuff' \\ is not a delimiter for non-special schemes, and it’s invalid in a domain]
    expected: FAIL

  [<area>: Setting <view-source+http://example.net/path>.host = 'example.com:8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com:8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com:8080+2' Anything other than ASCII digit stops the port parser in a setter but is not an error]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com:65535' Port numbers are 16 bit integers]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com:65536' Port numbers are 16 bit integers, overflowing is an error. Hostname is still set, though.]
    expected: FAIL

  [<area>: Setting <mailto:me@example.net>.hostname = 'example.com' Cannot-be-a-base means no host]
    expected: FAIL

  [<area>: Setting <data:text/plain,Stuff>.hostname = 'example.net' Cannot-be-a-base means no password]
    expected: FAIL

  [<area>: Setting <http://example.net:8080>.hostname = 'example.com']
    expected: FAIL

  [<area>: Setting <http://example.net>.hostname = '' The empty host is not valid for special schemes]
    expected: FAIL

  [<area>: Setting <view-source+http://example.net/foo>.hostname = '' The empty host is OK for non-special schemes]
    expected: FAIL

  [<area>: Setting <a:/foo>.hostname = 'example.net' Path-only URLs can gain a host]
    expected: FAIL

  [<area>: Setting <http://example.net:8080>.hostname = '0x7F000001' IPv4 address syntax is normalized]
    expected: FAIL

  [<area>: Setting <http://example.net>.hostname = '[::0:01\]' IPv6 address syntax is normalized]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.hostname = 'example.com:8080' Stuff after a : delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net:8080/path>.hostname = 'example.com:' Stuff after a : delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.hostname = 'example.com/stuff' Stuff after a / delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.hostname = 'example.com?stuff' Stuff after a ? delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.hostname = 'example.com#stuff' Stuff after a # delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.hostname = 'example.com\\stuff' Stuff after a \\ delimiter is ignored for special schemes]
    expected: FAIL

  [<area>: Setting <view-source+http://example.net/path>.hostname = 'example.com\\stuff' \\ is not a delimiter for non-special schemes, and it’s invalid in a domain]
    expected: FAIL

  [<area>: Setting <http://example.net>.port = '8080']
    expected: FAIL

  [<area>: Setting <http://example.net:8080>.port = '' Port number is removed if empty is the new value]
    expected: FAIL

  [<area>: Setting <http://example.net:8080>.port = '80' Default port number is removed]
    expected: FAIL

  [<area>: Setting <https://example.net:4433>.port = '443' Default port number is removed]
    expected: FAIL

  [<area>: Setting <https://example.net>.port = '80' Default port number is only removed for the relevant scheme]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.port = '8080/stuff' Stuff after a / delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.port = '8080?stuff' Stuff after a ? delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.port = '8080#stuff' Stuff after a # delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.port = '8080\\stuff' Stuff after a \\ delimiter is ignored for special schemes]
    expected: FAIL

  [<area>: Setting <view-source+http://example.net/path>.port = '8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.port = '8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.port = '8080+2' Anything other than ASCII digit stops the port parser in a setter but is not an error]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.port = '65535' Port numbers are 16 bit integers]
    expected: FAIL

  [<area>: Setting <http://example.net:8080/path>.port = '65536' Port numbers are 16 bit integers, overflowing is an error]
    expected: FAIL

  [<area>: Setting <mailto:me@example.net>.pathname = '/foo' Cannot-be-a-base don’t have a path]
    expected: FAIL

  [<area>: Setting <unix:/run/foo.socket?timeout=10>.pathname = '/var/log/../run/bar.socket']
    expected: FAIL

  [<area>: Setting <https://example.net#nav>.pathname = 'home']
    expected: FAIL

  [<area>: Setting <https://example.net#nav>.pathname = '../home']
    expected: FAIL

  [<area>: Setting <http://example.net/home?lang=fr#nav>.pathname = '\\a\\%2E\\b\\%2e.\\c' \\ is a segment delimiter for 'special' URLs]
    expected: FAIL

  [<area>: Setting <view-source+http://example.net/home?lang=fr#nav>.pathname = '\\a\\%2E\\b\\%2e.\\c' \\ is *not* a segment delimiter for non-'special' URLs]
    expected: FAIL

  [URL: Setting <a:/>.pathname = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' UTF-8 percent encoding with the default encode set. Tabs and newlines are removed.]
    expected: FAIL

  [<a>: Setting <a:/>.pathname = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' UTF-8 percent encoding with the default encode set. Tabs and newlines are removed.]
    expected: FAIL

  [<area>: Setting <a:/>.pathname = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' UTF-8 percent encoding with the default encode set. Tabs and newlines are removed.]
    expected: FAIL

  [<area>: Setting <http://example.net>.pathname = '%2e%2E%c3%89té' Bytes already percent-encoded are left as-is, except %2E.]
    expected: FAIL

  [<area>: Setting <http://example.net>.pathname = '?' ? needs to be encoded]
    expected: FAIL

  [<area>: Setting <https://example.net#nav>.search = 'lang=fr']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US#nav>.search = 'lang=fr']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US#nav>.search = '?lang=fr']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US#nav>.search = '??lang=fr']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US#nav>.search = '?']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US#nav>.search = '']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US>.search = '']
    expected: FAIL

  [<area>: Setting <https://example.net>.search = '']
    expected: FAIL

  [URL: Setting <a:/>.search = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' UTF-8 percent encoding with the query encode set. Tabs and newlines are removed.]
    expected: FAIL

  [<a>: Setting <a:/>.search = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' UTF-8 percent encoding with the query encode set. Tabs and newlines are removed.]
    expected: FAIL

  [<area>: Setting <a:/>.search = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' UTF-8 percent encoding with the query encode set. Tabs and newlines are removed.]
    expected: FAIL

  [<area>: Setting <http://example.net>.search = '%c3%89té' Bytes already percent-encoded are left as-is]
    expected: FAIL

  [<area>: Setting <https://example.net>.hash = 'main']
    expected: FAIL

  [<area>: Setting <https://example.net#nav>.hash = 'main']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US>.hash = '##nav']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US#nav>.hash = '#main']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US#nav>.hash = '#']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US#nav>.hash = '']
    expected: FAIL

  [URL: Setting <a:/>.hash = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' No percent-encoding at all (!); nuls, tabs, and newlines are removed]
    expected: FAIL

  [<a>: Setting <a:/>.hash = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' No percent-encoding at all (!); nuls, tabs, and newlines are removed]
    expected: FAIL

  [<area>: Setting <a:/>.hash = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' No percent-encoding at all (!); nuls, tabs, and newlines are removed]
    expected: FAIL

  [<area>: Setting <http://example.net>.hash = '%c3%89té' Bytes already percent-encoded are left as-is]
    expected: FAIL

  [URL: Setting <a:/>.hash = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' Simple percent-encoding; nuls, tabs, and newlines are removed]
    expected: FAIL

  [<a>: Setting <a:/>.hash = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' Simple percent-encoding; nuls, tabs, and newlines are removed]
    expected: FAIL

  [<area>: Setting <a:/>.hash = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' Simple percent-encoding; nuls, tabs, and newlines are removed]
    expected: FAIL


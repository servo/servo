[general.any.sharedworker.html]
  expected: ERROR

[general.any.serviceworker.html]
  expected: ERROR

[general.any.html]
  expected: TIMEOUT
  [Aborting rejects with AbortError]
    expected: FAIL

  [Aborting rejects with AbortError - no-cors]
    expected: FAIL

  [Signal on request object]
    expected: FAIL

  [Signal on request object created from request object]
    expected: FAIL

  [Signal on request object created from request object, with signal on second request]
    expected: FAIL

  [Signal on request object created from request object, with signal on second request overriding another]
    expected: FAIL

  [Signal retained after unrelated properties are overridden by fetch]
    expected: FAIL

  [Already aborted signal rejects immediately]
    expected: FAIL

  [Request is still 'used' if signal is aborted before fetching]
    expected: FAIL

  [response.arrayBuffer() rejects if already aborted]
    expected: FAIL

  [response.blob() rejects if already aborted]
    expected: FAIL

  [response.formData() rejects if already aborted]
    expected: FAIL

  [response.json() rejects if already aborted]
    expected: FAIL

  [response.text() rejects if already aborted]
    expected: FAIL

  [Call text() twice on aborted response]
    expected: FAIL

  [Already aborted signal does not make request]
    expected: FAIL

  [Already aborted signal can be used for many fetches]
    expected: FAIL

  [Signal can be used to abort other fetches, even if another fetch succeeded before aborting]
    expected: FAIL

  [Underlying connection is closed when aborting after receiving response]
    expected: FAIL

  [Underlying connection is closed when aborting after receiving response - no-cors]
    expected: FAIL

  [Fetch aborted & connection closed when aborted after calling response.arrayBuffer()]
    expected: TIMEOUT

  [Fetch aborted & connection closed when aborted after calling response.blob()]
    expected: NOTRUN

  [Fetch aborted & connection closed when aborted after calling response.formData()]
    expected: NOTRUN

  [Fetch aborted & connection closed when aborted after calling response.json()]
    expected: NOTRUN

  [Fetch aborted & connection closed when aborted after calling response.text()]
    expected: NOTRUN

  [Stream errors once aborted. Underlying connection closed.]
    expected: NOTRUN

  [Stream errors once aborted, after reading. Underlying connection closed.]
    expected: NOTRUN

  [Stream will not error if body is empty. It's closed with an empty queue before it errors.]
    expected: NOTRUN

  [Readable stream synchronously cancels with AbortError if aborted before reading]
    expected: NOTRUN

  [Aborting rejects with abort reason]
    expected: FAIL

  [Signal on request object should also have abort reason]
    expected: FAIL

  [response.bytes() rejects if already aborted]
    expected: FAIL

  [Fetch aborted & connection closed when aborted after calling response.bytes()]
    expected: NOTRUN


[general.any.worker.html]
  expected: TIMEOUT
  [Aborting rejects with AbortError]
    expected: FAIL

  [Aborting rejects with AbortError - no-cors]
    expected: FAIL

  [Signal on request object]
    expected: FAIL

  [Signal on request object created from request object]
    expected: FAIL

  [Signal on request object created from request object, with signal on second request]
    expected: FAIL

  [Signal on request object created from request object, with signal on second request overriding another]
    expected: FAIL

  [Signal retained after unrelated properties are overridden by fetch]
    expected: FAIL

  [Already aborted signal rejects immediately]
    expected: FAIL

  [Request is still 'used' if signal is aborted before fetching]
    expected: FAIL

  [response.arrayBuffer() rejects if already aborted]
    expected: FAIL

  [response.blob() rejects if already aborted]
    expected: FAIL

  [response.formData() rejects if already aborted]
    expected: FAIL

  [response.json() rejects if already aborted]
    expected: FAIL

  [response.text() rejects if already aborted]
    expected: FAIL

  [Call text() twice on aborted response]
    expected: FAIL

  [Already aborted signal does not make request]
    expected: FAIL

  [Already aborted signal can be used for many fetches]
    expected: FAIL

  [Signal can be used to abort other fetches, even if another fetch succeeded before aborting]
    expected: FAIL

  [Underlying connection is closed when aborting after receiving response]
    expected: FAIL

  [Underlying connection is closed when aborting after receiving response - no-cors]
    expected: FAIL

  [Fetch aborted & connection closed when aborted after calling response.arrayBuffer()]
    expected: TIMEOUT

  [Fetch aborted & connection closed when aborted after calling response.blob()]
    expected: NOTRUN

  [Fetch aborted & connection closed when aborted after calling response.formData()]
    expected: NOTRUN

  [Fetch aborted & connection closed when aborted after calling response.json()]
    expected: NOTRUN

  [Fetch aborted & connection closed when aborted after calling response.text()]
    expected: NOTRUN

  [Stream errors once aborted. Underlying connection closed.]
    expected: NOTRUN

  [Stream errors once aborted, after reading. Underlying connection closed.]
    expected: NOTRUN

  [Stream will not error if body is empty. It's closed with an empty queue before it errors.]
    expected: NOTRUN

  [Readable stream synchronously cancels with AbortError if aborted before reading]
    expected: NOTRUN

  [Aborting rejects with abort reason]
    expected: FAIL

  [Signal on request object should also have abort reason]
    expected: FAIL

  [response.bytes() rejects if already aborted]
    expected: FAIL

  [Fetch aborted & connection closed when aborted after calling response.bytes()]
    expected: NOTRUN

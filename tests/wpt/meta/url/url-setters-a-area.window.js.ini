[url-setters-a-area.window.html]
  expected: CRASH

[url-setters-a-area.window.html?include=javascript]
  [<area>: Setting <javascript:alert(1)>.protocol = 'defuse']
    expected: FAIL

  [<area>: Setting <javascript:alert(1)>.username = 'wario']
    expected: FAIL

  [<area>: Setting <javascript://x/>.username = 'wario']
    expected: FAIL

  [<area>: Setting <javascript://x/>.password = 'bowser']
    expected: FAIL

  [<area>: Setting <javascript://x/>.port = '12']
    expected: FAIL

  [<a>: Setting <javascript:alert(1)>.hash = 'castle']
    expected: FAIL

  [<area>: Setting <javascript:alert(1)>.hash = 'castle']
    expected: FAIL


[url-setters-a-area.window.html?include=mailto]
  [<area>: Setting <mailto:me@example.net>.protocol = 'http' Cannot-be-a-base URL doesn’t have a host, but URL in a special scheme must.]
    expected: FAIL

  [<area>: Setting <mailto:you@example.net>.username = 'me' Cannot-be-a-base means no username]
    expected: FAIL

  [<area>: Setting <mailto:me@example.net>.password = 'secret' Cannot-be-a-base means no password]
    expected: FAIL

  [<area>: Setting <mailto:me@example.net>.host = 'example.com' Cannot-be-a-base means no host]
    expected: FAIL

  [<area>: Setting <mailto:me@example.net>.hostname = 'example.com' Cannot-be-a-base means no host]
    expected: FAIL

  [<area>: Setting <mailto:me@example.net>.pathname = '/foo' Cannot-be-a-base don’t have a path]
    expected: FAIL

  [<area>: Setting <mailto:me@example.net>.pathname = '/foo' Opaque paths cannot be set]
    expected: FAIL


[url-setters-a-area.window.html?include=file]
  [<area>: Setting <file://localhost/>.protocol = 'http' Can’t switch from file URL with no host]
    expected: FAIL

  [<area>: Setting <file:///test>.protocol = 'https']
    expected: FAIL

  [<area>: Setting <file:>.protocol = 'wss']
    expected: FAIL

  [<area>: Setting <file://hi/path>.protocol = 's']
    expected: FAIL

  [<area>: Setting <file:///home/you/index.html>.username = 'me' No host means no username]
    expected: FAIL

  [<area>: Setting <file://test/>.username = 'test']
    expected: FAIL

  [<area>: Setting <file:///home/me/index.html>.password = 'secret' No host means no password]
    expected: FAIL

  [<area>: Setting <file://test/>.password = 'test']
    expected: FAIL

  [<area>: Setting <file://y/>.host = 'x:123']
    expected: FAIL

  [<area>: Setting <file://y/>.host = 'loc%41lhost']
    expected: FAIL

  [<area>: Setting <file://hi/x>.host = '']
    expected: FAIL

  [<area>: Setting <file://y/>.hostname = 'x:123']
    expected: FAIL

  [<area>: Setting <file://y/>.hostname = 'loc%41lhost']
    expected: FAIL

  [<area>: Setting <file://hi/x>.hostname = '']
    expected: FAIL

  [<area>: Setting <file://test/>.port = '12']
    expected: FAIL

  [<area>: Setting <file://localhost/>.port = '12']
    expected: FAIL

  [<area>: Setting <file:///some/path>.pathname = '' Special URLs cannot have their paths erased]
    expected: FAIL

  [<a>: Setting <file://monkey/>.pathname = '\\\\' File URLs and (back)slashes]
    expected: FAIL

  [<area>: Setting <file://monkey/>.pathname = '\\\\' File URLs and (back)slashes]
    expected: FAIL

  [<a>: Setting <file:///unicorn>.pathname = '//\\/' File URLs and (back)slashes]
    expected: FAIL

  [<area>: Setting <file:///unicorn>.pathname = '//\\/' File URLs and (back)slashes]
    expected: FAIL

  [<a>: Setting <file:///unicorn>.pathname = '//monkey/..//' File URLs and (back)slashes]
    expected: FAIL

  [<area>: Setting <file:///unicorn>.pathname = '//monkey/..//' File URLs and (back)slashes]
    expected: FAIL

  [<area>: Setting <file:///var/log/system.log>.href = 'http://0300.168.0xF0']
    expected: FAIL


[url-setters-a-area.window.html?exclude=(file|javascript|mailto)]
  [<area>: Setting <a://example.net>.protocol = '' The empty string is not a valid scheme. Setter leaves the URL unchanged.]
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = 'b']
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = 'B' Upper-case ASCII is lower-cased]
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = 'é' Non-ASCII is rejected]
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = '0b' No leading digit]
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = '+b' No leading punctuation]
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = 'bC0+-.']
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = 'b,c' Only some punctuation is acceptable]
    expected: FAIL

  [<area>: Setting <a://example.net>.protocol = 'bé' Non-ASCII is rejected]
    expected: FAIL

  [<area>: Setting <http://test@example.net>.protocol = 'file' Can’t switch from URL containing username/password/port to file]
    expected: FAIL

  [<area>: Setting <https://example.net:1234>.protocol = 'file']
    expected: FAIL

  [<area>: Setting <wss://x:x@example.net:1234>.protocol = 'file']
    expected: FAIL

  [<area>: Setting <http://example.net>.protocol = 'b' Can’t switch from special scheme to non-special]
    expected: FAIL

  [<area>: Setting <https://example.net>.protocol = 's']
    expected: FAIL

  [<area>: Setting <ftp://example.net>.protocol = 'test']
    expected: FAIL

  [<area>: Setting <ssh://me@example.net>.protocol = 'http' Can’t switch from non-special scheme to special]
    expected: FAIL

  [<area>: Setting <ssh://me@example.net>.protocol = 'https']
    expected: FAIL

  [<area>: Setting <ssh://me@example.net>.protocol = 'file']
    expected: FAIL

  [<area>: Setting <ssh://example.net>.protocol = 'file']
    expected: FAIL

  [<area>: Setting <nonsense:///test>.protocol = 'https']
    expected: FAIL

  [<area>: Setting <http://example.net>.protocol = 'https:foo : bar' Stuff after the first ':' is ignored]
    expected: FAIL

  [<area>: Setting <data:text/html,<p>Test>.protocol = 'view-source+data:foo : bar' Stuff after the first ':' is ignored]
    expected: FAIL

  [<area>: Setting <http://foo.com:443/>.protocol = 'https' Port is set to null if it is the default for new scheme.]
    expected: FAIL

  [<area>: Setting <unix:/run/foo.socket>.username = 'me' No host means no username]
    expected: FAIL

  [<area>: Setting <http://example.net>.username = 'me']
    expected: FAIL

  [<area>: Setting <http://:secret@example.net>.username = 'me']
    expected: FAIL

  [<area>: Setting <http://me@example.net>.username = '']
    expected: FAIL

  [<area>: Setting <http://me:secret@example.net>.username = '']
    expected: FAIL

  [<area>: Setting <http://example.net>.username = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' UTF-8 percent encoding with the userinfo encode set.]
    expected: FAIL

  [<area>: Setting <http://example.net>.username = '%c3%89té' Bytes already percent-encoded are left as-is.]
    expected: FAIL

  [<area>: Setting <sc:///>.username = 'x']
    expected: FAIL

  [<area>: Setting <unix:/run/foo.socket>.password = 'secret' No host means no password]
    expected: FAIL

  [<area>: Setting <http://example.net>.password = 'secret']
    expected: FAIL

  [<area>: Setting <http://me@example.net>.password = 'secret']
    expected: FAIL

  [<area>: Setting <http://:secret@example.net>.password = '']
    expected: FAIL

  [<area>: Setting <http://me:secret@example.net>.password = '']
    expected: FAIL

  [<area>: Setting <http://example.net>.password = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' UTF-8 percent encoding with the userinfo encode set.]
    expected: FAIL

  [<area>: Setting <http://example.net>.password = '%c3%89té' Bytes already percent-encoded are left as-is.]
    expected: FAIL

  [<area>: Setting <sc:///>.password = 'x']
    expected: FAIL

  [<area>: Setting <sc://x/>.host = '\x00' Non-special scheme]
    expected: FAIL

  [<area>: Setting <sc://x/>.host = '\t']
    expected: FAIL

  [<area>: Setting <sc://x/>.host = '\n']
    expected: FAIL

  [<area>: Setting <sc://x/>.host = '\r']
    expected: FAIL

  [<area>: Setting <sc://x/>.host = ' ']
    expected: FAIL

  [<area>: Setting <sc://x/>.host = '#']
    expected: FAIL

  [<area>: Setting <sc://x/>.host = '/']
    expected: FAIL

  [<area>: Setting <sc://x/>.host = '?']
    expected: FAIL

  [<area>: Setting <sc://x/>.host = '@']
    expected: FAIL

  [<area>: Setting <sc://x/>.host = 'ß']
    expected: FAIL

  [<area>: Setting <https://x/>.host = 'ß' IDNA Nontransitional_Processing]
    expected: FAIL

  [<area>: Setting <data:text/plain,Stuff>.host = 'example.net' Cannot-be-a-base means no host]
    expected: FAIL

  [<area>: Setting <http://example.net>.host = 'example.com:8080']
    expected: FAIL

  [<area>: Setting <http://example.net:8080>.host = 'example.com' Port number is unchanged if not specified in the new value]
    expected: FAIL

  [<area>: Setting <http://example.net:8080>.host = 'example.com:' Port number is unchanged if not specified]
    expected: FAIL

  [<area>: Setting <http://example.net>.host = '' The empty host is not valid for special schemes]
    expected: FAIL

  [<area>: Setting <view-source+http://example.net/foo>.host = '' The empty host is OK for non-special schemes]
    expected: FAIL

  [<area>: Setting <a:/foo>.host = 'example.net' Path-only URLs can gain a host]
    expected: FAIL

  [<area>: Setting <http://example.net>.host = '0x7F000001:8080' IPv4 address syntax is normalized]
    expected: FAIL

  [<area>: Setting <http://example.net>.host = '[::0:01\]:2' IPv6 address syntax is normalized]
    expected: FAIL

  [<area>: Setting <http://example.net>.host = '[2001:db8::2\]:4002' IPv6 literal address with port, crbug.com/1012416]
    expected: FAIL

  [<area>: Setting <http://example.net>.host = 'example.com:80' Default port number is removed]
    expected: FAIL

  [<area>: Setting <https://example.net>.host = 'example.com:443' Default port number is removed]
    expected: FAIL

  [<area>: Setting <https://example.net>.host = 'example.com:80' Default port number is only removed for the relevant scheme]
    expected: FAIL

  [<area>: Setting <http://example.net:8080>.host = 'example.com:80' Port number is removed if new port is scheme default and existing URL has a non-default port]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com/stuff' Stuff after a / delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com:8080/stuff' Stuff after a / delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com?stuff' Stuff after a ? delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com:8080?stuff' Stuff after a ? delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com#stuff' Stuff after a # delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com:8080#stuff' Stuff after a # delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com\\stuff' Stuff after a \\ delimiter is ignored for special schemes]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com:8080\\stuff' Stuff after a \\ delimiter is ignored for special schemes]
    expected: FAIL

  [<area>: Setting <view-source+http://example.net/path>.host = 'example.com\\stuff' \\ is not a delimiter for non-special schemes, but still forbidden in hosts]
    expected: FAIL

  [<area>: Setting <view-source+http://example.net/path>.host = 'example.com:8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com:8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com:8080+2' Anything other than ASCII digit stops the port parser in a setter but is not an error]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com:65535' Port numbers are 16 bit integers]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com:65536' Port numbers are 16 bit integers, overflowing is an error. Hostname is still set, though.]
    expected: FAIL

  [<area>: Setting <http://example.net/>.host = '[google.com\]' Broken IPv6]
    expected: FAIL

  [<area>: Setting <http://example.net/>.host = '[::1.2.3.4x\]']
    expected: FAIL

  [<area>: Setting <http://example.net/>.host = '[::1.2.3.\]']
    expected: FAIL

  [<area>: Setting <http://example.net/>.host = '[::1.2.\]']
    expected: FAIL

  [<area>: Setting <http://example.net/>.host = '[::1.\]']
    expected: FAIL

  [<area>: Setting <sc://test@test/>.host = '']
    expected: FAIL

  [<area>: Setting <sc://test:12/>.host = '']
    expected: FAIL

  [<area>: Setting <http://example.com/>.host = '///bad.com' Leading / is not stripped]
    expected: FAIL

  [<area>: Setting <sc://example.com/>.host = '///bad.com' Leading / is not stripped]
    expected: FAIL

  [<area>: Setting <sc://x/>.hostname = '\x00' Non-special scheme]
    expected: FAIL

  [<area>: Setting <sc://x/>.hostname = '\t']
    expected: FAIL

  [<area>: Setting <sc://x/>.hostname = '\n']
    expected: FAIL

  [<area>: Setting <sc://x/>.hostname = '\r']
    expected: FAIL

  [<area>: Setting <sc://x/>.hostname = ' ']
    expected: FAIL

  [<area>: Setting <sc://x/>.hostname = '#']
    expected: FAIL

  [<area>: Setting <sc://x/>.hostname = '/']
    expected: FAIL

  [<area>: Setting <sc://x/>.hostname = '?']
    expected: FAIL

  [<area>: Setting <sc://x/>.hostname = '@']
    expected: FAIL

  [<area>: Setting <data:text/plain,Stuff>.hostname = 'example.net' Cannot-be-a-base means no host]
    expected: FAIL

  [<area>: Setting <http://example.net:8080>.hostname = 'example.com']
    expected: FAIL

  [<area>: Setting <http://example.net>.hostname = '' The empty host is not valid for special schemes]
    expected: FAIL

  [<area>: Setting <view-source+http://example.net/foo>.hostname = '' The empty host is OK for non-special schemes]
    expected: FAIL

  [<area>: Setting <a:/foo>.hostname = 'example.net' Path-only URLs can gain a host]
    expected: FAIL

  [<area>: Setting <http://example.net:8080>.hostname = '0x7F000001' IPv4 address syntax is normalized]
    expected: FAIL

  [<area>: Setting <http://example.net>.hostname = '[::0:01\]' IPv6 address syntax is normalized]
    expected: FAIL

  [<a>: Setting <http://example.net/path>.hostname = 'example.com:8080' : delimiter invalidates entire value]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.hostname = 'example.com:8080' : delimiter invalidates entire value]
    expected: FAIL

  [<a>: Setting <http://example.net:8080/path>.hostname = 'example.com:' : delimiter invalidates entire value]
    expected: FAIL

  [<area>: Setting <http://example.net:8080/path>.hostname = 'example.com:' : delimiter invalidates entire value]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.hostname = 'example.com/stuff' Stuff after a / delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.hostname = 'example.com?stuff' Stuff after a ? delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.hostname = 'example.com#stuff' Stuff after a # delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.hostname = 'example.com\\stuff' Stuff after a \\ delimiter is ignored for special schemes]
    expected: FAIL

  [<area>: Setting <view-source+http://example.net/path>.hostname = 'example.com\\stuff' \\ is not a delimiter for non-special schemes, but still forbidden in hosts]
    expected: FAIL

  [<area>: Setting <http://example.net/>.hostname = '[google.com\]' Broken IPv6]
    expected: FAIL

  [<area>: Setting <http://example.net/>.hostname = '[::1.2.3.4x\]']
    expected: FAIL

  [<area>: Setting <http://example.net/>.hostname = '[::1.2.3.\]']
    expected: FAIL

  [<area>: Setting <http://example.net/>.hostname = '[::1.2.\]']
    expected: FAIL

  [<area>: Setting <http://example.net/>.hostname = '[::1.\]']
    expected: FAIL

  [<area>: Setting <sc://test@test/>.hostname = '']
    expected: FAIL

  [<area>: Setting <sc://test:12/>.hostname = '']
    expected: FAIL

  [<area>: Setting <non-spec:/.//p>.hostname = 'h' Drop /. from path]
    expected: FAIL

  [<area>: Setting <non-spec:/.//p>.hostname = '']
    expected: FAIL

  [<area>: Setting <http://example.com/>.hostname = '///bad.com' Leading / is not stripped]
    expected: FAIL

  [<area>: Setting <sc://example.com/>.hostname = '///bad.com' Leading / is not stripped]
    expected: FAIL

  [<area>: Setting <http://example.net>.port = '8080']
    expected: FAIL

  [<area>: Setting <http://example.net:8080>.port = '' Port number is removed if empty is the new value]
    expected: FAIL

  [<area>: Setting <http://example.net:8080>.port = '80' Default port number is removed]
    expected: FAIL

  [<area>: Setting <https://example.net:4433>.port = '443' Default port number is removed]
    expected: FAIL

  [<area>: Setting <https://example.net>.port = '80' Default port number is only removed for the relevant scheme]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.port = '8080/stuff' Stuff after a / delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.port = '8080?stuff' Stuff after a ? delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.port = '8080#stuff' Stuff after a # delimiter is ignored]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.port = '8080\\stuff' Stuff after a \\ delimiter is ignored for special schemes]
    expected: FAIL

  [<area>: Setting <view-source+http://example.net/path>.port = '8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.port = '8080stuff2' Anything other than ASCII digit stops the port parser in a setter but is not an error]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.port = '8080+2' Anything other than ASCII digit stops the port parser in a setter but is not an error]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.port = '65535' Port numbers are 16 bit integers]
    expected: FAIL

  [<area>: Setting <http://example.net:8080/path>.port = '65536' Port numbers are 16 bit integers, overflowing is an error]
    expected: FAIL

  [<area>: Setting <non-special://example.net:8080/path>.port = '65536' Port numbers are 16 bit integers, overflowing is an error]
    expected: FAIL

  [<area>: Setting <non-base:value>.port = '12']
    expected: FAIL

  [<area>: Setting <sc:///>.port = '12']
    expected: FAIL

  [<area>: Setting <sc://x/>.port = '12']
    expected: FAIL

  [<area>: Setting <foo://somehost/some/path>.pathname = '' Non-special URLs can have their paths erased]
    expected: FAIL

  [<a>: Setting <foo:///some/path>.pathname = '' Non-special URLs with an empty host can have their paths erased]
    expected: FAIL

  [<area>: Setting <foo:///some/path>.pathname = '' Non-special URLs with an empty host can have their paths erased]
    expected: FAIL

  [<area>: Setting <foo:/some/path>.pathname = '' Path-only URLs cannot have their paths erased]
    expected: FAIL

  [<area>: Setting <foo:/some/path>.pathname = 'test' Path-only URLs always have an initial slash]
    expected: FAIL

  [<area>: Setting <unix:/run/foo.socket?timeout=10>.pathname = '/var/log/../run/bar.socket']
    expected: FAIL

  [<area>: Setting <https://example.net#nav>.pathname = 'home']
    expected: FAIL

  [<area>: Setting <https://example.net#nav>.pathname = '../home']
    expected: FAIL

  [<area>: Setting <http://example.net/home?lang=fr#nav>.pathname = '\\a\\%2E\\b\\%2e.\\c' \\ is a segment delimiter for 'special' URLs]
    expected: FAIL

  [<area>: Setting <view-source+http://example.net/home?lang=fr#nav>.pathname = '\\a\\%2E\\b\\%2e.\\c' \\ is *not* a segment delimiter for non-'special' URLs]
    expected: FAIL

  [<area>: Setting <a:/>.pathname = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' UTF-8 percent encoding with the default encode set. Tabs and newlines are removed.]
    expected: FAIL

  [<area>: Setting <http://example.net>.pathname = '%2e%2E%c3%89té' Bytes already percent-encoded are left as-is, including %2E outside dotted segments.]
    expected: FAIL

  [<area>: Setting <http://example.net>.pathname = '?' ? needs to be encoded]
    expected: FAIL

  [<area>: Setting <http://example.net>.pathname = '#' # needs to be encoded]
    expected: FAIL

  [<area>: Setting <sc://example.net>.pathname = '?' ? needs to be encoded, non-special scheme]
    expected: FAIL

  [<area>: Setting <sc://example.net>.pathname = '#' # needs to be encoded, non-special scheme]
    expected: FAIL

  [<area>: Setting <http://example.net>.pathname = '/?é' ? doesn't mess up encoding]
    expected: FAIL

  [<area>: Setting <http://example.net>.pathname = '/#é' # doesn't mess up encoding]
    expected: FAIL

  [<a>: Setting <non-spec:/>.pathname = '/.//p' Serialize /. in path]
    expected: FAIL

  [<area>: Setting <non-spec:/>.pathname = '/.//p' Serialize /. in path]
    expected: FAIL

  [<a>: Setting <non-spec:/>.pathname = '/..//p']
    expected: FAIL

  [<area>: Setting <non-spec:/>.pathname = '/..//p']
    expected: FAIL

  [<a>: Setting <non-spec:/>.pathname = '//p']
    expected: FAIL

  [<area>: Setting <non-spec:/>.pathname = '//p']
    expected: FAIL

  [<area>: Setting <non-spec:/.//>.pathname = 'p' Drop /. from path]
    expected: FAIL

  [<area>: Setting <https://example.net#nav>.search = 'lang=fr']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US#nav>.search = 'lang=fr']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US#nav>.search = '?lang=fr']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US#nav>.search = '??lang=fr']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US#nav>.search = '?']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US#nav>.search = '']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US>.search = '']
    expected: FAIL

  [<area>: Setting <https://example.net>.search = '']
    expected: FAIL

  [<area>: Setting <a:/>.search = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' UTF-8 percent encoding with the query encode set. Tabs and newlines are removed.]
    expected: FAIL

  [<area>: Setting <http://example.net>.search = '%c3%89té' Bytes already percent-encoded are left as-is]
    expected: FAIL

  [<area>: Setting <https://example.net>.hash = 'main']
    expected: FAIL

  [<area>: Setting <https://example.net#nav>.hash = 'main']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US>.hash = '##nav']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US#nav>.hash = '#main']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US#nav>.hash = '#']
    expected: FAIL

  [<area>: Setting <https://example.net?lang=en-US#nav>.hash = '']
    expected: FAIL

  [<area>: Setting <http://example.net>.hash = '#foo bar']
    expected: FAIL

  [<area>: Setting <http://example.net>.hash = '#foo"bar']
    expected: FAIL

  [<area>: Setting <http://example.net>.hash = '#foo<bar']
    expected: FAIL

  [<area>: Setting <http://example.net>.hash = '#foo>bar']
    expected: FAIL

  [<area>: Setting <http://example.net>.hash = '#foo`bar']
    expected: FAIL

  [<area>: Setting <a:/>.hash = '\x00\x01\t\n\r\x1f !"#$%&'()*+,-./09:;<=>?@AZ[\\\]^_`az{|}~Éé' Simple percent-encoding; tabs and newlines are removed]
    expected: FAIL

  [<area>: Setting <http://example.net>.hash = 'a\x00b' Percent-encode NULLs in fragment]
    expected: FAIL

  [<area>: Setting <non-spec:/>.hash = 'a\x00b' Percent-encode NULLs in fragment]
    expected: FAIL

  [<area>: Setting <http://example.net>.hash = '%c3%89té' Bytes already percent-encoded are left as-is]
    expected: FAIL

  [<area>: Setting <data:original>.pathname = 'new value']
    expected: FAIL

  [<area>: Setting <sc:original>.pathname = 'new value']
    expected: FAIL

  [<area>: Setting <data:/nospace>.pathname = 'space ' Non-special URLs with non-opaque paths percent-encode U+0020]
    expected: FAIL

  [<area>: Setting <sc:/nospace>.pathname = 'space ']
    expected: FAIL

  [<area>: Setting <data:space ?query>.search = '' Drop trailing spaces from trailing opaque paths]
    expected: FAIL

  [<area>: Setting <sc:space ?query>.search = '']
    expected: FAIL

  [<area>: Setting <data:space  ?query#fragment>.search = '' Do not drop trailing spaces from non-trailing opaque paths]
    expected: FAIL

  [<area>: Setting <sc:space  ?query#fragment>.search = '']
    expected: FAIL

  [<area>: Setting <data:space                                                                                                                                  #fragment>.hash = '' Drop trailing spaces from trailing opaque paths]
    expected: FAIL

  [<area>: Setting <sc:space    #fragment>.hash = '']
    expected: FAIL

  [<area>: Setting <data:space  ?query#fragment>.hash = '' Do not drop trailing spaces from non-trailing opaque paths]
    expected: FAIL

  [<area>: Setting <sc:space  ?query#fragment>.hash = '']
    expected: FAIL

  [<area>: Setting <http://test/>.protocol = 'h\r\ntt\tps' Tab and newline are stripped]
    expected: FAIL

  [<area>: Setting <http://test/>.protocol = 'https\r']
    expected: FAIL

  [<area>: Setting <http://test/>.protocol = 'https\x00' Non-tab/newline C0 controls result in no-op]
    expected: FAIL

  [<area>: Setting <http://test/>.protocol = 'https\x0c']
    expected: FAIL

  [<area>: Setting <http://test/>.protocol = 'https\x0e']
    expected: FAIL

  [<area>: Setting <http://test/>.protocol = 'https ']
    expected: FAIL

  [<area>: Setting <https://example.com/>.host = 'a%C2%ADb']
    expected: FAIL

  [<area>: Setting <https://example.com/>.host = '­']
    expected: FAIL

  [<area>: Setting <https://example.com/>.host = '%C2%AD']
    expected: FAIL

  [<area>: Setting <https://example.com/>.host = 'xn--']
    expected: FAIL

  [<area>: Setting <https://example.com/>.hostname = 'a%C2%ADb']
    expected: FAIL

  [<area>: Setting <https://example.com/>.hostname = '­']
    expected: FAIL

  [<area>: Setting <https://example.com/>.hostname = '%C2%AD']
    expected: FAIL

  [<area>: Setting <https://example.com/>.hostname = 'xn--']
    expected: FAIL

  [<a>: Setting <http://example.net:8080/path>.port = 'randomstring' Setting port to a string that doesn't parse as a number]
    expected: FAIL

  [<area>: Setting <http://example.net:8080/path>.port = 'randomstring' Setting port to a string that doesn't parse as a number]
    expected: FAIL

  [<area>: Setting <https://domain.com:443>.port = '\t8080' Leading u0009 on special scheme]
    expected: FAIL

  [<area>: Setting <wpt++://domain.com:443>.port = '\t8080' Leading u0009 on non-special scheme]
    expected: FAIL

  [<area>: Setting <https://www.google.com:4343>.port = '4wpt' Should use all ascii prefixed characters as port]
    expected: FAIL

  [<area>: Setting <http://example.net>.pathname = ' ' Trailing space should be encoded]
    expected: FAIL

  [<area>: Setting <http://example.net>.pathname = '\x00' Trailing C0 control should be encoded]
    expected: FAIL

  [<area>: Setting <http://example.net>.search = ' ' Trailing space should be encoded]
    expected: FAIL

  [<area>: Setting <http://example.net>.search = '\x00' Trailing C0 control should be encoded]
    expected: FAIL

  [<area>: Setting <http://example.net>.hash = ' ' Trailing space should be encoded]
    expected: FAIL

  [<area>: Setting <http://example.net>.hash = '\x00' Trailing C0 control should be encoded]
    expected: FAIL

  [<area>: Setting <http://example.net/path>.host = 'example.com?stuff:8080' Stuff after a ? delimiter is ignored, trailing 'port']
    expected: FAIL

  [<a>: Setting <http://example.net:8080>.host = 'example.com:invalid' Anything other than ASCII digit stops the port parser in a setter but is not an error]
    expected: FAIL

  [<area>: Setting <http://example.net:8080>.host = 'example.com:invalid' Anything other than ASCII digit stops the port parser in a setter but is not an error]
    expected: FAIL

  [<a>: Setting <http://example.net:8080/test>.host = '[::1\]:invalid' Anything other than ASCII digit stops the port parser in a setter but is not an error]
    expected: FAIL

  [<area>: Setting <http://example.net:8080/test>.host = '[::1\]:invalid' Anything other than ASCII digit stops the port parser in a setter but is not an error]
    expected: FAIL

  [<area>: Setting <http://example.net:8080/test>.host = '[::1\]' IPv6 without port]
    expected: FAIL

[resolving.html?packages-via-trailing-slashes.json]
  [Package-like scenarios: package main modules: moment]
    expected: FAIL

  [Package-like scenarios: package main modules: lodash-dot]
    expected: FAIL

  [Package-like scenarios: package main modules: lodash-dotdot]
    expected: FAIL

  [Package-like scenarios: package submodules: moment/foo]
    expected: FAIL

  [Package-like scenarios: package submodules: moment/foo?query]
    expected: FAIL

  [Package-like scenarios: package submodules: moment/foo#fragment]
    expected: FAIL

  [Package-like scenarios: package submodules: moment/foo?query#fragment]
    expected: FAIL

  [Package-like scenarios: package submodules: lodash-dot/foo]
    expected: FAIL

  [Package-like scenarios: package submodules: lodash-dotdot/foo]
    expected: FAIL

  [Package-like scenarios: package names that end in a slash should just pass through: moment/]
    expected: FAIL

  [Package-like scenarios: backtracking via ..: mapped/path]
    expected: FAIL

  [Package-like scenarios: backtracking via ..: mapped/path/]
    expected: FAIL

  [Package-like scenarios: backtracking via ..: mapped/path/../207/]
    expected: FAIL

  [Package-like scenarios: backtracking via ..: mapped/path/WICG/import-maps/issues/207/]
    expected: FAIL

  [Package-like scenarios: backtracking via ..: mapped/path//WICG/import-maps/issues/207/]
    expected: FAIL

  [Package-like scenarios: backtracking via ..: mapped/non-ascii-1/]
    expected: FAIL

  [Package-like scenarios: backtracking via ..: mapped/non-ascii-1/../%E3%81%8D%E3%81%A4%E3%81%AD/]
    expected: FAIL

  [Package-like scenarios: backtracking via ..: mapped/non-ascii-1/../きつね/]
    expected: FAIL

  [Package-like scenarios: backtracking via ..: mapped/non-ascii-2/]
    expected: FAIL

  [Package-like scenarios: backtracking via ..: mapped/non-ascii-2/../%E3%81%8D%E3%81%A4%E3%81%AD/]
    expected: FAIL

  [Package-like scenarios: backtracking via ..: mapped/non-ascii-2/../きつね/]
    expected: FAIL


[resolving.html?resolving-null.json]
  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: null/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: null/b/c/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: invalid-url/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: invalid-url/b/c/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: without-trailing-slashes/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: without-trailing-slashes/b/c/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: prefix-resolution-error/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: prefix-resolution-error/b/c/x]
    expected: FAIL


[resolving.html?url-specifiers.json]
  [URL-like specifiers: Ordinary URL-like specifiers: https://example.com/lib/foo.mjs]
    expected: FAIL

  [URL-like specifiers: Ordinary URL-like specifiers: https://///example.com/lib/foo.mjs]
    expected: FAIL

  [URL-like specifiers: Ordinary URL-like specifiers: /lib/foo.mjs]
    expected: FAIL

  [URL-like specifiers: Ordinary URL-like specifiers: https://example.com/app/dotrelative/foo.mjs]
    expected: FAIL

  [URL-like specifiers: Ordinary URL-like specifiers: ../app/dotrelative/foo.mjs]
    expected: FAIL

  [URL-like specifiers: Ordinary URL-like specifiers: https://example.com/dotdotrelative/foo.mjs]
    expected: FAIL

  [URL-like specifiers: Ordinary URL-like specifiers: ../dotdotrelative/foo.mjs]
    expected: FAIL

  [URL-like specifiers: Import map entries just composed from / and .: https://example.com/]
    expected: FAIL

  [URL-like specifiers: Import map entries just composed from / and .: /]
    expected: FAIL

  [URL-like specifiers: Import map entries just composed from / and .: ../]
    expected: FAIL

  [URL-like specifiers: Import map entries just composed from / and .: https://example.com/app/]
    expected: FAIL

  [URL-like specifiers: Import map entries just composed from / and .: /app/]
    expected: FAIL

  [URL-like specifiers: Import map entries just composed from / and .: ../app/]
    expected: FAIL

  [URL-like specifiers: prefix-matched by keys with trailing slashes: /test/foo.mjs]
    expected: FAIL

  [URL-like specifiers: prefix-matched by keys with trailing slashes: https://example.com/app/test/foo.mjs]
    expected: FAIL

  [URL-like specifiers: should use the last entry's address when URL-like specifiers parse to the same absolute URL: /test]
    expected: FAIL

  [URL-like specifiers: backtracking (relative URLs): /test/..]
    expected: FAIL

  [URL-like specifiers: backtracking (relative URLs): /test/../backtrack]
    expected: FAIL

  [URL-like specifiers: backtracking (relative URLs): /test/../../backtrack]
    expected: FAIL

  [URL-like specifiers: backtracking (relative URLs): /test/../../../backtrack]
    expected: FAIL

  [URL-like specifiers: backtracking (absolute URLs): https://example.com/test/..]
    expected: FAIL

  [URL-like specifiers: backtracking (absolute URLs): https://example.com/test/../backtrack]
    expected: FAIL

  [URL-like specifiers: backtracking (absolute URLs): https://example.com/test/../../backtrack]
    expected: FAIL

  [URL-like specifiers: backtracking (absolute URLs): https://example.com/test/../../../backtrack]
    expected: FAIL


[resolving.html?url-specifiers-schemes.json]
  [URL-like specifiers: Non-special vs. special schemes: data:text/javascript,console.log('foo')]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: data:text/]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: about:text/foo]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: about:text/]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: blob:text/foo]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: blob:text/]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: blah:text/foo]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: blah:text/]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: http:text/foo]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: http:text/]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: https:text/foo]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: https:text/]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: ftp:text/foo]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: ftp:text/]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: file:text/foo]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: file:text/]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: ws:text/foo]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: ws:text/]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: wss:text/foo]
    expected: FAIL

  [URL-like specifiers: Non-special vs. special schemes: wss:text/]
    expected: FAIL


[resolving.html?scopes-exact-vs-prefix.json]
  [Exact vs. prefix based matching: Scope without trailing slash only: Non-trailing-slash base URL (exact match): moment]
    expected: FAIL

  [Exact vs. prefix based matching: Scope without trailing slash only: Non-trailing-slash base URL (exact match): moment/foo]
    expected: FAIL

  [Exact vs. prefix based matching: Scope with trailing slash only: Trailing-slash base URL (exact match): moment]
    expected: FAIL

  [Exact vs. prefix based matching: Scope with trailing slash only: Trailing-slash base URL (exact match): moment/foo]
    expected: FAIL

  [Exact vs. prefix based matching: Scope with trailing slash only: Subpath base URL (prefix match): moment]
    expected: FAIL

  [Exact vs. prefix based matching: Scope with trailing slash only: Subpath base URL (prefix match): moment/foo]
    expected: FAIL

  [Exact vs. prefix based matching: Scopes with and without trailing slash: Non-trailing-slash base URL (exact match): moment]
    expected: FAIL

  [Exact vs. prefix based matching: Scopes with and without trailing slash: Non-trailing-slash base URL (exact match): moment/foo]
    expected: FAIL

  [Exact vs. prefix based matching: Scopes with and without trailing slash: Trailing-slash base URL (exact match): moment]
    expected: FAIL

  [Exact vs. prefix based matching: Scopes with and without trailing slash: Trailing-slash base URL (exact match): moment/foo]
    expected: FAIL

  [Exact vs. prefix based matching: Scopes with and without trailing slash: Subpath base URL (prefix match): moment]
    expected: FAIL

  [Exact vs. prefix based matching: Scopes with and without trailing slash: Subpath base URL (prefix match): moment/foo]
    expected: FAIL


[resolving.html?tricky-specifiers.json]
  [Tricky specifiers: explicitly-mapped specifiers that happen to have a slash: package/withslash]
    expected: FAIL

  [Tricky specifiers: specifier with punctuation: .]
    expected: FAIL

  [Tricky specifiers: specifier with punctuation: ..]
    expected: FAIL

  [Tricky specifiers: specifier with punctuation: ..\\]
    expected: FAIL

  [Tricky specifiers: specifier with punctuation: %2E]
    expected: FAIL

  [Tricky specifiers: specifier with punctuation: %2F]
    expected: FAIL

  [Tricky specifiers: URL-like specifiers are normalized: https://map.example/%E3%81%8D%E3%81%A4%E3%81%AD/]
    expected: FAIL

  [Tricky specifiers: URL-like specifiers are normalized: https://map.example/%E3%81%8D%E3%81%A4%E3%81%AD/bar]
    expected: FAIL

  [Tricky specifiers: URL-like specifiers are normalized: https://map.example/%E3%81%8D%E3%81%A4%E3%81%AD/fox/]
    expected: FAIL

  [Tricky specifiers: URL-like specifiers are normalized: https://map.example/%E3%81%8D%E3%81%A4%E3%81%AD/fox/bar]
    expected: FAIL

  [Tricky specifiers: URL-like specifiers are normalized: https://map.example/きつね/]
    expected: FAIL

  [Tricky specifiers: URL-like specifiers are normalized: https://map.example/きつね/bar]
    expected: FAIL

  [Tricky specifiers: URL-like specifiers are normalized: https://map.example/きつね/fox/]
    expected: FAIL

  [Tricky specifiers: URL-like specifiers are normalized: https://map.example/きつね/fox/bar]
    expected: FAIL

  [Tricky specifiers: Bare specifiers are not normalized: %E3%81%8D%E3%81%A4%E3%81%AD/]
    expected: FAIL

  [Tricky specifiers: Bare specifiers are not normalized: %E3%81%8D%E3%81%A4%E3%81%AD/bar]
    expected: FAIL

  [Tricky specifiers: Bare specifiers are not normalized: %E3%81%8D%E3%81%A4%E3%81%AD/fox/]
    expected: FAIL

  [Tricky specifiers: Bare specifiers are not normalized: %E3%81%8D%E3%81%A4%E3%81%AD/fox/bar]
    expected: FAIL

  [Tricky specifiers: Bare specifiers are not normalized: きつね/fox/]
    expected: FAIL

  [Tricky specifiers: Bare specifiers are not normalized: きつね/fox/bar]
    expected: FAIL


[resolving.html?scopes.json]
  [Fallback to toplevel and between scopes: should fall back to `imports` when no scopes match: a]
    expected: FAIL

  [Fallback to toplevel and between scopes: should fall back to `imports` when no scopes match: b]
    expected: FAIL

  [Fallback to toplevel and between scopes: should fall back to `imports` when no scopes match: c]
    expected: FAIL

  [Fallback to toplevel and between scopes: should fall back to `imports` when no scopes match: d]
    expected: FAIL

  [Fallback to toplevel and between scopes: should use a direct scope override: a]
    expected: FAIL

  [Fallback to toplevel and between scopes: should use a direct scope override: b]
    expected: FAIL

  [Fallback to toplevel and between scopes: should use a direct scope override: c]
    expected: FAIL

  [Fallback to toplevel and between scopes: should use a direct scope override: d]
    expected: FAIL

  [Fallback to toplevel and between scopes: should use an indirect scope override: a]
    expected: FAIL

  [Fallback to toplevel and between scopes: should use an indirect scope override: b]
    expected: FAIL

  [Fallback to toplevel and between scopes: should use an indirect scope override: c]
    expected: FAIL

  [Fallback to toplevel and between scopes: should use an indirect scope override: d]
    expected: FAIL

  [Relative URL scope keys: An empty string scope is a scope with import map base URL: a]
    expected: FAIL

  [Relative URL scope keys: An empty string scope is a scope with import map base URL: b]
    expected: FAIL

  [Relative URL scope keys: An empty string scope is a scope with import map base URL: c]
    expected: FAIL

  [Relative URL scope keys: './' scope is a scope with import map base URL's directory: a]
    expected: FAIL

  [Relative URL scope keys: './' scope is a scope with import map base URL's directory: b]
    expected: FAIL

  [Relative URL scope keys: './' scope is a scope with import map base URL's directory: c]
    expected: FAIL

  [Relative URL scope keys: '../' scope is a scope with import map base URL's parent directory: a]
    expected: FAIL

  [Relative URL scope keys: '../' scope is a scope with import map base URL's parent directory: b]
    expected: FAIL

  [Relative URL scope keys: '../' scope is a scope with import map base URL's parent directory: c]
    expected: FAIL

  [Package-like scenarios: Base URLs inside the scope should use the scope if the scope has matching keys: lodash-dot]
    expected: FAIL

  [Package-like scenarios: Base URLs inside the scope should use the scope if the scope has matching keys: lodash-dot/foo]
    expected: FAIL

  [Package-like scenarios: Base URLs inside the scope should use the scope if the scope has matching keys: lodash-dotdot]
    expected: FAIL

  [Package-like scenarios: Base URLs inside the scope should use the scope if the scope has matching keys: lodash-dotdot/foo]
    expected: FAIL

  [Package-like scenarios: Base URLs inside the scope fallback to less specific scope: moment]
    expected: FAIL

  [Package-like scenarios: Base URLs inside the scope fallback to less specific scope: vue]
    expected: FAIL

  [Package-like scenarios: Base URLs inside the scope fallback to toplevel: moment/foo]
    expected: FAIL

  [Package-like scenarios: Base URLs outside a scope shouldn't use the scope even if the scope has matching keys: lodash-dot]
    expected: FAIL

  [Package-like scenarios: Base URLs outside a scope shouldn't use the scope even if the scope has matching keys: lodash-dotdot]
    expected: FAIL

  [Package-like scenarios: Base URLs outside a scope shouldn't use the scope even if the scope has matching keys: lodash-dot/foo]
    expected: FAIL

  [Package-like scenarios: Base URLs outside a scope shouldn't use the scope even if the scope has matching keys: lodash-dotdot/foo]
    expected: FAIL

  [Package-like scenarios: Fallback to toplevel or not, depending on trailing slash match: moment]
    expected: FAIL

  [Package-like scenarios: Fallback to toplevel or not, depending on trailing slash match: moment/foo]
    expected: FAIL


[resolving.html?empty-import-map.json]
  [valid relative specifiers: ./foo]
    expected: FAIL

  [valid relative specifiers: ./foo/bar]
    expected: FAIL

  [valid relative specifiers: ./foo/../bar]
    expected: FAIL

  [valid relative specifiers: ./foo/../../bar]
    expected: FAIL

  [valid relative specifiers: ../foo]
    expected: FAIL

  [valid relative specifiers: ../foo/bar]
    expected: FAIL

  [valid relative specifiers: ../../../foo/bar]
    expected: FAIL

  [valid relative specifiers: /foo]
    expected: FAIL

  [valid relative specifiers: /foo/bar]
    expected: FAIL

  [valid relative specifiers: /../../foo/bar]
    expected: FAIL

  [valid relative specifiers: /../foo/../bar]
    expected: FAIL

  [HTTPS scheme absolute URLs: https://fetch-scheme.net]
    expected: FAIL

  [HTTPS scheme absolute URLs: https:fetch-scheme.org]
    expected: FAIL

  [HTTPS scheme absolute URLs: https://fetch%2Dscheme.com/]
    expected: FAIL

  [HTTPS scheme absolute URLs: https://///fetch-scheme.com///]
    expected: FAIL

  [non-HTTPS fetch scheme absolute URLs: about:fetch-scheme]
    expected: FAIL

  [non-fetch scheme absolute URLs: about:fetch-scheme]
    expected: FAIL

  [non-fetch scheme absolute URLs: mailto:non-fetch-scheme]
    expected: FAIL

  [non-fetch scheme absolute URLs: import:non-fetch-scheme]
    expected: FAIL

  [non-fetch scheme absolute URLs: javascript:non-fetch-scheme]
    expected: FAIL

  [non-fetch scheme absolute URLs: wss:non-fetch-scheme]
    expected: FAIL


[resolving.html?overlapping-entries.json]
  [should favor the most-specific key: Overlapping entries with trailing slashes: a]
    expected: FAIL

  [should favor the most-specific key: Overlapping entries with trailing slashes: a/]
    expected: FAIL

  [should favor the most-specific key: Overlapping entries with trailing slashes: a/x]
    expected: FAIL

  [should favor the most-specific key: Overlapping entries with trailing slashes: a/b]
    expected: FAIL

  [should favor the most-specific key: Overlapping entries with trailing slashes: a/b/]
    expected: FAIL

  [should favor the most-specific key: Overlapping entries with trailing slashes: a/b/c]
    expected: FAIL


[resolving.html?data-url-prefix.json]

plugins {
    id 'com.android.library'
}

import groovy.io.FileType
import java.util.regex.Matcher
import java.util.regex.Pattern

android {
    compileSdk 33

    namespace 'org.mozilla.servoview'

    buildDir = rootDir.absolutePath + "/../../../target/android/gradle/servoview"

    ndkPath = getNdkDir()
    externalNativeBuild {
        ndkBuild {
            path file("../jni/Android.mk")
        }
    }

    defaultConfig {
        minSdk 18
        targetSdk 30
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        incremental false
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "default"

    productFlavors {
        basic {
        }
        googlevr {
            minSdkVersion 21
        }
        oculusvr {
            minSdkVersion 21
        }
    }

   splits {
       density {
           enable false
       }
       abi {
           enable false
       }
   }


    buildTypes {
        // Default debug and release build types are used as templates
        debug {
            jniDebuggable true
        }

        release {
            signingConfig signingConfigs.debug // Change this to sign with a production key
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        // Custom build types
        armv7Debug {
            initWith(debug)
            externalNativeBuild {
                ndkBuild {
                    abiFilters getNDKAbi('armv7')
                    arguments(*getNdkBuildArgs(true, 'armv7'))
                }
            }
        }
        armv7Release {
            initWith(release)
            externalNativeBuild {
                ndkBuild {
                    abiFilters getNDKAbi('armv7')
                    arguments(*getNdkBuildArgs(false, 'armv7'))
                }
            }
        }
        arm64Debug {
            initWith(debug)
            externalNativeBuild {
                ndkBuild {
                    abiFilters getNDKAbi('arm64')
                    arguments(*getNdkBuildArgs(true, 'arm64'))
                }
            }
        }
        arm64Release {
            initWith(release)
            externalNativeBuild {
                ndkBuild {
                    abiFilters getNDKAbi('arm64')
                    arguments(*getNdkBuildArgs(false, 'arm64'))
                }
            }
        }
        x86Debug {
            initWith(debug)
            externalNativeBuild {
                ndkBuild {
                    abiFilters getNDKAbi('x86')
                    arguments(*getNdkBuildArgs(true, 'x86'))
                }
            }
        }
        x86Release {
            initWith(release)
            externalNativeBuild {
                ndkBuild {
                    abiFilters getNDKAbi('x86')
                    arguments(*getNdkBuildArgs(false, 'x86'))
                }
            }
        }
    }

    sourceSets {
        main {
        }
        armv7Debug {
            jniLibs.srcDirs = [getJniLibsPath(true, 'armv7')]
        }
        armv7Release {
            jniLibs.srcDirs = [getJniLibsPath(false, 'armv7')]
        }
        arm64Debug {
            jniLibs.srcDirs = [getJniLibsPath(true, 'arm64')]
        }
        arm64Release {
            jniLibs.srcDirs = [getJniLibsPath(false, 'arm64')]
        }
        x86Debug {
            jniLibs.srcDirs = [getJniLibsPath(true, 'x86')]
        }
        x86Release {
            jniLibs.srcDirs = [getJniLibsPath(false, 'x86')]
        }
    }

    // Ignore default 'debug' and 'release' build types
    variantFilter { variant ->
        if(variant.buildType.name.equals('release') || variant.buildType.name.equals('debug')) {
            variant.setIgnore(true);
        }
    }

    project.afterEvaluate {
        android.libraryVariants.all { variant ->
            Pattern pattern = Pattern.compile(/^[\w\d]+([A-Z][\w\d]+)(Debug|Release)/)
            Matcher matcher = pattern.matcher(variant.name)
            if (!matcher.find()) {
                throw new GradleException("Invalid variant name for output: " + variant.name)
            }
            def arch = matcher.group(1)
            def debug = variant.name.contains("Debug")
            def finalFolder = getTargetDir(debug, arch)
            def finalFile = new File(finalFolder, "servoview.aar")
            variant.outputs.all { output ->
                Task copyAndRenameAARTask = project.task("copyAndRename${variant.name.capitalize()}AAR", type: Copy) {
                    from output.outputFile.getParent()
                    into finalFolder
                    include output.outputFileName
                    rename(output.outputFileName, finalFile.getName())
                }
            variant.assemble.finalizedBy(copyAndRenameAARTask)
          }
      }
    }
}

dependencies {

    //Dependency list
    def deps = [
            new ServoDependency("blurdroid.jar", "blurdroid")
    ]
    // Iterate all build types and dependencies
    // For each dependency call the proper implementation command and set the correct dependency path
    def list = ['armv7', 'arm64', 'x86'] //TODO: document removal of arm
    for (arch in list) {
        for (debug in [true, false]) {
            String basePath = getTargetDir(debug, arch) + "/build"
            String cmd = arch + (debug ? "Debug" : "Release") + "Implementation"

            for (ServoDependency dep : deps) {
                String path = findDependencyPath(basePath, dep.fileName, dep.folderFilter)
                if (path) {
                    "${cmd}" files(path)
                }
            }
        }
    }

    googlevrImplementation 'com.google.vr:sdk-base:1.140.0'
    googlevrImplementation(name: 'GVRService', ext: 'aar')
    oculusvrImplementation(name: 'OVRService', ext: 'aar')
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
}

// folderFilter can be used to improve search performance
static String findDependencyPath(String basePath, String filename, String folderFilter) {
    File path = new File(basePath);
    if (!path.exists()) {
        return ''
    }

    if (folderFilter) {
        path.eachDir {
            if (it.name.contains(folderFilter)) {
                path = new File(it.absolutePath)
            }
        }
    }
    def result = ''
    path.eachFileRecurse(FileType.FILES) {
        if(it.name.equals(filename)) {
            result = it.absolutePath
        }
    }

    return result
}

class ServoDependency {
    ServoDependency(String fileName, String folderFilter = null) {
        this.fileName = fileName;
        this.folderFilter = folderFilter;
    }
    public String fileName;
    public String folderFilter;
}

// Call our custom NDK Build task using flavor parameters
def getNdkBuildArgs(boolean debug, String arch) {
    return [
        'APP_BUILD_SCRIPT=../jni/Android.mk',
        'NDK_APPLICATION_MK=../jni/Application.mk',
        'NDK_LIBS_OUT=' + getJniLibsPath(debug, arch),
        'NDK_OUT=' + getTargetDir(debug, arch) + '/apk/obj',
        'NDK_DEBUG=' + (debug ? '1' : '0'),
        'APP_ABI=' + getNDKAbi(arch),
        'SERVO_TARGET_DIR=' + getNativeTargetDir(debug, arch)
    ]
}

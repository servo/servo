header = """/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */"""
autogen_warning = """/* DO NOT MODIFY THIS MANUALLY! This file was generated using cbindgen.
 * To generate this file:
 *   1. Get the latest cbindgen using `cargo install --force cbindgen`
 *      a. Alternatively, you can clone `https://github.com/eqrion/cbindgen` and use a tagged release
 *   2. Run `rustup run nightly cbindgen toolkit/library/rust/ --lockfile Cargo.lock --crate style -o layout/style/ServoStyleConsts.h`
 */
#include "nsCoord.h"
#include "Units.h"
#include "mozilla/gfx/Types.h"
class nsAtom;
namespace mozilla {
  class WritingMode;
  enum LogicalSide : uint8_t;
  namespace css {
    struct URLValue;
  }

  // Work-around weird cbindgen renaming.
  typedef css::URLValue StyleURLValue;
  typedef nsAtom StylensAtom;
}
"""
include_guard = "mozilla_ServoStyleConsts_h"
include_version = true
braces = "SameLine"
line_length = 80
tab_width = 2
language = "C++"
namespaces = ["mozilla"]

[parse]
parse_deps = true
include = ["cssparser", "style_traits"]

[struct]
derive_eq = true
derive_neq = true

[enum]
derive_helper_methods = true

[export]
prefix = "Style"
include = [
  "Appearance",
  "BreakBetween",
  "BreakWithin",
  "BorderStyle",
  "OutlineStyle",
  "ComputedFontStretchRange",
  "ComputedFontStyleDescriptor",
  "ComputedFontWeightRange",
  "ComputedTimingFunction",
  "CursorKind",
  "Display",
  "DisplayMode",
  "ExtremumLength",
  "FillRule",
  "FontDisplay",
  "FontFaceSourceListComponent",
  "FontLanguageOverride",
  "OverflowWrap",
  "TimingFunction",
  "PathCommand",
  "UnicodeRange",
  "UserSelect",
  "Float",
  "OverscrollBehavior",
  "ScrollSnapType",
  "OverflowAnchor",
  "OverflowClipBox",
  "Resize",
  "Overflow",
  "LengthPercentage",
  "NonNegativeLengthPercentage",
  "LengthPercentageOrAuto",
  "Rect",
  "IntersectionObserverRootMargin",
]
item_types = ["enums", "structs", "typedefs"]

[export.body]
"LengthPercentage" = """
  // Defined in nsStyleCoord.h
  static constexpr inline StyleLengthPercentage Zero();
  inline bool HasPercent() const;
  inline bool ConvertsToLength() const;
  inline nscoord ToLength() const;
  inline bool ConvertsToPercentage() const;
  inline float ToPercentage() const;
  inline CSSCoord LengthInCSSPixels() const;
  inline float Percentage() const;
  inline CSSCoord ResolveToCSSPixels(CSSCoord aPercentageBasisInCSSPixels) const;
  template<typename T> inline CSSCoord ResolveToCSSPixelsWith(T aPercentageGetter) const;
  inline nscoord Resolve(nscoord aPercentageBasis) const;
  template<typename T> inline nscoord ResolveWith(T aPercentageGetter) const;
"""

"LengthPercentageOrAuto" = """
  inline const StyleLengthPercentage& AsLengthPercentage() const;
  inline bool HasPercent() const;
  inline bool ConvertsToLength() const;
"""

"Rect" = """
  // Defined in nsStyleCoord.h
  template<typename Predicate> inline bool All(Predicate) const;
  template<typename Predicate> inline bool Any(Predicate) const;

  // Defined in WritingModes.h
  inline const T& Get(mozilla::Side) const;
  inline const T& Get(mozilla::WritingMode, mozilla::LogicalSide) const;
  inline const T& GetIStart(mozilla::WritingMode) const;
  inline const T& GetBStart(mozilla::WritingMode) const;
  inline const T& GetIEnd(mozilla::WritingMode) const;
  inline const T& GetBEnd(mozilla::WritingMode) const;
"""

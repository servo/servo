/* automatically generated by rust-bindgen */

use heapsize::HeapSizeOf;
pub type ServoComputedValuesStrong = ::gecko_bindings::sugar::ownership::Strong<ServoComputedValues>;
pub type ServoComputedValuesBorrowedOrNull<'a> = ::gecko_bindings::sugar::ownership::Borrowed<'a, ServoComputedValues>;
pub type ServoComputedValuesBorrowed<'a> = &'a ServoComputedValues;
enum ServoComputedValuesVoid{ }
pub struct ServoComputedValues(ServoComputedValuesVoid);
pub type RawServoStyleSheetStrong = ::gecko_bindings::sugar::ownership::Strong<RawServoStyleSheet>;
pub type RawServoStyleSheetBorrowedOrNull<'a> = ::gecko_bindings::sugar::ownership::Borrowed<'a, RawServoStyleSheet>;
pub type RawServoStyleSheetBorrowed<'a> = &'a RawServoStyleSheet;
enum RawServoStyleSheetVoid{ }
pub struct RawServoStyleSheet(RawServoStyleSheetVoid);
pub type ServoDeclarationBlockStrong = ::gecko_bindings::sugar::ownership::Strong<ServoDeclarationBlock>;
pub type ServoDeclarationBlockBorrowedOrNull<'a> = ::gecko_bindings::sugar::ownership::Borrowed<'a, ServoDeclarationBlock>;
pub type ServoDeclarationBlockBorrowed<'a> = &'a ServoDeclarationBlock;
enum ServoDeclarationBlockVoid{ }
pub struct ServoDeclarationBlock(ServoDeclarationBlockVoid);
pub type RawGeckoNodeBorrowed<'a> = &'a RawGeckoNode;
pub type RawGeckoNodeBorrowedOrNull<'a> = ::gecko_bindings::sugar::ownership::Borrowed<'a, RawGeckoNode>;
pub type RawGeckoElementBorrowed<'a> = &'a RawGeckoElement;
pub type RawGeckoElementBorrowedOrNull<'a> = ::gecko_bindings::sugar::ownership::Borrowed<'a, RawGeckoElement>;
pub type RawGeckoDocumentBorrowed<'a> = &'a RawGeckoDocument;
pub type RawGeckoDocumentBorrowedOrNull<'a> = ::gecko_bindings::sugar::ownership::Borrowed<'a, RawGeckoDocument>;
pub type RawServoStyleSetBorrowed<'a> = &'a RawServoStyleSet;
pub type RawServoStyleSetBorrowedMut<'a> = &'a mut RawServoStyleSet;
pub type RawServoStyleSetOwned = ::gecko_bindings::sugar::ownership::Owned<RawServoStyleSet>;
pub type RawServoStyleSetBorrowedOrNull<'a> = ::gecko_bindings::sugar::ownership::Borrowed<'a, RawServoStyleSet>;
pub type RawServoStyleSetBorrowedMutOrNull<'a> = ::gecko_bindings::sugar::ownership::BorrowedMut<'a, RawServoStyleSet>;
pub type RawServoStyleSetOwnedOrNull = ::gecko_bindings::sugar::ownership::OwnedOrNull<RawServoStyleSet>;
enum RawServoStyleSetVoid{ }
pub struct RawServoStyleSet(RawServoStyleSetVoid);
pub type StyleChildrenIteratorBorrowed<'a> = &'a StyleChildrenIterator;
pub type StyleChildrenIteratorBorrowedMut<'a> = &'a mut StyleChildrenIterator;
pub type StyleChildrenIteratorOwned = ::gecko_bindings::sugar::ownership::Owned<StyleChildrenIterator>;
pub type StyleChildrenIteratorBorrowedOrNull<'a> = ::gecko_bindings::sugar::ownership::Borrowed<'a, StyleChildrenIterator>;
pub type StyleChildrenIteratorBorrowedMutOrNull<'a> = ::gecko_bindings::sugar::ownership::BorrowedMut<'a, StyleChildrenIterator>;
pub type StyleChildrenIteratorOwnedOrNull = ::gecko_bindings::sugar::ownership::OwnedOrNull<StyleChildrenIterator>;
enum StyleChildrenIteratorVoid{ }
pub struct StyleChildrenIterator(StyleChildrenIteratorVoid);
use gecko_bindings::structs::nsStyleFont;
unsafe impl Send for nsStyleFont {}
unsafe impl Sync for nsStyleFont {}
use gecko_bindings::structs::nsStyleColor;
unsafe impl Send for nsStyleColor {}
unsafe impl Sync for nsStyleColor {}
use gecko_bindings::structs::nsStyleList;
unsafe impl Send for nsStyleList {}
unsafe impl Sync for nsStyleList {}
use gecko_bindings::structs::nsStyleText;
unsafe impl Send for nsStyleText {}
unsafe impl Sync for nsStyleText {}
use gecko_bindings::structs::nsStyleVisibility;
unsafe impl Send for nsStyleVisibility {}
unsafe impl Sync for nsStyleVisibility {}
use gecko_bindings::structs::nsStyleUserInterface;
unsafe impl Send for nsStyleUserInterface {}
unsafe impl Sync for nsStyleUserInterface {}
use gecko_bindings::structs::nsStyleTableBorder;
unsafe impl Send for nsStyleTableBorder {}
unsafe impl Sync for nsStyleTableBorder {}
use gecko_bindings::structs::nsStyleSVG;
unsafe impl Send for nsStyleSVG {}
unsafe impl Sync for nsStyleSVG {}
use gecko_bindings::structs::nsStyleVariables;
unsafe impl Send for nsStyleVariables {}
unsafe impl Sync for nsStyleVariables {}
use gecko_bindings::structs::nsStyleBackground;
unsafe impl Send for nsStyleBackground {}
unsafe impl Sync for nsStyleBackground {}
use gecko_bindings::structs::nsStylePosition;
unsafe impl Send for nsStylePosition {}
unsafe impl Sync for nsStylePosition {}
use gecko_bindings::structs::nsStyleTextReset;
unsafe impl Send for nsStyleTextReset {}
unsafe impl Sync for nsStyleTextReset {}
use gecko_bindings::structs::nsStyleDisplay;
unsafe impl Send for nsStyleDisplay {}
unsafe impl Sync for nsStyleDisplay {}
use gecko_bindings::structs::nsStyleContent;
unsafe impl Send for nsStyleContent {}
unsafe impl Sync for nsStyleContent {}
use gecko_bindings::structs::nsStyleUIReset;
unsafe impl Send for nsStyleUIReset {}
unsafe impl Sync for nsStyleUIReset {}
use gecko_bindings::structs::nsStyleTable;
unsafe impl Send for nsStyleTable {}
unsafe impl Sync for nsStyleTable {}
use gecko_bindings::structs::nsStyleMargin;
unsafe impl Send for nsStyleMargin {}
unsafe impl Sync for nsStyleMargin {}
use gecko_bindings::structs::nsStylePadding;
unsafe impl Send for nsStylePadding {}
unsafe impl Sync for nsStylePadding {}
use gecko_bindings::structs::nsStyleBorder;
unsafe impl Send for nsStyleBorder {}
unsafe impl Sync for nsStyleBorder {}
use gecko_bindings::structs::nsStyleOutline;
unsafe impl Send for nsStyleOutline {}
unsafe impl Sync for nsStyleOutline {}
use gecko_bindings::structs::nsStyleXUL;
unsafe impl Send for nsStyleXUL {}
unsafe impl Sync for nsStyleXUL {}
use gecko_bindings::structs::nsStyleSVGReset;
unsafe impl Send for nsStyleSVGReset {}
unsafe impl Sync for nsStyleSVGReset {}
use gecko_bindings::structs::nsStyleColumn;
unsafe impl Send for nsStyleColumn {}
unsafe impl Sync for nsStyleColumn {}
use gecko_bindings::structs::nsStyleEffects;
unsafe impl Send for nsStyleEffects {}
unsafe impl Sync for nsStyleEffects {}
use gecko_bindings::structs::nsStyleImage;
unsafe impl Send for nsStyleImage {}
unsafe impl Sync for nsStyleImage {}
use gecko_bindings::structs::nsStyleGradient;
unsafe impl Send for nsStyleGradient {}
unsafe impl Sync for nsStyleGradient {}
use gecko_bindings::structs::nsStyleCoord;
unsafe impl Send for nsStyleCoord {}
unsafe impl Sync for nsStyleCoord {}
use gecko_bindings::structs::nsStyleGradientStop;
unsafe impl Send for nsStyleGradientStop {}
unsafe impl Sync for nsStyleGradientStop {}
use gecko_bindings::structs::nsStyleImageLayers;
unsafe impl Send for nsStyleImageLayers {}
unsafe impl Sync for nsStyleImageLayers {}
use gecko_bindings::structs::nsStyleImageLayers_Layer;
unsafe impl Send for nsStyleImageLayers_Layer {}
unsafe impl Sync for nsStyleImageLayers_Layer {}
use gecko_bindings::structs::nsStyleImageLayers_LayerType;
unsafe impl Send for nsStyleImageLayers_LayerType {}
unsafe impl Sync for nsStyleImageLayers_LayerType {}
use gecko_bindings::structs::nsStyleUnit;
unsafe impl Send for nsStyleUnit {}
unsafe impl Sync for nsStyleUnit {}
use gecko_bindings::structs::nsStyleUnion;
unsafe impl Send for nsStyleUnion {}
unsafe impl Sync for nsStyleUnion {}
use gecko_bindings::structs::nsStyleCoord_CalcValue;
unsafe impl Send for nsStyleCoord_CalcValue {}
unsafe impl Sync for nsStyleCoord_CalcValue {}
use gecko_bindings::structs::nsStyleCoord_Calc;
unsafe impl Send for nsStyleCoord_Calc {}
unsafe impl Sync for nsStyleCoord_Calc {}
use gecko_bindings::structs::nsRestyleHint;
use gecko_bindings::structs::ServoElementSnapshot;
use gecko_bindings::structs::nsChangeHint;
use gecko_bindings::structs::SheetParsingMode;
use gecko_bindings::structs::nsMainThreadPtrHandle;
use gecko_bindings::structs::nsMainThreadPtrHolder;
use gecko_bindings::structs::nscolor;
use gecko_bindings::structs::nsFont;
use gecko_bindings::structs::FontFamilyList;
use gecko_bindings::structs::FontFamilyType;
use gecko_bindings::structs::nsIAtom;
use gecko_bindings::structs::nsStyleContext;
unsafe impl Send for nsStyleContext {}
unsafe impl Sync for nsStyleContext {}
use gecko_bindings::structs::StyleClipPath;
use gecko_bindings::structs::StyleBasicShapeType;
use gecko_bindings::structs::StyleBasicShape;
use gecko_bindings::structs::nsCSSShadowArray;
use gecko_bindings::structs::nsINode;
use gecko_bindings::structs::nsIDocument;
use gecko_bindings::structs::nsIPrincipal;
use gecko_bindings::structs::nsIURI;
use gecko_bindings::structs::RawGeckoNode;
use gecko_bindings::structs::RawGeckoElement;
use gecko_bindings::structs::RawGeckoDocument;
use gecko_bindings::structs::ServoNodeData;

extern "C" {
    pub fn Gecko_EnsureTArrayCapacity(aArray: *mut ::std::os::raw::c_void,
                                      aCapacity: usize, aElementSize: usize);
}
extern "C" {
    pub fn Gecko_ClearPODTArray(aArray: *mut ::std::os::raw::c_void,
                                aElementSize: usize, aElementAlign: usize);
}
extern "C" {
    pub fn Servo_Node_ClearNodeData(arg1: *mut nsINode);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct nsHTMLCSSStyleSheet {
    pub _address: u8,
}
impl Clone for nsHTMLCSSStyleSheet {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn Gecko_ChildrenCount(node: RawGeckoNodeBorrowed) -> u32;
}
extern "C" {
    pub fn Gecko_NodeIsElement(node: RawGeckoNodeBorrowed) -> bool;
}
extern "C" {
    pub fn Gecko_GetParentNode(node: RawGeckoNodeBorrowed)
     -> RawGeckoNodeBorrowedOrNull;
}
extern "C" {
    pub fn Gecko_GetFirstChild(node: RawGeckoNodeBorrowed)
     -> RawGeckoNodeBorrowedOrNull;
}
extern "C" {
    pub fn Gecko_GetLastChild(node: RawGeckoNodeBorrowed)
     -> RawGeckoNodeBorrowedOrNull;
}
extern "C" {
    pub fn Gecko_GetPrevSibling(node: RawGeckoNodeBorrowed)
     -> RawGeckoNodeBorrowedOrNull;
}
extern "C" {
    pub fn Gecko_GetNextSibling(node: RawGeckoNodeBorrowed)
     -> RawGeckoNodeBorrowedOrNull;
}
extern "C" {
    pub fn Gecko_GetParentElement(element: RawGeckoElementBorrowed)
     -> RawGeckoElementBorrowedOrNull;
}
extern "C" {
    pub fn Gecko_GetFirstChildElement(element: RawGeckoElementBorrowed)
     -> RawGeckoElementBorrowedOrNull;
}
extern "C" {
    pub fn Gecko_GetLastChildElement(element: RawGeckoElementBorrowed)
     -> RawGeckoElementBorrowedOrNull;
}
extern "C" {
    pub fn Gecko_GetPrevSiblingElement(element: RawGeckoElementBorrowed)
     -> RawGeckoElementBorrowedOrNull;
}
extern "C" {
    pub fn Gecko_GetNextSiblingElement(element: RawGeckoElementBorrowed)
     -> RawGeckoElementBorrowedOrNull;
}
extern "C" {
    pub fn Gecko_GetDocumentElement(document: RawGeckoDocumentBorrowed)
     -> RawGeckoElementBorrowedOrNull;
}
extern "C" {
    pub fn Gecko_MaybeCreateStyleChildrenIterator(node: RawGeckoNodeBorrowed)
     -> StyleChildrenIteratorOwnedOrNull;
}
extern "C" {
    pub fn Gecko_DropStyleChildrenIterator(it: StyleChildrenIteratorOwned);
}
extern "C" {
    pub fn Gecko_GetNextStyleChild(it: StyleChildrenIteratorBorrowed)
     -> RawGeckoNodeBorrowedOrNull;
}
extern "C" {
    pub fn Gecko_ElementState(element: RawGeckoElementBorrowed) -> u8;
}
extern "C" {
    pub fn Gecko_IsHTMLElementInHTMLDocument(element: RawGeckoElementBorrowed)
     -> bool;
}
extern "C" {
    pub fn Gecko_IsLink(element: RawGeckoElementBorrowed) -> bool;
}
extern "C" {
    pub fn Gecko_IsTextNode(node: RawGeckoNodeBorrowed) -> bool;
}
extern "C" {
    pub fn Gecko_IsVisitedLink(element: RawGeckoElementBorrowed) -> bool;
}
extern "C" {
    pub fn Gecko_IsUnvisitedLink(element: RawGeckoElementBorrowed) -> bool;
}
extern "C" {
    pub fn Gecko_IsRootElement(element: RawGeckoElementBorrowed) -> bool;
}
extern "C" {
    pub fn Gecko_LocalName(element: RawGeckoElementBorrowed) -> *mut nsIAtom;
}
extern "C" {
    pub fn Gecko_Namespace(element: RawGeckoElementBorrowed) -> *mut nsIAtom;
}
extern "C" {
    pub fn Gecko_GetElementId(element: RawGeckoElementBorrowed)
     -> *mut nsIAtom;
}
extern "C" {
    pub fn Gecko_AtomAttrValue(element: RawGeckoElementBorrowed,
                               attribute: *mut nsIAtom) -> *mut nsIAtom;
}
extern "C" {
    pub fn Gecko_HasAttr(element: RawGeckoElementBorrowed, ns: *mut nsIAtom,
                         name: *mut nsIAtom) -> bool;
}
extern "C" {
    pub fn Gecko_AttrEquals(element: RawGeckoElementBorrowed,
                            ns: *mut nsIAtom, name: *mut nsIAtom,
                            str: *mut nsIAtom, ignoreCase: bool) -> bool;
}
extern "C" {
    pub fn Gecko_AttrDashEquals(element: RawGeckoElementBorrowed,
                                ns: *mut nsIAtom, name: *mut nsIAtom,
                                str: *mut nsIAtom) -> bool;
}
extern "C" {
    pub fn Gecko_AttrIncludes(element: RawGeckoElementBorrowed,
                              ns: *mut nsIAtom, name: *mut nsIAtom,
                              str: *mut nsIAtom) -> bool;
}
extern "C" {
    pub fn Gecko_AttrHasSubstring(element: RawGeckoElementBorrowed,
                                  ns: *mut nsIAtom, name: *mut nsIAtom,
                                  str: *mut nsIAtom) -> bool;
}
extern "C" {
    pub fn Gecko_AttrHasPrefix(element: RawGeckoElementBorrowed,
                               ns: *mut nsIAtom, name: *mut nsIAtom,
                               str: *mut nsIAtom) -> bool;
}
extern "C" {
    pub fn Gecko_AttrHasSuffix(element: RawGeckoElementBorrowed,
                               ns: *mut nsIAtom, name: *mut nsIAtom,
                               str: *mut nsIAtom) -> bool;
}
extern "C" {
    pub fn Gecko_ClassOrClassList(element: RawGeckoElementBorrowed,
                                  class_: *mut *mut nsIAtom,
                                  classList: *mut *mut *mut nsIAtom) -> u32;
}
extern "C" {
    pub fn Gecko_SnapshotAtomAttrValue(element: *mut ServoElementSnapshot,
                                       attribute: *mut nsIAtom)
     -> *mut nsIAtom;
}
extern "C" {
    pub fn Gecko_SnapshotHasAttr(element: *mut ServoElementSnapshot,
                                 ns: *mut nsIAtom, name: *mut nsIAtom)
     -> bool;
}
extern "C" {
    pub fn Gecko_SnapshotAttrEquals(element: *mut ServoElementSnapshot,
                                    ns: *mut nsIAtom, name: *mut nsIAtom,
                                    str: *mut nsIAtom, ignoreCase: bool)
     -> bool;
}
extern "C" {
    pub fn Gecko_SnapshotAttrDashEquals(element: *mut ServoElementSnapshot,
                                        ns: *mut nsIAtom, name: *mut nsIAtom,
                                        str: *mut nsIAtom) -> bool;
}
extern "C" {
    pub fn Gecko_SnapshotAttrIncludes(element: *mut ServoElementSnapshot,
                                      ns: *mut nsIAtom, name: *mut nsIAtom,
                                      str: *mut nsIAtom) -> bool;
}
extern "C" {
    pub fn Gecko_SnapshotAttrHasSubstring(element: *mut ServoElementSnapshot,
                                          ns: *mut nsIAtom,
                                          name: *mut nsIAtom,
                                          str: *mut nsIAtom) -> bool;
}
extern "C" {
    pub fn Gecko_SnapshotAttrHasPrefix(element: *mut ServoElementSnapshot,
                                       ns: *mut nsIAtom, name: *mut nsIAtom,
                                       str: *mut nsIAtom) -> bool;
}
extern "C" {
    pub fn Gecko_SnapshotAttrHasSuffix(element: *mut ServoElementSnapshot,
                                       ns: *mut nsIAtom, name: *mut nsIAtom,
                                       str: *mut nsIAtom) -> bool;
}
extern "C" {
    pub fn Gecko_SnapshotClassOrClassList(element: *mut ServoElementSnapshot,
                                          class_: *mut *mut nsIAtom,
                                          classList: *mut *mut *mut nsIAtom)
     -> u32;
}
extern "C" {
    pub fn Gecko_GetServoDeclarationBlock(element: RawGeckoElementBorrowed)
     -> ServoDeclarationBlockBorrowedOrNull;
}
extern "C" {
    pub fn Gecko_Atomize(aString: *const ::std::os::raw::c_char, aLength: u32)
     -> *mut nsIAtom;
}
extern "C" {
    pub fn Gecko_AddRefAtom(aAtom: *mut nsIAtom);
}
extern "C" {
    pub fn Gecko_ReleaseAtom(aAtom: *mut nsIAtom);
}
extern "C" {
    pub fn Gecko_GetAtomAsUTF16(aAtom: *mut nsIAtom, aLength: *mut u32)
     -> *const u16;
}
extern "C" {
    pub fn Gecko_AtomEqualsUTF8(aAtom: *mut nsIAtom,
                                aString: *const ::std::os::raw::c_char,
                                aLength: u32) -> bool;
}
extern "C" {
    pub fn Gecko_AtomEqualsUTF8IgnoreCase(aAtom: *mut nsIAtom,
                                          aString:
                                              *const ::std::os::raw::c_char,
                                          aLength: u32) -> bool;
}
extern "C" {
    pub fn Gecko_FontFamilyList_Clear(aList: *mut FontFamilyList);
}
extern "C" {
    pub fn Gecko_FontFamilyList_AppendNamed(aList: *mut FontFamilyList,
                                            aName: *mut nsIAtom);
}
extern "C" {
    pub fn Gecko_FontFamilyList_AppendGeneric(list: *mut FontFamilyList,
                                              familyType: FontFamilyType);
}
extern "C" {
    pub fn Gecko_CopyFontFamilyFrom(dst: *mut nsFont, src: *const nsFont);
}
extern "C" {
    pub fn Gecko_SetListStyleType(style_struct: *mut nsStyleList, type_: u32);
}
extern "C" {
    pub fn Gecko_CopyListStyleTypeFrom(dst: *mut nsStyleList,
                                       src: *const nsStyleList);
}
extern "C" {
    pub fn Gecko_SetNullImageValue(image: *mut nsStyleImage);
}
extern "C" {
    pub fn Gecko_SetGradientImageValue(image: *mut nsStyleImage,
                                       gradient: *mut nsStyleGradient);
}
extern "C" {
    pub fn Gecko_CopyImageValueFrom(image: *mut nsStyleImage,
                                    other: *const nsStyleImage);
}
extern "C" {
    pub fn Gecko_CreateGradient(shape: u8, size: u8, repeating: bool,
                                legacy_syntax: bool, stops: u32)
     -> *mut nsStyleGradient;
}
pub type ThreadSafePrincipalHolder = nsMainThreadPtrHolder<nsIPrincipal>;
extern "C" {
    pub fn Gecko_AddRefPrincipalArbitraryThread(aPtr:
                                                    *mut ThreadSafePrincipalHolder);
}
extern "C" {
    pub fn Gecko_ReleasePrincipalArbitraryThread(aPtr:
                                                     *mut ThreadSafePrincipalHolder);
}
pub type ThreadSafeURIHolder = nsMainThreadPtrHolder<nsIURI>;
extern "C" {
    pub fn Gecko_AddRefURIArbitraryThread(aPtr: *mut ThreadSafeURIHolder);
}
extern "C" {
    pub fn Gecko_ReleaseURIArbitraryThread(aPtr: *mut ThreadSafeURIHolder);
}
extern "C" {
    pub fn Gecko_SetMozBinding(style_struct: *mut nsStyleDisplay,
                               string_bytes: *const u8, string_length: u32,
                               base_uri: *mut ThreadSafeURIHolder,
                               referrer: *mut ThreadSafeURIHolder,
                               principal: *mut ThreadSafePrincipalHolder);
}
extern "C" {
    pub fn Gecko_CopyMozBindingFrom(des: *mut nsStyleDisplay,
                                    src: *const nsStyleDisplay);
}
extern "C" {
    pub fn Gecko_GetNodeFlags(node: RawGeckoNodeBorrowed) -> u32;
}
extern "C" {
    pub fn Gecko_SetNodeFlags(node: RawGeckoNodeBorrowed, flags: u32);
}
extern "C" {
    pub fn Gecko_UnsetNodeFlags(node: RawGeckoNodeBorrowed, flags: u32);
}
extern "C" {
    pub fn Gecko_GetStyleContext(node: RawGeckoNodeBorrowed,
                                 aPseudoTagOrNull: *mut nsIAtom)
     -> *mut nsStyleContext;
}
extern "C" {
    pub fn Gecko_CalcStyleDifference(oldstyle: *mut nsStyleContext,
                                     newstyle: ServoComputedValuesBorrowed)
     -> nsChangeHint;
}
extern "C" {
    pub fn Gecko_StoreStyleDifference(node: RawGeckoNodeBorrowed,
                                      change: nsChangeHint);
}
extern "C" {
    pub fn Gecko_ClearStyleContents(content: *mut nsStyleContent);
}
extern "C" {
    pub fn Gecko_CopyStyleContentsFrom(content: *mut nsStyleContent,
                                       other: *const nsStyleContent);
}
extern "C" {
    pub fn Gecko_EnsureImageLayersLength(layers: *mut nsStyleImageLayers,
                                         len: usize);
}
extern "C" {
    pub fn Gecko_InitializeImageLayer(layer: *mut nsStyleImageLayers_Layer,
                                      layer_type:
                                          nsStyleImageLayers_LayerType);
}
extern "C" {
    pub fn Gecko_ResetStyleCoord(unit: *mut nsStyleUnit,
                                 value: *mut nsStyleUnion);
}
extern "C" {
    pub fn Gecko_SetStyleCoordCalcValue(unit: *mut nsStyleUnit,
                                        value: *mut nsStyleUnion,
                                        calc: nsStyleCoord_CalcValue);
}
extern "C" {
    pub fn Gecko_CopyClipPathValueFrom(dst: *mut StyleClipPath,
                                       src: *const StyleClipPath);
}
extern "C" {
    pub fn Gecko_DestroyClipPath(clip: *mut StyleClipPath);
}
extern "C" {
    pub fn Gecko_NewBasicShape(type_: StyleBasicShapeType)
     -> *mut StyleBasicShape;
}
extern "C" {
    pub fn Gecko_FillAllBackgroundLists(layers: *mut nsStyleImageLayers,
                                        max_len: u32);
}
extern "C" {
    pub fn Gecko_FillAllMaskLists(layers: *mut nsStyleImageLayers,
                                  max_len: u32);
}
extern "C" {
    pub fn Gecko_AddRefCalcArbitraryThread(aPtr: *mut nsStyleCoord_Calc);
}
extern "C" {
    pub fn Gecko_ReleaseCalcArbitraryThread(aPtr: *mut nsStyleCoord_Calc);
}
extern "C" {
    pub fn Gecko_NewCSSShadowArray(len: u32) -> *mut nsCSSShadowArray;
}
extern "C" {
    pub fn Gecko_AddRefCSSShadowArrayArbitraryThread(aPtr:
                                                         *mut nsCSSShadowArray);
}
extern "C" {
    pub fn Gecko_ReleaseCSSShadowArrayArbitraryThread(aPtr:
                                                          *mut nsCSSShadowArray);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleFont(ptr: *mut nsStyleFont);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleFont(ptr: *mut nsStyleFont,
                                           other: *const nsStyleFont);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleFont(ptr: *mut nsStyleFont);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleColor(ptr: *mut nsStyleColor);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleColor(ptr: *mut nsStyleColor,
                                            other: *const nsStyleColor);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleColor(ptr: *mut nsStyleColor);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleList(ptr: *mut nsStyleList);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleList(ptr: *mut nsStyleList,
                                           other: *const nsStyleList);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleList(ptr: *mut nsStyleList);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleText(ptr: *mut nsStyleText);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleText(ptr: *mut nsStyleText,
                                           other: *const nsStyleText);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleText(ptr: *mut nsStyleText);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleVisibility(ptr: *mut nsStyleVisibility);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleVisibility(ptr: *mut nsStyleVisibility,
                                                 other:
                                                     *const nsStyleVisibility);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleVisibility(ptr: *mut nsStyleVisibility);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleUserInterface(ptr:
                                                    *mut nsStyleUserInterface);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleUserInterface(ptr:
                                                        *mut nsStyleUserInterface,
                                                    other:
                                                        *const nsStyleUserInterface);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleUserInterface(ptr: *mut nsStyleUserInterface);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleTableBorder(ptr: *mut nsStyleTableBorder);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleTableBorder(ptr:
                                                      *mut nsStyleTableBorder,
                                                  other:
                                                      *const nsStyleTableBorder);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleTableBorder(ptr: *mut nsStyleTableBorder);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleSVG(ptr: *mut nsStyleSVG);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleSVG(ptr: *mut nsStyleSVG,
                                          other: *const nsStyleSVG);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleSVG(ptr: *mut nsStyleSVG);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleVariables(ptr: *mut nsStyleVariables);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleVariables(ptr: *mut nsStyleVariables,
                                                other:
                                                    *const nsStyleVariables);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleVariables(ptr: *mut nsStyleVariables);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleBackground(ptr: *mut nsStyleBackground);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleBackground(ptr: *mut nsStyleBackground,
                                                 other:
                                                     *const nsStyleBackground);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleBackground(ptr: *mut nsStyleBackground);
}
extern "C" {
    pub fn Gecko_Construct_nsStylePosition(ptr: *mut nsStylePosition);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStylePosition(ptr: *mut nsStylePosition,
                                               other: *const nsStylePosition);
}
extern "C" {
    pub fn Gecko_Destroy_nsStylePosition(ptr: *mut nsStylePosition);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleTextReset(ptr: *mut nsStyleTextReset);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleTextReset(ptr: *mut nsStyleTextReset,
                                                other:
                                                    *const nsStyleTextReset);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleTextReset(ptr: *mut nsStyleTextReset);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleDisplay(ptr: *mut nsStyleDisplay);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleDisplay(ptr: *mut nsStyleDisplay,
                                              other: *const nsStyleDisplay);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleDisplay(ptr: *mut nsStyleDisplay);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleContent(ptr: *mut nsStyleContent);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleContent(ptr: *mut nsStyleContent,
                                              other: *const nsStyleContent);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleContent(ptr: *mut nsStyleContent);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleUIReset(ptr: *mut nsStyleUIReset);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleUIReset(ptr: *mut nsStyleUIReset,
                                              other: *const nsStyleUIReset);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleUIReset(ptr: *mut nsStyleUIReset);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleTable(ptr: *mut nsStyleTable);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleTable(ptr: *mut nsStyleTable,
                                            other: *const nsStyleTable);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleTable(ptr: *mut nsStyleTable);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleMargin(ptr: *mut nsStyleMargin);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleMargin(ptr: *mut nsStyleMargin,
                                             other: *const nsStyleMargin);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleMargin(ptr: *mut nsStyleMargin);
}
extern "C" {
    pub fn Gecko_Construct_nsStylePadding(ptr: *mut nsStylePadding);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStylePadding(ptr: *mut nsStylePadding,
                                              other: *const nsStylePadding);
}
extern "C" {
    pub fn Gecko_Destroy_nsStylePadding(ptr: *mut nsStylePadding);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleBorder(ptr: *mut nsStyleBorder);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleBorder(ptr: *mut nsStyleBorder,
                                             other: *const nsStyleBorder);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleBorder(ptr: *mut nsStyleBorder);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleOutline(ptr: *mut nsStyleOutline);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleOutline(ptr: *mut nsStyleOutline,
                                              other: *const nsStyleOutline);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleOutline(ptr: *mut nsStyleOutline);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleXUL(ptr: *mut nsStyleXUL);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleXUL(ptr: *mut nsStyleXUL,
                                          other: *const nsStyleXUL);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleXUL(ptr: *mut nsStyleXUL);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleSVGReset(ptr: *mut nsStyleSVGReset);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleSVGReset(ptr: *mut nsStyleSVGReset,
                                               other: *const nsStyleSVGReset);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleSVGReset(ptr: *mut nsStyleSVGReset);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleColumn(ptr: *mut nsStyleColumn);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleColumn(ptr: *mut nsStyleColumn,
                                             other: *const nsStyleColumn);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleColumn(ptr: *mut nsStyleColumn);
}
extern "C" {
    pub fn Gecko_Construct_nsStyleEffects(ptr: *mut nsStyleEffects);
}
extern "C" {
    pub fn Gecko_CopyConstruct_nsStyleEffects(ptr: *mut nsStyleEffects,
                                              other: *const nsStyleEffects);
}
extern "C" {
    pub fn Gecko_Destroy_nsStyleEffects(ptr: *mut nsStyleEffects);
}
extern "C" {
    pub fn Servo_StyleSheet_FromUTF8Bytes(bytes: *const u8, length: u32,
                                          parsing_mode: SheetParsingMode,
                                          base_bytes: *const u8,
                                          base_length: u32,
                                          base: *mut ThreadSafeURIHolder,
                                          referrer: *mut ThreadSafeURIHolder,
                                          principal:
                                              *mut ThreadSafePrincipalHolder)
     -> RawServoStyleSheetStrong;
}
extern "C" {
    pub fn Servo_StyleSheet_AddRef(sheet: RawServoStyleSheetBorrowed);
}
extern "C" {
    pub fn Servo_StyleSheet_Release(sheet: RawServoStyleSheetBorrowed);
}
extern "C" {
    pub fn Servo_StyleSheet_HasRules(sheet: RawServoStyleSheetBorrowed)
     -> bool;
}
extern "C" {
    pub fn Servo_StyleSet_Init() -> RawServoStyleSetOwned;
}
extern "C" {
    pub fn Servo_StyleSet_Drop(set: RawServoStyleSetOwned);
}
extern "C" {
    pub fn Servo_StyleSet_AppendStyleSheet(set: RawServoStyleSetBorrowedMut,
                                           sheet: RawServoStyleSheetBorrowed);
}
extern "C" {
    pub fn Servo_StyleSet_PrependStyleSheet(set: RawServoStyleSetBorrowedMut,
                                            sheet:
                                                RawServoStyleSheetBorrowed);
}
extern "C" {
    pub fn Servo_StyleSet_RemoveStyleSheet(set: RawServoStyleSetBorrowedMut,
                                           sheet: RawServoStyleSheetBorrowed);
}
extern "C" {
    pub fn Servo_StyleSet_InsertStyleSheetBefore(set:
                                                     RawServoStyleSetBorrowedMut,
                                                 sheet:
                                                     RawServoStyleSheetBorrowed,
                                                 reference:
                                                     RawServoStyleSheetBorrowed);
}
extern "C" {
    pub fn Servo_ParseStyleAttribute(bytes: *const u8, length: u32,
                                     cache: *mut nsHTMLCSSStyleSheet)
     -> ServoDeclarationBlockStrong;
}
extern "C" {
    pub fn Servo_DeclarationBlock_AddRef(declarations:
                                             ServoDeclarationBlockBorrowed);
}
extern "C" {
    pub fn Servo_DeclarationBlock_Release(declarations:
                                              ServoDeclarationBlockBorrowed);
}
extern "C" {
    pub fn Servo_DeclarationBlock_GetCache(declarations:
                                               ServoDeclarationBlockBorrowed)
     -> *mut nsHTMLCSSStyleSheet;
}
extern "C" {
    pub fn Servo_DeclarationBlock_SetImmutable(declarations:
                                                   ServoDeclarationBlockBorrowed);
}
extern "C" {
    pub fn Servo_DeclarationBlock_ClearCachePointer(declarations:
                                                        ServoDeclarationBlockBorrowed);
}
extern "C" {
    pub fn Servo_CSSSupports(name: *const u8, name_length: u32,
                             value: *const u8, value_length: u32) -> bool;
}
extern "C" {
    pub fn Servo_ComputedValues_Get(node: RawGeckoNodeBorrowed)
     -> ServoComputedValuesStrong;
}
extern "C" {
    pub fn Servo_ComputedValues_GetForAnonymousBox(parent_style_or_null:
                                                       ServoComputedValuesBorrowedOrNull,
                                                   pseudoTag: *mut nsIAtom,
                                                   set:
                                                       RawServoStyleSetBorrowedMut)
     -> ServoComputedValuesStrong;
}
extern "C" {
    pub fn Servo_ComputedValues_GetForPseudoElement(parent_style:
                                                        ServoComputedValuesBorrowed,
                                                    match_element:
                                                        RawGeckoElementBorrowed,
                                                    pseudo_tag: *mut nsIAtom,
                                                    set:
                                                        RawServoStyleSetBorrowedMut,
                                                    is_probe: bool)
     -> ServoComputedValuesStrong;
}
extern "C" {
    pub fn Servo_ComputedValues_Inherit(parent_style:
                                            ServoComputedValuesBorrowedOrNull)
     -> ServoComputedValuesStrong;
}
extern "C" {
    pub fn Servo_ComputedValues_AddRef(computed_values:
                                           ServoComputedValuesBorrowed);
}
extern "C" {
    pub fn Servo_ComputedValues_Release(computed_values:
                                            ServoComputedValuesBorrowed);
}
extern "C" {
    pub fn Servo_Initialize();
}
extern "C" {
    pub fn Servo_Shutdown();
}
extern "C" {
    pub fn Servo_ComputeRestyleHint(element: *mut RawGeckoElement,
                                    snapshot: *mut ServoElementSnapshot,
                                    set: RawServoStyleSetBorrowed)
     -> nsRestyleHint;
}
extern "C" {
    pub fn Servo_RestyleSubtree(node: RawGeckoNodeBorrowed,
                                set: RawServoStyleSetBorrowedMut);
}
extern "C" {
    pub fn Servo_GetStyleFont(computed_values: ServoComputedValuesBorrowed)
     -> *const nsStyleFont;
}
extern "C" {
    pub fn Servo_GetStyleColor(computed_values: ServoComputedValuesBorrowed)
     -> *const nsStyleColor;
}
extern "C" {
    pub fn Servo_GetStyleList(computed_values: ServoComputedValuesBorrowed)
     -> *const nsStyleList;
}
extern "C" {
    pub fn Servo_GetStyleText(computed_values: ServoComputedValuesBorrowed)
     -> *const nsStyleText;
}
extern "C" {
    pub fn Servo_GetStyleVisibility(computed_values:
                                        ServoComputedValuesBorrowed)
     -> *const nsStyleVisibility;
}
extern "C" {
    pub fn Servo_GetStyleUserInterface(computed_values:
                                           ServoComputedValuesBorrowed)
     -> *const nsStyleUserInterface;
}
extern "C" {
    pub fn Servo_GetStyleTableBorder(computed_values:
                                         ServoComputedValuesBorrowed)
     -> *const nsStyleTableBorder;
}
extern "C" {
    pub fn Servo_GetStyleSVG(computed_values: ServoComputedValuesBorrowed)
     -> *const nsStyleSVG;
}
extern "C" {
    pub fn Servo_GetStyleVariables(computed_values:
                                       ServoComputedValuesBorrowed)
     -> *const nsStyleVariables;
}
extern "C" {
    pub fn Servo_GetStyleBackground(computed_values:
                                        ServoComputedValuesBorrowed)
     -> *const nsStyleBackground;
}
extern "C" {
    pub fn Servo_GetStylePosition(computed_values:
                                      ServoComputedValuesBorrowed)
     -> *const nsStylePosition;
}
extern "C" {
    pub fn Servo_GetStyleTextReset(computed_values:
                                       ServoComputedValuesBorrowed)
     -> *const nsStyleTextReset;
}
extern "C" {
    pub fn Servo_GetStyleDisplay(computed_values: ServoComputedValuesBorrowed)
     -> *const nsStyleDisplay;
}
extern "C" {
    pub fn Servo_GetStyleContent(computed_values: ServoComputedValuesBorrowed)
     -> *const nsStyleContent;
}
extern "C" {
    pub fn Servo_GetStyleUIReset(computed_values: ServoComputedValuesBorrowed)
     -> *const nsStyleUIReset;
}
extern "C" {
    pub fn Servo_GetStyleTable(computed_values: ServoComputedValuesBorrowed)
     -> *const nsStyleTable;
}
extern "C" {
    pub fn Servo_GetStyleMargin(computed_values: ServoComputedValuesBorrowed)
     -> *const nsStyleMargin;
}
extern "C" {
    pub fn Servo_GetStylePadding(computed_values: ServoComputedValuesBorrowed)
     -> *const nsStylePadding;
}
extern "C" {
    pub fn Servo_GetStyleBorder(computed_values: ServoComputedValuesBorrowed)
     -> *const nsStyleBorder;
}
extern "C" {
    pub fn Servo_GetStyleOutline(computed_values: ServoComputedValuesBorrowed)
     -> *const nsStyleOutline;
}
extern "C" {
    pub fn Servo_GetStyleXUL(computed_values: ServoComputedValuesBorrowed)
     -> *const nsStyleXUL;
}
extern "C" {
    pub fn Servo_GetStyleSVGReset(computed_values:
                                      ServoComputedValuesBorrowed)
     -> *const nsStyleSVGReset;
}
extern "C" {
    pub fn Servo_GetStyleColumn(computed_values: ServoComputedValuesBorrowed)
     -> *const nsStyleColumn;
}
extern "C" {
    pub fn Servo_GetStyleEffects(computed_values: ServoComputedValuesBorrowed)
     -> *const nsStyleEffects;
}
